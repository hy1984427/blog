{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/test_case_in_mindmap.png","path":"images/test_case_in_mindmap.png","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/images/User_Testing.png","path":"images/User_Testing.png","modified":0,"renderable":0},{"_id":"source/images/QA_capability_Release.png","path":"images/QA_capability_Release.png","modified":0,"renderable":0},{"_id":"source/images/QA_capability_Iteration.png","path":"images/QA_capability_Iteration.png","modified":0,"renderable":0},{"_id":"source/images/QA_capability.jpg","path":"images/QA_capability.jpg","modified":0,"renderable":0},{"_id":"source/images/QA_Capability_Matrix.png","path":"images/QA_Capability_Matrix.png","modified":0,"renderable":0},{"_id":"source/images/Gamification_07-3.png","path":"images/Gamification_07-3.png","modified":0,"renderable":0},{"_id":"source/images/Gamification_07-2.png","path":"images/Gamification_07-2.png","modified":0,"renderable":0},{"_id":"source/images/Gamification_07-1.jpg","path":"images/Gamification_07-1.jpg","modified":0,"renderable":0},{"_id":"source/images/Gamification_06.png","path":"images/Gamification_06.png","modified":0,"renderable":0},{"_id":"source/images/Gamification_05-2.jpg","path":"images/Gamification_05-2.jpg","modified":0,"renderable":0},{"_id":"source/images/Gamification_05-1.png","path":"images/Gamification_05-1.png","modified":0,"renderable":0},{"_id":"source/images/Gamification_04.png","path":"images/Gamification_04.png","modified":0,"renderable":0},{"_id":"source/images/Gamification_03-4.png","path":"images/Gamification_03-4.png","modified":0,"renderable":0},{"_id":"source/images/Gamification_03-3.jpg","path":"images/Gamification_03-3.jpg","modified":0,"renderable":0},{"_id":"source/images/Gamification_03-2.png","path":"images/Gamification_03-2.png","modified":0,"renderable":0},{"_id":"source/images/Gamification_03-1.png","path":"images/Gamification_03-1.png","modified":0,"renderable":0},{"_id":"source/images/Gamification_02.png","path":"images/Gamification_02.png","modified":0,"renderable":0},{"_id":"source/images/Gamification_01.png","path":"images/Gamification_01.png","modified":0,"renderable":0},{"_id":"source/documents/WP7App.zip","path":"documents/WP7App.zip","modified":0,"renderable":0},{"_id":"source/documents/UIAutomation.zip","path":"documents/UIAutomation.zip","modified":0,"renderable":0},{"_id":"source/documents/Test_Plan_For_I37_To_I39.pdf","path":"documents/Test_Plan_For_I37_To_I39.pdf","modified":0,"renderable":0},{"_id":"source/documents/Speaking_Skills.pdf","path":"documents/Speaking_Skills.pdf","modified":0,"renderable":0},{"_id":"source/documents/Security_Testing_Of_Web_Applications.pdf","path":"documents/Security_Testing_Of_Web_Applications.pdf","modified":0,"renderable":0},{"_id":"source/documents/Robotium_Black_Box_Testing_For_Android_Chinese.pdf","path":"documents/Robotium_Black_Box_Testing_For_Android_Chinese.pdf","modified":0,"renderable":0},{"_id":"source/documents/Robotium.zip","path":"documents/Robotium.zip","modified":0,"renderable":0},{"_id":"source/documents/QA_capability_matrix.xlsx","path":"documents/QA_capability_matrix.xlsx","modified":0,"renderable":0},{"_id":"source/documents/Pro_Mobile_App_Testing_With_22_Rules_references.pdf","path":"documents/Pro_Mobile_App_Testing_With_22_Rules_references.pdf","modified":0,"renderable":0},{"_id":"source/documents/Pro_Mobile_App_Testing_With_22_Rules.pdf","path":"documents/Pro_Mobile_App_Testing_With_22_Rules.pdf","modified":0,"renderable":0},{"_id":"source/documents/PageName_FeatureName_StoryID.mm","path":"documents/PageName_FeatureName_StoryID.mm","modified":0,"renderable":0},{"_id":"source/documents/NativeDriverIOSTests.zip","path":"documents/NativeDriverIOSTests.zip","modified":0,"renderable":0},{"_id":"source/documents/NativeDriverAndroidTests.zip","path":"documents/NativeDriverAndroidTests.zip","modified":0,"renderable":0},{"_id":"source/documents/KIF.zip","path":"documents/KIF.zip","modified":0,"renderable":0},{"_id":"source/documents/HelloWorld_Frank.zip","path":"documents/HelloWorld_Frank.zip","modified":0,"renderable":0},{"_id":"source/documents/Automation_For_Web_Service-soapui.pdf","path":"documents/Automation_For_Web_Service-soapui.pdf","modified":0,"renderable":0},{"_id":"source/documents/Agile_Test_Plan.pdf","path":"documents/Agile_Test_Plan.pdf","modified":0,"renderable":0},{"_id":"source/images/Bug_Series_1.1.png","path":"images/Bug_Series_1.1.png","modified":0,"renderable":0},{"_id":"source/images/ProMobileTestingWith22Rules.png","path":"images/ProMobileTestingWith22Rules.png","modified":0,"renderable":0},{"_id":"source/documents/22Rules_In_Mobile_App_Testing.pdf","path":"documents/22Rules_In_Mobile_App_Testing.pdf","modified":0,"renderable":0},{"_id":"source/images/Mobile_Cloud_Testing_Forgien.png","path":"images/Mobile_Cloud_Testing_Forgien.png","modified":0,"renderable":0},{"_id":"source/images/Mobile_Cloud_Testing_Domestic.png","path":"images/Mobile_Cloud_Testing_Domestic.png","modified":0,"renderable":0},{"_id":"source/images/Wireframe.png","path":"images/Wireframe.png","modified":0,"renderable":0},{"_id":"source/images/Story_Wall.jpg","path":"images/Story_Wall.jpg","modified":0,"renderable":0},{"_id":"source/images/Staffing_Plan.png","path":"images/Staffing_Plan.png","modified":0,"renderable":0},{"_id":"source/images/Proposal_Index.png","path":"images/Proposal_Index.png","modified":0,"renderable":0},{"_id":"source/images/Prepare_For_Engagement.png","path":"images/Prepare_For_Engagement.png","modified":0,"renderable":0},{"_id":"source/images/Engagement_Summary.png","path":"images/Engagement_Summary.png","modified":0,"renderable":0},{"_id":"source/images/Architecture_Map.png","path":"images/Architecture_Map.png","modified":0,"renderable":0},{"_id":"source/images/Architecture.png","path":"images/Architecture.png","modified":0,"renderable":0},{"_id":"source/documents/AndroidCalculator.sh","path":"documents/AndroidCalculator.sh","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.sh","path":"documents/UIKitCatalog.sh","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Info.plist","path":"documents/UIKitCatalog.app/Info.plist","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Localizable.strings","path":"documents/UIKitCatalog.app/Localizable.strings","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/PkgInfo","path":"documents/UIKitCatalog.app/PkgInfo","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/LaunchScreen.storyboardc/01J-lp-oVM-view-Ze5-6b-2t3.nib","path":"documents/UIKitCatalog.app/LaunchScreen.storyboardc/01J-lp-oVM-view-Ze5-6b-2t3.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/LaunchScreen.storyboardc/Info.plist","path":"documents/UIKitCatalog.app/LaunchScreen.storyboardc/Info.plist","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/LaunchScreen.storyboardc/UIViewController-01J-lp-oVM.nib","path":"documents/UIKitCatalog.app/LaunchScreen.storyboardc/UIViewController-01J-lp-oVM.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/en.lproj/InfoPlist.strings","path":"documents/UIKitCatalog.app/en.lproj/InfoPlist.strings","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Frameworks/libswiftCoreImage.dylib","path":"documents/UIKitCatalog.app/Frameworks/libswiftCoreImage.dylib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Frameworks/libswiftQuartzCore.dylib","path":"documents/UIKitCatalog.app/Frameworks/libswiftQuartzCore.dylib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Frameworks/libswiftObjectiveC.dylib","path":"documents/UIKitCatalog.app/Frameworks/libswiftObjectiveC.dylib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/Info.plist","path":"documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/Info.plist","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/Mhd-Bs-sIn-view-YVy-et-UAQ.nib","path":"documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/Mhd-Bs-sIn-view-YVy-et-UAQ.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/SearchResultsViewControllerStoryboardIdentifier.nib","path":"documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/SearchResultsViewControllerStoryboardIdentifier.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UINavigationController-6Ay-cF-67z.nib","path":"documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UINavigationController-6Ay-cF-67z.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/Thx-B6-QkK-view-QvM-3S-GbD.nib","path":"documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/Thx-B6-QkK-view-QvM-3S-GbD.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UITableViewController-aRM-gX-SK9.nib","path":"documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UITableViewController-aRM-gX-SK9.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UITableViewController-fjx-Zc-6QZ.nib","path":"documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UITableViewController-fjx-Zc-6QZ.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UITableViewController-yzs-dR-TMM.nib","path":"documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UITableViewController-yzs-dR-TMM.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UIViewController-Mhd-Bs-sIn.nib","path":"documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UIViewController-Mhd-Bs-sIn.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UIViewController-aTT-8g-UdL.nib","path":"documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UIViewController-aTT-8g-UdL.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/aRM-gX-SK9-view-1PE-AW-QJq.nib","path":"documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/aRM-gX-SK9-view-1PE-AW-QJq.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/aTT-8g-UdL-view-VZF-3b-rcm.nib","path":"documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/aTT-8g-UdL-view-VZF-3b-rcm.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/fjx-Zc-6QZ-view-964-BZ-diD.nib","path":"documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/fjx-Zc-6QZ-view-964-BZ-diD.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/v21-vF-FLh-view-d2N-kr-XWw.nib","path":"documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/v21-vF-FLh-view-d2N-kr-XWw.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/yzs-dR-TMM-view-RmR-zN-t9e.nib","path":"documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/yzs-dR-TMM-view-RmR-zN-t9e.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/08q-TN-XKe-view-Txd-dj-VDv.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/08q-TN-XKe-view-Txd-dj-VDv.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/7Xn-ho-KP8-view-LFl-gd-u3P.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/7Xn-ho-KP8-view-LFl-gd-u3P.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/CRN-u2-9ve-view-u45-Qw-Gig.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/CRN-u2-9ve-view-u45-Qw-Gig.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/DSJ-7r-oCY-view-dyj-uS-k8j.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/DSJ-7r-oCY-view-dyj-uS-k8j.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/Eil-ie-nN6-view-fLQ-5f-tUh.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/Eil-ie-nN6-view-fLQ-5f-tUh.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/F6w-By-RQf-view-jKA-KV-iQF.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/F6w-By-RQf-view-jKA-KV-iQF.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/FlG-Up-yfw-view-TUr-qb-IUg.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/FlG-Up-yfw-view-TUr-qb-IUg.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/Info.plist","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/Info.plist","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/K8w-Uq-R9J-view-Hwb-09-b4P.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/K8w-Uq-R9J-view-Hwb-09-b4P.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/Ob2-pp-aCj-view-aQ3-9F-Tmi.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/Ob2-pp-aCj-view-aQ3-9F-Tmi.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/SVQ-IJ-reh-view-lDC-Xd-apf.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/SVQ-IJ-reh-view-lDC-Xd-apf.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-3hj-3A-Jeu.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-3hj-3A-Jeu.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-4VS-2r-7OB.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-4VS-2r-7OB.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-JOI-11-xgr.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-JOI-11-xgr.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-MJ0-Ub-SBU.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-MJ0-Ub-SBU.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-VO7-2f-x5T.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-VO7-2f-x5T.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-av9-5l-681.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-av9-5l-681.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-b4J-Sc-TeP.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-b4J-Sc-TeP.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-fyN-ao-mNW.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-fyN-ao-mNW.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-jVo-88-dub.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-jVo-88-dub.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-kZ9-XK-Aa6.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-kZ9-XK-Aa6.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-mN2-KO-6A2.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-mN2-KO-6A2.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-PtF-vt-hJJ.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-PtF-vt-hJJ.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-ob4-mD-tic.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-ob4-mD-tic.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-qr8-uD-JZA.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-qr8-uD-JZA.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-u6u-ko-s7H.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-u6u-ko-s7H.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-upa-p3-O3r.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-upa-p3-O3r.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-z9a-R6-EDf.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-z9a-R6-EDf.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UISplitViewController-H1p-Uh-vWS.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UISplitViewController-H1p-Uh-vWS.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UIViewController-CRN-u2-9ve.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UIViewController-CRN-u2-9ve.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UIViewController-F6w-By-RQf.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UIViewController-F6w-By-RQf.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UIViewController-FlG-Up-yfw.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UIViewController-FlG-Up-yfw.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UIViewController-qCe-qZ-xUZ.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UIViewController-qCe-qZ-xUZ.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/Va4-Ge-jQn-view-iro-ev-0xV.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/Va4-Ge-jQn-view-iro-ev-0xV.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/VeD-XY-hiR-view-uNJ-1h-kk4.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/VeD-XY-hiR-view-uNJ-1h-kk4.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/XCI-A9-c2M-view-InE-1J-uPb.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/XCI-A9-c2M-view-InE-1J-uPb.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/ZSF-lM-gQa-view-1Df-6J-Q8v.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/ZSF-lM-gQa-view-1Df-6J-Q8v.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/aY0-FD-8DD-view-vxe-YC-yBi.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/aY0-FD-8DD-view-vxe-YC-yBi.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/gl0-hM-EWg-view-gDs-OX-aHt.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/gl0-hM-EWg-view-gDs-OX-aHt.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/hIc-I2-PiV-view-EB5-Ny-mbq.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/hIc-I2-PiV-view-EB5-Ny-mbq.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/i9U-A8-mkf-view-cde-Ag-lVB.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/i9U-A8-mkf-view-cde-Ag-lVB.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/laz-6N-ZhE-view-8xG-xW-Mvc.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/laz-6N-ZhE-view-8xG-xW-Mvc.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/pUP-b0-VMf-view-eAJ-am-dgQ.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/pUP-b0-VMf-view-eAJ-am-dgQ.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/riI-GT-RXv-view-1Bw-B1-fb8.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/riI-GT-RXv-view-1Bw-B1-fb8.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/zcI-oN-J3j-view-4ER-nG-feZ.nib","path":"documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/zcI-oN-J3j-view-4ER-nG-feZ.nib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Frameworks/libswiftDarwin.dylib","path":"documents/UIKitCatalog.app/Frameworks/libswiftDarwin.dylib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Frameworks/libswiftUIKit.dylib","path":"documents/UIKitCatalog.app/Frameworks/libswiftUIKit.dylib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Frameworks/libswiftCoreGraphics.dylib","path":"documents/UIKitCatalog.app/Frameworks/libswiftCoreGraphics.dylib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/libswiftRemoteMirror.dylib","path":"documents/UIKitCatalog.app/libswiftRemoteMirror.dylib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Frameworks/libswiftDispatch.dylib","path":"documents/UIKitCatalog.app/Frameworks/libswiftDispatch.dylib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/UIKitCatalog","path":"documents/UIKitCatalog.app/UIKitCatalog","modified":0,"renderable":0},{"_id":"source/documents/AndroidCalculator.apk","path":"documents/AndroidCalculator.apk","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Frameworks/libswiftFoundation.dylib","path":"documents/UIKitCatalog.app/Frameworks/libswiftFoundation.dylib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Frameworks/libswiftCore.dylib","path":"documents/UIKitCatalog.app/Frameworks/libswiftCore.dylib","modified":0,"renderable":0},{"_id":"source/documents/UIKitCatalog.app/Assets.car","path":"documents/UIKitCatalog.app/Assets.car","modified":0,"renderable":0},{"_id":"source/images/WebTestingBookCover.jpg","path":"images/WebTestingBookCover.jpg","modified":1,"renderable":0},{"_id":"source/images/MobileTestingBookCover.png","path":"images/MobileTestingBookCover.png","modified":1,"renderable":0},{"_id":"source/images/Bug_Big_Bang_In_Web_Testing.jpg","path":"images/Bug_Big_Bang_In_Web_Testing.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/Agile_Test_Plan.md","shasum":"4f53daeca0a828a3e6abff7d31386f0c3d313db5","modified":1499643192000,"hash":"4f53daeca0a828a3e6abff7d31386f0c3d313db5"},{"_id":"source/_posts/Android_Automation_NativeDriver.md","shasum":"ac40eb20832baecd1c42540f576a466b9923d53c","modified":1499643192000,"hash":"ac40eb20832baecd1c42540f576a466b9923d53c"},{"_id":"source/AboutMe.md","shasum":"99d23b0b583d25b5ecfea6736057de2ff31b69f5","modified":1499647525000,"hash":"b6ee3852104be5f8b7a1c7855fc0c9d9a6046725"},{"_id":"source/_posts/Android_Automation_Robotium.md","shasum":"e63c4cc80f7d3f07b2262a42883f434f9e5fbcb9","modified":1499643192000,"hash":"e63c4cc80f7d3f07b2262a42883f434f9e5fbcb9"},{"_id":"source/_posts/Exploratory_Testing_For_Android.md","shasum":"89d454d253cf240721540c2337738dca9a6e90ef","modified":1499643192000,"hash":"89d454d253cf240721540c2337738dca9a6e90ef"},{"_id":"source/_posts/Book_References.md","shasum":"d508e3a7f3f992367a0e1dac98be1b0c1636a439","modified":1499643192000,"hash":"d508e3a7f3f992367a0e1dac98be1b0c1636a439"},{"_id":"source/_posts/Game_The_Marshmallow_Challenge.md","shasum":"21da11eae764ea8920b8cc87e97bf721f05b675c","modified":1499643192000,"hash":"21da11eae764ea8920b8cc87e97bf721f05b675c"},{"_id":"source/_posts/How_Google_Test_Software.md","shasum":"212fed80892d12b3f123e27907099baf3dd6a1b8","modified":1499643192000,"hash":"212fed80892d12b3f123e27907099baf3dd6a1b8"},{"_id":"source/_posts/How_To_Publish_A_Technical_Book.md","shasum":"b96168132f8418fb52f112ce4cae6bc12d3cef2f","modified":1499643192000,"hash":"b96168132f8418fb52f112ce4cae6bc12d3cef2f"},{"_id":"source/_posts/Mobile_App_Testing_With_22_Rules.md","shasum":"343496ff0853d0da7e8b32ca18a0d900287f019e","modified":1499643192000,"hash":"343496ff0853d0da7e8b32ca18a0d900287f019e"},{"_id":"source/_posts/No_QA_In_Agile.md","shasum":"274aaeb5566914d142965c37b70eca52302faf40","modified":1499643192000,"hash":"274aaeb5566914d142965c37b70eca52302faf40"},{"_id":"source/_posts/Practice_Of_Gamification_In_Insurance_Project.md","shasum":"e00fe6fcf338a5b08897c6e6abd31fe870706e74","modified":1499643192000,"hash":"e00fe6fcf338a5b08897c6e6abd31fe870706e74"},{"_id":"source/_posts/Practice_QA_Capability_In_Project.md","shasum":"15f747bb185d772a27556b8fa1564b22a5701d6c","modified":1499643192000,"hash":"15f747bb185d772a27556b8fa1564b22a5701d6c"},{"_id":"source/_posts/QA_Capability_Matrix.md","shasum":"7438ce23e5f29e267828f10155e84e999ea69199","modified":1499643192000,"hash":"7438ce23e5f29e267828f10155e84e999ea69199"},{"_id":"source/_posts/Security_Testing_Of_Web_Applications.md","shasum":"eac42ffdf2070aefc6c558e1837ad47e08a4107c","modified":1499643192000,"hash":"eac42ffdf2070aefc6c558e1837ad47e08a4107c"},{"_id":"source/_posts/Practices_Can_Be_Adopted_In_Projects.md","shasum":"97b3bcceb7ab1fa001ed34cd28f2a5d020682b5d","modified":1499643192000,"hash":"97b3bcceb7ab1fa001ed34cd28f2a5d020682b5d"},{"_id":"source/_posts/Speaking_Skills.md","shasum":"6bf0b79b18d4e1fbfb801d411ddd862bc725d8e5","modified":1499643192000,"hash":"6bf0b79b18d4e1fbfb801d411ddd862bc725d8e5"},{"_id":"source/_posts/UserTesting_In_Project.md","shasum":"6d3765fbbe059c83294c2ef61cd434eeb3716c53","modified":1499643192000,"hash":"6d3765fbbe059c83294c2ef61cd434eeb3716c53"},{"_id":"source/_posts/Write_Test_Case_Use_Mind_Map.md","shasum":"e12c869c473eb95cc7fc6410cae18abca2b3ad17","modified":1499643192000,"hash":"e12c869c473eb95cc7fc6410cae18abca2b3ad17"},{"_id":"source/_posts/Windows_Phone_Automation_Windows_Phone_Test_Framework.md","shasum":"9b8d8df60503f7bee45d92ef1caaeaa7373c26b4","modified":1499643192000,"hash":"9b8d8df60503f7bee45d92ef1caaeaa7373c26b4"},{"_id":"source/_posts/iOS_Automation_Frank.md","shasum":"12d1f8a5c982ef5977ef0711b9e3596944e4b1f3","modified":1499643192000,"hash":"12d1f8a5c982ef5977ef0711b9e3596944e4b1f3"},{"_id":"source/_posts/iOS_Automation_KIF_Keep_It_Functional.md","shasum":"8e691e9acde43234a7e698e2d203a343c449e067","modified":1499643192000,"hash":"8e691e9acde43234a7e698e2d203a343c449e067"},{"_id":"source/_posts/iOS_Automation_NativeDriver.md","shasum":"10ceb05b5e6e60bcd25b6717be122b173d877d09","modified":1499643192000,"hash":"10ceb05b5e6e60bcd25b6717be122b173d877d09"},{"_id":"source/_posts/iOS_Automation_UIAutomation.md","shasum":"65fb914b1bbf592357ad32282a1c6c9c18771cf7","modified":1499643192000,"hash":"65fb914b1bbf592357ad32282a1c6c9c18771cf7"},{"_id":"source/categories/index.md","shasum":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1499643192000,"hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60"},{"_id":"source/documents/Agile_Test_Plan.pdf","shasum":"cfa7c17bb0e41dc15208667546b770bb1c61da7c","modified":1499643192000,"hash":"cfa7c17bb0e41dc15208667546b770bb1c61da7c"},{"_id":"source/documents/PageName_FeatureName_StoryID.mm","shasum":"95a4989caae4157cc03aea3e312b7cb3beee1ccb","modified":1499643192000,"hash":"95a4989caae4157cc03aea3e312b7cb3beee1ccb"},{"_id":"source/documents/QA_capability_matrix.xlsx","shasum":"f084737195a1e998778473a433e46dc0a4fc7ddf","modified":1499643192000,"hash":"f084737195a1e998778473a433e46dc0a4fc7ddf"},{"_id":"source/documents/Test_Plan_For_I37_To_I39.pdf","shasum":"f8d46743251a9c43f548af7d668f8bb9ccc6bc65","modified":1499643192000,"hash":"f8d46743251a9c43f548af7d668f8bb9ccc6bc65"},{"_id":"source/images/Gamification_01.png","shasum":"8efd6cf2c9e6dedd4da03c3dee10b67ecd7c09c2","modified":1499643192000,"hash":"8efd6cf2c9e6dedd4da03c3dee10b67ecd7c09c2"},{"_id":"source/images/Gamification_03-1.png","shasum":"3e94296b33391d53783ea277fae1d683bc6ab28a","modified":1499643192000,"hash":"3e94296b33391d53783ea277fae1d683bc6ab28a"},{"_id":"source/images/Gamification_03-2.png","shasum":"66f96ed73719ad8ce02179019cd39b8bfffea918","modified":1499643192000,"hash":"66f96ed73719ad8ce02179019cd39b8bfffea918"},{"_id":"source/images/Gamification_03-3.jpg","shasum":"23973d222becd6a6ebaa293b88eacd4ed39c9927","modified":1499643192000,"hash":"23973d222becd6a6ebaa293b88eacd4ed39c9927"},{"_id":"source/images/Gamification_05-2.jpg","shasum":"60a8855d8158d9637fe0604ba389c3d70fd6f547","modified":1499643193000,"hash":"60a8855d8158d9637fe0604ba389c3d70fd6f547"},{"_id":"source/images/Gamification_06.png","shasum":"c2dfed207c6f4563f101f55025cdb467ecc58056","modified":1499643193000,"hash":"c2dfed207c6f4563f101f55025cdb467ecc58056"},{"_id":"source/images/Gamification_07-1.jpg","shasum":"566f6a2ae80108ab34649ed77eb32b040a8c10a2","modified":1499643193000,"hash":"566f6a2ae80108ab34649ed77eb32b040a8c10a2"},{"_id":"source/images/avatar.png","shasum":"75d072df938ca3047b1b419c96548c54e2c40180","modified":1499643193000,"hash":"75d072df938ca3047b1b419c96548c54e2c40180"},{"_id":"source/tags/index.md","shasum":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1499643193000,"hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d"},{"_id":"source/documents/Pro_Mobile_App_Testing_With_22_Rules_references.pdf","shasum":"68cc979369ab358fb5fd12f8d77faf1f26f140ee","modified":1499643192000,"hash":"68cc979369ab358fb5fd12f8d77faf1f26f140ee"},{"_id":"source/documents/Speaking_Skills.pdf","shasum":"a6a034e0331c78b269bbfe1ea87d89db8c676ab6","modified":1499643192000,"hash":"a6a034e0331c78b269bbfe1ea87d89db8c676ab6"},{"_id":"source/documents/UIAutomation.zip","shasum":"d01878e978acd7a26b57c9a3a4107170b7ce3fd5","modified":1499643192000,"hash":"d01878e978acd7a26b57c9a3a4107170b7ce3fd5"},{"_id":"source/images/Gamification_03-4.png","shasum":"70adad759729ecceed5158bd79f2ad20ffcb5d27","modified":1499643192000,"hash":"70adad759729ecceed5158bd79f2ad20ffcb5d27"},{"_id":"source/documents/Security_Testing_Of_Web_Applications.pdf","shasum":"59dc80adc6878c6b4ba3454d043f50557477757e","modified":1499643192000,"hash":"59dc80adc6878c6b4ba3454d043f50557477757e"},{"_id":"source/documents/WP7App.zip","shasum":"fd8e4e7657de81e86d5f688f888288a194b1056c","modified":1499643192000,"hash":"fd8e4e7657de81e86d5f688f888288a194b1056c"},{"_id":"source/images/Gamification_07-2.png","shasum":"ca57c9298f7a75777abb08cd5e135158ab2115af","modified":1499643193000,"hash":"ca57c9298f7a75777abb08cd5e135158ab2115af"},{"_id":"source/images/Gamification_02.png","shasum":"c3686cf37c6957c72b5791e64fe9c0ea84bd62d4","modified":1499643192000,"hash":"c3686cf37c6957c72b5791e64fe9c0ea84bd62d4"},{"_id":"source/images/Gamification_07-3.png","shasum":"67271c6a9e17d160a8e02ca05e50ab4756a2ac5b","modified":1499643193000,"hash":"67271c6a9e17d160a8e02ca05e50ab4756a2ac5b"},{"_id":"source/images/QA_capability_Release.png","shasum":"6a632256bb1d2bb563ebc499d550218517d244b6","modified":1499643193000,"hash":"6a632256bb1d2bb563ebc499d550218517d244b6"},{"_id":"source/images/test_case_in_mindmap.png","shasum":"151b9e217e2045de084b166856dd6457ef30cc70","modified":1499643193000,"hash":"151b9e217e2045de084b166856dd6457ef30cc70"},{"_id":"source/images/QA_Capability_Matrix.png","shasum":"8b4b879f7ba6dadbf82ed6582634dca3826e3731","modified":1499643193000,"hash":"8b4b879f7ba6dadbf82ed6582634dca3826e3731"},{"_id":"source/images/QA_capability_Iteration.png","shasum":"2f5652d24e38b7b84bbd4e3371cf2872aaa59283","modified":1499643193000,"hash":"2f5652d24e38b7b84bbd4e3371cf2872aaa59283"},{"_id":"source/images/User_Testing.png","shasum":"6fa0345be57611ef896b6aa8f6c15ebf5e879b52","modified":1499643193000,"hash":"6fa0345be57611ef896b6aa8f6c15ebf5e879b52"},{"_id":"themes/minos/LICENSE","shasum":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1436494045000},{"_id":"themes/minos/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1436494045000},{"_id":"themes/minos/_config.yml","shasum":"f809cbca15571c7bd84998c768ef87bffbd90c11","modified":1462346720000},{"_id":"themes/minos/README.md","shasum":"e1f4904e7c14a61f5a135c3b119eed86efca8536","modified":1436494045000},{"_id":"themes/minos/_source/categories/index.md","shasum":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1436494045000},{"_id":"themes/minos/_source/tags/index.md","shasum":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1436494045000},{"_id":"themes/minos/languages/en.yml","shasum":"926a6381efae488068b96b8bc8222c6dd0f8edf5","modified":1436494045000},{"_id":"themes/minos/languages/zh-CN.yml","shasum":"bf1291d9a05479d8cba50dd49693031f2360168d","modified":1436494045000},{"_id":"themes/minos/layout/_partial/after-footer.ejs","shasum":"54b51686f42ff686ce70c1ae1f3f8b68918b6a99","modified":1436494045000},{"_id":"themes/minos/layout/_partial/archive-post.ejs","shasum":"9d687d6560e05764d3d57b2948680aa3940332cf","modified":1436494045000},{"_id":"themes/minos/layout/_partial/archive.ejs","shasum":"fb0206d283ae56717eb92f92784271e79b2e208a","modified":1436494045000},{"_id":"themes/minos/layout/_partial/article.ejs","shasum":"718c5060e54fb127839cd4d34aea381fba52a5dc","modified":1436494045000},{"_id":"themes/minos/layout/_partial/footer.ejs","shasum":"9ff7842d55d8707317fbcd00b1b2fac206a21a1a","modified":1436494045000},{"_id":"themes/minos/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1436494045000},{"_id":"themes/minos/layout/_partial/header.ejs","shasum":"5376038caea17139da2eca395b05d51d55a8f8e2","modified":1436494045000},{"_id":"themes/minos/layout/_partial/head.ejs","shasum":"a0f730e1575917818442129459d93e883cd19804","modified":1436494045000},{"_id":"themes/minos/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1436494045000},{"_id":"themes/minos/layout/_partial/post/category.ejs","shasum":"28600328d5d2d68b547b59e7ed713cd315a138d8","modified":1436494045000},{"_id":"themes/minos/layout/_partial/post/nav.ejs","shasum":"573863e2d6a9d637fff4a8e3b2a4cacb65565499","modified":1436494045000},{"_id":"themes/minos/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1436494045000},{"_id":"themes/minos/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1436494045000},{"_id":"themes/minos/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1436494045000},{"_id":"themes/minos/layout/archive.ejs","shasum":"4479c33517aa70f2714ee820775ff8307a0dd115","modified":1436494045000},{"_id":"themes/minos/layout/categories.ejs","shasum":"c40b133eb9b8612a2286a83b8d7d2ca344673507","modified":1436494045000},{"_id":"themes/minos/layout/index.ejs","shasum":"505555df272ac4dd23e5eae3acb857a457e421b4","modified":1436494045000},{"_id":"themes/minos/layout/category.ejs","shasum":"cd17981f9cac718731880148cb17de60d148a75c","modified":1436494045000},{"_id":"themes/minos/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1436494045000},{"_id":"themes/minos/layout/layout.ejs","shasum":"03c85682322dce721f6a90aa0f0b5d2ed6622a35","modified":1436494045000},{"_id":"themes/minos/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1436494045000},{"_id":"themes/minos/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1436494046000},{"_id":"themes/minos/layout/tags.ejs","shasum":"cf485e9053f96d69a1e0ce0f8a55c3aa33ebde03","modified":1436494045000},{"_id":"themes/minos/layout/tag.ejs","shasum":"bcde8c7ce7e21683ca2cba7fcc21ac43c817a9a4","modified":1436494045000},{"_id":"themes/minos/package.json","shasum":"6b4e8276c212f5a617dc558548f5b3d1ae0fb1f2","modified":1436494046000},{"_id":"themes/minos/source/css/_extend.styl","shasum":"d31b1c9980353af3c1607ee6caf84835b7322eea","modified":1436494046000},{"_id":"themes/minos/source/css/_partial/archive.styl","shasum":"f75e3da863fccfebafcae2e76ea6732a927b79f4","modified":1436494046000},{"_id":"themes/minos/source/css/_partial/article.styl","shasum":"9ba80c0d9a1c3a266a3a0fc43a77b0f9fa6450e4","modified":1436494046000},{"_id":"themes/minos/source/css/_partial/comment.styl","shasum":"06fc75428036bd8277a6d3dea4b636a0dac91154","modified":1436494046000},{"_id":"themes/minos/source/css/_partial/custom-layout.styl","shasum":"8d922662464bda0ac0b639c40fda2ee196bef5b5","modified":1436494046000},{"_id":"themes/minos/source/css/_partial/fancybox.styl","shasum":"46a40e2749e68db0348db2938429fe4ce0f4724e","modified":1436494046000},{"_id":"themes/minos/source/css/_partial/footer.styl","shasum":"e4e9b6da90a2620f7905b7283e52322bb83d2fdb","modified":1436494046000},{"_id":"themes/minos/source/css/_partial/header.styl","shasum":"d0d7a2019c93ae77f21d1379fec9f921cb605da6","modified":1436494046000},{"_id":"themes/minos/source/css/_partial/highlight.styl","shasum":"3fb9265868e4cebeaffa155d8825e90311eb3744","modified":1436494046000},{"_id":"themes/minos/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1436494046000},{"_id":"themes/minos/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1436494046000},{"_id":"themes/minos/source/css/_variables.styl","shasum":"0c52e96f839f8c82a82a600790603b07c9b94fca","modified":1436494046000},{"_id":"themes/minos/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1436494046000},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1436494046000},{"_id":"themes/minos/source/css/images/logo.png","shasum":"4e012d9ba58cb8f87ee775262ef871c158ac5948","modified":1436494046000},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1436494046000},{"_id":"themes/minos/source/css/style.styl","shasum":"6793062670c69b331e786cfb19d5473f82d7d51c","modified":1436494046000},{"_id":"themes/minos/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1436494046000},{"_id":"themes/minos/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1436494046000},{"_id":"themes/minos/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1436494046000},{"_id":"themes/minos/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1436494046000},{"_id":"themes/minos/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1436494046000},{"_id":"themes/minos/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1436494046000},{"_id":"themes/minos/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1436494046000},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1436494046000},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1436494046000},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1436494046000},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1436494046000},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1436494046000},{"_id":"themes/minos/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1436494046000},{"_id":"themes/minos/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1436494046000},{"_id":"themes/minos/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1436494046000},{"_id":"themes/minos/source/js/script.js","shasum":"631cc4a69bc1f7903a24544b79b8e6ea68be9243","modified":1436494046000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/3Nwg9VzlwLXPq3fNKwVRMCEAvth_LlrfE80CYdSH47w.woff2","shasum":"703369bb4159f050b38ecc4f52cfadb8e5760775","modified":1436494046000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/03aPdn7fFF3H6ngCgAlQzPk_vArhqVIZ0nv9q090hN8.woff2","shasum":"fa8cc541ddc3da23a5a90b08e64e4c12944c56a1","modified":1436494046000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/5hX15RUpPERmeybVlLQEWBTbgVql8nDJpwnrE27mub0.woff2","shasum":"0c79a0581c3472e6bb29082092ea37d897370473","modified":1436494046000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/CPRt--GVMETgA6YEaoGitxTbgVql8nDJpwnrE27mub0.woff2","shasum":"4da92f4f265caa786469ec415cfa6515d2997943","modified":1436494046000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/I-OtoJZa3TeyH6D9oli3ifesZW2xOQ-xsNqO47m55DA.woff2","shasum":"36225cd511b12ed61f3e3fbad53773119e9dd73e","modified":1436494046000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/O_WhD9hODL16N4KLHLX7xSEAvth_LlrfE80CYdSH47w.woff2","shasum":"950d5547dc10d4a1bdb837439fcfc6c68bbe1b02","modified":1436494046000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpCYE0-AqJ3nfInTTiDXDjU4.woff2","shasum":"5984003d117f49ae596bde0498310ed215ac3aba","modified":1436494046000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDTOQ_MqJVwkKsUn0wKzc2I.woff2","shasum":"b64d3a0d20efa14e6063070eb30fbdb594bde59c","modified":1436494046000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDUj_cnvWIuuBMVgbX098Mw.woff2","shasum":"6f1e434623e2fa20ba8972a6f97dd9c800b56168","modified":1436494046000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/b31S45a_TNgaBApZhTgE6CEAvth_LlrfE80CYdSH47w.woff2","shasum":"0b4aef50c2979164681fa6dfe2c1d6bd6be6bcd3","modified":1436494046000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpI4P5ICox8Kq3LLUNMylGO4.woff2","shasum":"df9999766ca9ffe9428b139931352cd821526aed","modified":1436494046000},{"_id":"themes/minos/source/webfonts/ptserif/main.css","shasum":"ec6a269189b9a8b807fb4e1de6ffd7acc6a7fea8","modified":1436494046000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/fU0HAfLiPHGlZhZpY6M7dBTbgVql8nDJpwnrE27mub0.woff2","shasum":"3f425d6aee0c07774a10d82dcb742e32b067f217","modified":1436494046000},{"_id":"themes/minos/source/webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","shasum":"942addaec4d3a60af33947a84a3d85f926015947","modified":1436494046000},{"_id":"themes/minos/source/webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","shasum":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1436494046000},{"_id":"themes/minos/source/webfonts/source-code-pro/main.css","shasum":"e6a0204ff3c501d6248d96e55aa20d0b42b45a79","modified":1436494046000},{"_id":"source/images/Gamification_04.png","shasum":"fc98fc340cf8332c2f2fbc1e02c21bafccabb487","modified":1499643193000,"hash":"fc98fc340cf8332c2f2fbc1e02c21bafccabb487"},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1436494046000},{"_id":"source/images/Gamification_05-1.png","shasum":"fc98fc340cf8332c2f2fbc1e02c21bafccabb487","modified":1499643193000,"hash":"fc98fc340cf8332c2f2fbc1e02c21bafccabb487"},{"_id":"themes/minos/source/js/jquery.min.js","shasum":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1436494046000},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1436494046000},{"_id":"source/images/cover.png","shasum":"c25b41aeeba67e96b27b2b7cf43821b2c6d7800d","modified":1499643193000,"hash":"c25b41aeeba67e96b27b2b7cf43821b2c6d7800d"},{"_id":"source/images/QA_capability.jpg","shasum":"df11748bdd02af3cc70533e282520db2b6a8f8bf","modified":1499643193000,"hash":"df11748bdd02af3cc70533e282520db2b6a8f8bf"},{"_id":"source/documents/KIF.zip","shasum":"b55fe24d9b625a3ff980867f4126193e26a51b19","modified":1499643192000,"hash":"b55fe24d9b625a3ff980867f4126193e26a51b19"},{"_id":"source/documents/HelloWorld_Frank.zip","shasum":"391c5a52e9163d83c686a6525a71762e580e0b87","modified":1499643192000,"hash":"391c5a52e9163d83c686a6525a71762e580e0b87"},{"_id":"source/documents/Robotium.zip","shasum":"fbdd8b728de69540377c7f0f83daaa2163b482ba","modified":1499643192000,"hash":"fbdd8b728de69540377c7f0f83daaa2163b482ba"},{"_id":"source/documents/NativeDriverAndroidTests.zip","shasum":"b28eec4719a45a62aafdfc627c3a1d8ae7e2ba1a","modified":1499643192000,"hash":"b28eec4719a45a62aafdfc627c3a1d8ae7e2ba1a"},{"_id":"source/documents/Automation_For_Web_Service-soapui.pdf","shasum":"663a0cd42331ac4cca2f332d7cb5907ef999e52b","modified":1499643192000,"hash":"663a0cd42331ac4cca2f332d7cb5907ef999e52b"},{"_id":"source/documents/Robotium_Black_Box_Testing_For_Android_Chinese.pdf","shasum":"882bbf2ccbac2d8749b35774b737349564c27fd8","modified":1499643192000,"hash":"882bbf2ccbac2d8749b35774b737349564c27fd8"},{"_id":"source/documents/Pro_Mobile_App_Testing_With_22_Rules.pdf","shasum":"7a37ebafbdeaf8fb2dbbdea32a8c00335d0ef509","modified":1499643192000,"hash":"7a37ebafbdeaf8fb2dbbdea32a8c00335d0ef509"},{"_id":"source/documents/NativeDriverIOSTests.zip","shasum":"52e5ba0553f82fd76a4a52d8af0d313e736893a6","modified":1499643192000,"hash":"52e5ba0553f82fd76a4a52d8af0d313e736893a6"},{"_id":"public/webfonts/source-code-pro/main.css","modified":1453967328338,"shasum":"e6a0204ff3c501d6248d96e55aa20d0b42b45a79"},{"_id":"public/webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":1453967328343,"shasum":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310"},{"_id":"public/webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":1453967328346,"shasum":"942addaec4d3a60af33947a84a3d85f926015947"},{"_id":"public/webfonts/ptserif/main.css","modified":1453967328347,"shasum":"ec6a269189b9a8b807fb4e1de6ffd7acc6a7fea8"},{"_id":"public/webfonts/ptserif/fonts/fU0HAfLiPHGlZhZpY6M7dBTbgVql8nDJpwnrE27mub0.woff2","modified":1453967328348,"shasum":"3f425d6aee0c07774a10d82dcb742e32b067f217"},{"_id":"public/webfonts/ptserif/fonts/b31S45a_TNgaBApZhTgE6CEAvth_LlrfE80CYdSH47w.woff2","modified":1453967328349,"shasum":"0b4aef50c2979164681fa6dfe2c1d6bd6be6bcd3"},{"_id":"public/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpI4P5ICox8Kq3LLUNMylGO4.woff2","modified":1453967328351,"shasum":"df9999766ca9ffe9428b139931352cd821526aed"},{"_id":"public/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDUj_cnvWIuuBMVgbX098Mw.woff2","modified":1453967328352,"shasum":"6f1e434623e2fa20ba8972a6f97dd9c800b56168"},{"_id":"public/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":1453967328353,"shasum":"b64d3a0d20efa14e6063070eb30fbdb594bde59c"},{"_id":"public/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpCYE0-AqJ3nfInTTiDXDjU4.woff2","modified":1453967328354,"shasum":"5984003d117f49ae596bde0498310ed215ac3aba"},{"_id":"public/webfonts/ptserif/fonts/O_WhD9hODL16N4KLHLX7xSEAvth_LlrfE80CYdSH47w.woff2","modified":1453967328356,"shasum":"950d5547dc10d4a1bdb837439fcfc6c68bbe1b02"},{"_id":"public/webfonts/ptserif/fonts/I-OtoJZa3TeyH6D9oli3ifesZW2xOQ-xsNqO47m55DA.woff2","modified":1453967328357,"shasum":"36225cd511b12ed61f3e3fbad53773119e9dd73e"},{"_id":"public/webfonts/ptserif/fonts/CPRt--GVMETgA6YEaoGitxTbgVql8nDJpwnrE27mub0.woff2","modified":1453967328359,"shasum":"4da92f4f265caa786469ec415cfa6515d2997943"},{"_id":"public/webfonts/ptserif/fonts/5hX15RUpPERmeybVlLQEWBTbgVql8nDJpwnrE27mub0.woff2","modified":1453967328360,"shasum":"0c79a0581c3472e6bb29082092ea37d897370473"},{"_id":"public/webfonts/ptserif/fonts/3Nwg9VzlwLXPq3fNKwVRMCEAvth_LlrfE80CYdSH47w.woff2","modified":1453967328361,"shasum":"703369bb4159f050b38ecc4f52cfadb8e5760775"},{"_id":"public/webfonts/ptserif/fonts/03aPdn7fFF3H6ngCgAlQzPk_vArhqVIZ0nv9q090hN8.woff2","modified":1453967328362,"shasum":"fa8cc541ddc3da23a5a90b08e64e4c12944c56a1"},{"_id":"public/js/script.js","modified":1453967328363,"shasum":"631cc4a69bc1f7903a24544b79b8e6ea68be9243"},{"_id":"public/js/jquery.min.js","modified":1453967328364,"shasum":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1453967328365,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1453967328366,"shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1453967328367,"shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1453967328368,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1453967328368,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1453967328369,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1453967328370,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1453967328372,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1453967328373,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1453967328375,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1453967328376,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1453967328378,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1453967328380,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1453967328381,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1453967328382,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1453967328798,"shasum":"f4004ef50c06482e46207581f7f6f393331142aa"},{"_id":"public/css/images/logo.png","modified":1453967328863,"shasum":"4e012d9ba58cb8f87ee775262ef871c158ac5948"},{"_id":"public/css/fonts/fontawesome-webfont.woff","modified":1453967328865,"shasum":"04c3bf56d87a0828935bd6b4aee859995f321693"},{"_id":"public/css/fonts/fontawesome-webfont.ttf","modified":1453967328866,"shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f"},{"_id":"public/css/fonts/fontawesome-webfont.svg","modified":1453967328869,"shasum":"46fcc0194d75a0ddac0a038aee41b23456784814"},{"_id":"public/css/fonts/fontawesome-webfont.eot","modified":1453967328871,"shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e"},{"_id":"public/css/fonts/FontAwesome.otf","modified":1453967328873,"shasum":"b5b4f9be85f91f10799e87a083da1d050f842734"},{"_id":"public/images/test_case_in_mindmap.png","hash":"151b9e217e2045de084b166856dd6457ef30cc70","modified":1499647034232},{"_id":"public/images/cover.png","hash":"c25b41aeeba67e96b27b2b7cf43821b2c6d7800d","modified":1499647034210},{"_id":"public/images/avatar.png","hash":"75d072df938ca3047b1b419c96548c54e2c40180","modified":1499647034167},{"_id":"public/images/User_Testing.png","hash":"6fa0345be57611ef896b6aa8f6c15ebf5e879b52","modified":1499647034259},{"_id":"public/images/QA_capability_Release.png","hash":"6a632256bb1d2bb563ebc499d550218517d244b6","modified":1499647034232},{"_id":"public/images/QA_capability_Iteration.png","hash":"2f5652d24e38b7b84bbd4e3371cf2872aaa59283","modified":1499647034252},{"_id":"public/images/QA_capability.jpg","hash":"df11748bdd02af3cc70533e282520db2b6a8f8bf","modified":1499647034331},{"_id":"public/images/QA_Capability_Matrix.png","hash":"8b4b879f7ba6dadbf82ed6582634dca3826e3731","modified":1499647034252},{"_id":"public/images/Gamification_07-3.png","hash":"67271c6a9e17d160a8e02ca05e50ab4756a2ac5b","modified":1499647034232},{"_id":"public/images/Gamification_07-2.png","hash":"ca57c9298f7a75777abb08cd5e135158ab2115af","modified":1499647034210},{"_id":"public/images/Gamification_07-1.jpg","hash":"566f6a2ae80108ab34649ed77eb32b040a8c10a2","modified":1499647034167},{"_id":"public/images/Gamification_06.png","hash":"c2dfed207c6f4563f101f55025cdb467ecc58056","modified":1499647034167},{"_id":"public/images/Gamification_05-2.jpg","hash":"60a8855d8158d9637fe0604ba389c3d70fd6f547","modified":1499647034167},{"_id":"public/images/Gamification_05-1.png","hash":"fc98fc340cf8332c2f2fbc1e02c21bafccabb487","modified":1499647034279},{"_id":"public/images/Gamification_04.png","hash":"fc98fc340cf8332c2f2fbc1e02c21bafccabb487","modified":1499647034279},{"_id":"public/images/Gamification_03-4.png","hash":"70adad759729ecceed5158bd79f2ad20ffcb5d27","modified":1499647034191},{"_id":"public/images/Gamification_03-3.jpg","hash":"23973d222becd6a6ebaa293b88eacd4ed39c9927","modified":1499647034168},{"_id":"public/images/Gamification_03-2.png","hash":"66f96ed73719ad8ce02179019cd39b8bfffea918","modified":1499647034168},{"_id":"public/images/Gamification_03-1.png","hash":"3e94296b33391d53783ea277fae1d683bc6ab28a","modified":1499647034168},{"_id":"public/images/Gamification_02.png","hash":"c3686cf37c6957c72b5791e64fe9c0ea84bd62d4","modified":1499647034232},{"_id":"public/images/Gamification_01.png","hash":"8efd6cf2c9e6dedd4da03c3dee10b67ecd7c09c2","modified":1499647034168},{"_id":"public/images/Bug_Series_1.1.png","hash":"74ab3e54d363e062d7f342d40cbf8cada15c9141","modified":1499647034168},{"_id":"public/documents/WP7App.zip","hash":"fd8e4e7657de81e86d5f688f888288a194b1056c","modified":1499647034210},{"_id":"public/documents/UIAutomation.zip","hash":"d01878e978acd7a26b57c9a3a4107170b7ce3fd5","modified":1499647034191},{"_id":"public/documents/Test_Plan_For_I37_To_I39.pdf","hash":"f8d46743251a9c43f548af7d668f8bb9ccc6bc65","modified":1499647034168},{"_id":"public/documents/Speaking_Skills.pdf","hash":"a6a034e0331c78b269bbfe1ea87d89db8c676ab6","modified":1499647034191},{"_id":"public/documents/Security_Testing_Of_Web_Applications.pdf","hash":"59dc80adc6878c6b4ba3454d043f50557477757e","modified":1499647034210},{"_id":"public/documents/Robotium_Black_Box_Testing_For_Android_Chinese.pdf","hash":"882bbf2ccbac2d8749b35774b737349564c27fd8","modified":1499647034571},{"_id":"public/documents/Robotium.zip","hash":"fbdd8b728de69540377c7f0f83daaa2163b482ba","modified":1499647034359},{"_id":"public/documents/QA_capability_matrix.xlsx","hash":"f084737195a1e998778473a433e46dc0a4fc7ddf","modified":1499647034168},{"_id":"public/documents/Pro_Mobile_App_Testing_With_22_Rules_references.pdf","hash":"68cc979369ab358fb5fd12f8d77faf1f26f140ee","modified":1499647034191},{"_id":"public/documents/Pro_Mobile_App_Testing_With_22_Rules.pdf","hash":"7a37ebafbdeaf8fb2dbbdea32a8c00335d0ef509","modified":1499647034700},{"_id":"public/documents/PageName_FeatureName_StoryID.mm","hash":"95a4989caae4157cc03aea3e312b7cb3beee1ccb","modified":1499647034168},{"_id":"public/documents/NativeDriverIOSTests.zip","hash":"52e5ba0553f82fd76a4a52d8af0d313e736893a6","modified":1499647034759},{"_id":"public/documents/NativeDriverAndroidTests.zip","hash":"b28eec4719a45a62aafdfc627c3a1d8ae7e2ba1a","modified":1499647034439},{"_id":"public/documents/KIF.zip","hash":"b55fe24d9b625a3ff980867f4126193e26a51b19","modified":1499647034342},{"_id":"public/documents/HelloWorld_Frank.zip","hash":"391c5a52e9163d83c686a6525a71762e580e0b87","modified":1499647034354},{"_id":"public/documents/Automation_For_Web_Service-soapui.pdf","hash":"663a0cd42331ac4cca2f332d7cb5907ef999e52b","modified":1499647034557},{"_id":"public/documents/Agile_Test_Plan.pdf","hash":"cfa7c17bb0e41dc15208667546b770bb1c61da7c","modified":1499647034168},{"_id":"public/AboutMe.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034074},{"_id":"public/tags/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034074},{"_id":"public/categories/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034075},{"_id":"public/2016/01/28/How_To_Publish_A_Technical_Book/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034077},{"_id":"public/2015/07/14/Book_References/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034077},{"_id":"public/2015/06/10/Speaking_Skills/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034077},{"_id":"public/2014/09/28/Mobile_App_Testing_With_22_Rules/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034077},{"_id":"public/2014/06/19/Practice_Of_Gamification_In_Insurance_Project/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034077},{"_id":"public/2013/12/27/No_QA_In_Agile/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034078},{"_id":"public/2013/01/28/UserTesting_In_Project/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034078},{"_id":"public/2012/12/03/Practice_QA_Capability_In_Project/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034078},{"_id":"public/2012/06/29/How_Google_Test_Software/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034078},{"_id":"public/2012/05/18/Windows_Phone_Automation_Windows_Phone_Test_Framework/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034078},{"_id":"public/2012/05/18/Android_Automation_Robotium/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034078},{"_id":"public/2012/05/14/iOS_Automation_Frank/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034078},{"_id":"public/2012/05/09/Android_Automation_NativeDriver/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034078},{"_id":"public/2012/05/08/iOS_Automation_NativeDriver/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034078},{"_id":"public/2012/04/26/iOS_Automation_KIF_Keep_It_Functional/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034078},{"_id":"public/2012/04/26/iOS_Automation_UIAutomation/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034078},{"_id":"public/2012/04/23/Write_Test_Case_Use_Mind_Map/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034079},{"_id":"public/2012/04/18/Exploratory_Testing_For_Android/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034080},{"_id":"public/2012/02/21/Security_Testing_Of_Web_Applications/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034080},{"_id":"public/2012/02/03/QA_Capability_Matrix/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034080},{"_id":"public/2011/09/29/Practices_Can_Be_Adopted_In_Projects/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034080},{"_id":"public/2011/09/07/Agile_Test_Plan/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034080},{"_id":"public/2011/08/31/Game_The_Marshmallow_Challenge/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034080},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034080},{"_id":"public/archives/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034080},{"_id":"public/archives/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034080},{"_id":"public/archives/2011/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034080},{"_id":"public/archives/2011/08/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034080},{"_id":"public/archives/2011/09/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034080},{"_id":"public/archives/2012/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034080},{"_id":"public/archives/2012/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034080},{"_id":"public/archives/2012/02/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034080},{"_id":"public/archives/2012/04/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034080},{"_id":"public/archives/2012/05/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/archives/2012/06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/archives/2012/12/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/archives/2013/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/archives/2013/01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/archives/2013/12/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/archives/2014/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/archives/2014/06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/archives/2014/09/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/archives/2015/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/archives/2015/06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/archives/2015/07/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/archives/2016/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/archives/2016/01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/categories/Testing/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/categories/Test/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/categories/Test/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/categories/Tester/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/categories/Test/Tester/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/Mobile/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/iOS/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/Automation/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/Framework/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/UIAutomation/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/NativeDriver/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/Frank/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/Mind-Map/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/Test-Case/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/Acceptance-Criteria/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/AC/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/Windows-Phone/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/WindowsPhoneTestFramework/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/User-Testing/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/Practice/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/Speaking/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/Skills/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/Security/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/Web/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/Capability/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/Matrix/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/Retro/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/Gamification/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/Agile/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/QA/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/No-QA/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/Replace/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/App-Testing/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/Rules/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/Book/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/Publish/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/Google/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/Methodology/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/Theory/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/Game/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/Marshmallow-Challenge/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/Android/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/Exploratory-Testing/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/Robotium/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/Test-Plan/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"source/_posts/Business_Travel.md","shasum":"3da6f93eec146c945269ce1d1cd168d9d00be900","modified":1499643192000,"hash":"3da6f93eec146c945269ce1d1cd168d9d00be900"},{"_id":"public/2015/12/30/Business_Travel/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034077},{"_id":"public/archives/2015/12/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"public/tags/Business-Travel/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/Tips/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/2016/01/27/Bug_Series_Theory_And_Reality/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034077},{"_id":"public/2016/01/27/Bug_Series_Secutiry_In_All_Perspects/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034077},{"_id":"public/tags/Bug/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034083},{"_id":"public/tags/Series/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034084},{"_id":"public/tags/Bug集锦/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034084},{"_id":"public/2013/01/28/User_Testing/index.html","modified":1455683318338,"shasum":"f67dbb51becb40c7298b9112cc8537c34e8421c1"},{"_id":"public/tags/用户测试/index.html","modified":1455683318608,"shasum":"8260dbefe7048758daae52c56f84d162aa3109a3"},{"_id":"source/_posts/Bug_Series_Secutiry_In_All_Perspects.md","shasum":"8a929dddab785d81517a2fe2e78ff65763fb0679","modified":1499643192000,"hash":"8a929dddab785d81517a2fe2e78ff65763fb0679"},{"_id":"source/_posts/Bug_Series_Theory_And_Reality.md","shasum":"ce713fd8d39f3f73cc0417c0b2871f492b81045f","modified":1499643192000,"hash":"ce713fd8d39f3f73cc0417c0b2871f492b81045f"},{"_id":"source/images/Bug_Series_1.1.png","shasum":"74ab3e54d363e062d7f342d40cbf8cada15c9141","modified":1499643192000,"hash":"74ab3e54d363e062d7f342d40cbf8cada15c9141"},{"_id":"public/archives/page/4/index.html","modified":1462346737327,"shasum":"758406d1bd5d2e7f57e2b7b22fa8aaefdf2ad6c5"},{"_id":"public/archives/page/5/index.html","modified":1462346737333,"shasum":"0e3a17548222e0fe0f50d093056cf4984863846a"},{"_id":"public/archives/page/6/index.html","modified":1462346737336,"shasum":"52c2040f6221f5f43a5bec7904c3e7bf2e06ee83"},{"_id":"public/archives/2012/page/3/index.html","modified":1462346737358,"shasum":"2579403b2ae0ac49e149e6488bb6378bfa5cade0"},{"_id":"public/page/4/index.html","modified":1462346737441,"shasum":"7f6c77ae5b15b531aadfb7a1a4f23152d40ff2cf"},{"_id":"public/page/5/index.html","modified":1462346737450,"shasum":"ddc532d109090724ddedf0c9d63a1197938bfa47"},{"_id":"public/page/6/index.html","modified":1462346737455,"shasum":"fa7805be18592fcbe308ff52b36780f5d10afd6a"},{"_id":"public/tags/Mobile/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034082},{"_id":"public/tags/Automation/page/2/index.html","modified":1462346737482,"shasum":"bca324649bc601365fa28e0d7464f16aafab8a80"},{"_id":"public/tags/Framework/page/2/index.html","modified":1462346737490,"shasum":"e892119d2cda82445b88fccc6550e814faa16963"},{"_id":"public/tags/Practice/page/2/index.html","modified":1462346737518,"shasum":"6659ad4be71cd3aa4be83cea82e8c52bf2a4f025"},{"_id":"public/categories/Testing/page/2/index.html","modified":1462346737603,"shasum":"2b87d4ecd7f9b017e3eacb2a7ee0cda3e55f28fe"},{"_id":"public/categories/Test/page/3/index.html","modified":1462346737621,"shasum":"fa322e26c5e33245feea2b398569dc899957ed14"},{"_id":"source/images/ProMobileTestingWith22Rules.png","shasum":"191cfdad9a13a5e550f5bd621553e0edd80250dd","modified":1499643193000,"hash":"191cfdad9a13a5e550f5bd621553e0edd80250dd"},{"_id":"public/images/ProMobileTestingWith22Rules.png","hash":"191cfdad9a13a5e550f5bd621553e0edd80250dd","modified":1499647034324},{"_id":"source/_posts/Mobile_App_Testing_With_22_Rules_English.md","shasum":"551f23a30dd33d8e78b4a51496849bc78ee6b498","modified":1499643192000,"hash":"551f23a30dd33d8e78b4a51496849bc78ee6b498"},{"_id":"public/2016/05/13/Mobile_App_Testing_With_22_Rules_English/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034077},{"_id":"public/archives/2016/05/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"source/documents/22Rules_In_Mobile_App_Testing.pdf","shasum":"116d2914a1ebc20147705f1a04d5de05ae3a39fa","modified":1499643192000,"hash":"116d2914a1ebc20147705f1a04d5de05ae3a39fa"},{"_id":"public/documents/22Rules_In_Mobile_App_Testing.pdf","hash":"116d2914a1ebc20147705f1a04d5de05ae3a39fa","modified":1499647034431},{"_id":"source/_posts/Mobile_Cloud_Testing_Comparison.md","shasum":"e8bd0456560f5cae867cd1f1e80fd38c941def6a","modified":1499643192000,"hash":"e8bd0456560f5cae867cd1f1e80fd38c941def6a"},{"_id":"source/images/Mobile_Cloud_Testing_Domestic.png","shasum":"98f2adcc6c3a9e064c604bf569583f7bc3f152d9","modified":1499643193000,"hash":"98f2adcc6c3a9e064c604bf569583f7bc3f152d9"},{"_id":"source/images/Mobile_Cloud_Testing_Forgien.png","shasum":"f3e79a27f3f130d03130a6ae640bde1ebf8b0871","modified":1499643193000,"hash":"f3e79a27f3f130d03130a6ae640bde1ebf8b0871"},{"_id":"public/images/Mobile_Cloud_Testing_Forgien.png","hash":"f3e79a27f3f130d03130a6ae640bde1ebf8b0871","modified":1499647034232},{"_id":"public/images/Mobile_Cloud_Testing_Domestic.png","hash":"98f2adcc6c3a9e064c604bf569583f7bc3f152d9","modified":1499647034210},{"_id":"public/2016/05/18/Mobile_Cloud_Testing_Comparison/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034075},{"_id":"public/tags/Cloud-Testing/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034084},{"_id":"public/tags/Comparison/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034084},{"_id":"public/tags/Analysis/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034084},{"_id":"source/_posts/Domestic_Project_Manager.md","shasum":"2f2df6eda8165ca336ed496486c769f881e4d4dc","modified":1499643192000,"hash":"2f2df6eda8165ca336ed496486c769f881e4d4dc"},{"_id":"source/images/Proposal_Index.png","shasum":"3a60e2f5608622ee61a2b49284b6948e96650ddb","modified":1499643193000,"hash":"3a60e2f5608622ee61a2b49284b6948e96650ddb"},{"_id":"source/images/Story_Wall.jpg","shasum":"d509c3a22b3e81874c2d5ef00dfb4434e533be12","modified":1499643193000,"hash":"d509c3a22b3e81874c2d5ef00dfb4434e533be12"},{"_id":"source/images/Staffing_Plan.png","shasum":"7c1123c6bfca1126f8027740d38cc4a5f3677e2a","modified":1499643193000,"hash":"7c1123c6bfca1126f8027740d38cc4a5f3677e2a"},{"_id":"source/images/Wireframe.png","shasum":"e98ad803f7ec3f8e3f70f0beb9dee66886ba8ddf","modified":1499643193000,"hash":"e98ad803f7ec3f8e3f70f0beb9dee66886ba8ddf"},{"_id":"source/images/Architecture.png","shasum":"8dd3af62cb014fcf0c578cb4d83d5a5a12e35383","modified":1499643192000,"hash":"8dd3af62cb014fcf0c578cb4d83d5a5a12e35383"},{"_id":"source/images/Engagement_Summary.png","shasum":"06a6a60921fdc8814e077e13c5d865cb091546c7","modified":1499643192000,"hash":"06a6a60921fdc8814e077e13c5d865cb091546c7"},{"_id":"source/images/Prepare_For_Engagement.png","shasum":"59a7e4c88a33968280fe268408f6b340e26ac96b","modified":1499643193000,"hash":"59a7e4c88a33968280fe268408f6b340e26ac96b"},{"_id":"source/images/Architecture_Map.png","shasum":"b635ede873258ed1fa3de562b41504d1e9120305","modified":1499643192000,"hash":"b635ede873258ed1fa3de562b41504d1e9120305"},{"_id":"public/images/Wireframe.png","hash":"e98ad803f7ec3f8e3f70f0beb9dee66886ba8ddf","modified":1499647034233},{"_id":"public/images/Story_Wall.jpg","hash":"d509c3a22b3e81874c2d5ef00dfb4434e533be12","modified":1499647034191},{"_id":"public/images/Staffing_Plan.png","hash":"7c1123c6bfca1126f8027740d38cc4a5f3677e2a","modified":1499647034210},{"_id":"public/images/Proposal_Index.png","hash":"3a60e2f5608622ee61a2b49284b6948e96650ddb","modified":1499647034169},{"_id":"public/images/Prepare_For_Engagement.png","hash":"59a7e4c88a33968280fe268408f6b340e26ac96b","modified":1499647034608},{"_id":"public/images/Engagement_Summary.png","hash":"06a6a60921fdc8814e077e13c5d865cb091546c7","modified":1499647034581},{"_id":"public/images/Architecture_Map.png","hash":"b635ede873258ed1fa3de562b41504d1e9120305","modified":1499647034625},{"_id":"public/images/Architecture.png","hash":"8dd3af62cb014fcf0c578cb4d83d5a5a12e35383","modified":1499647034252},{"_id":"public/2016/06/06/Domestic_Project_Manager/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034075},{"_id":"public/tags/Delivery/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034084},{"_id":"public/tags/Domestic-Project/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034084},{"_id":"public/tags/Project-Management/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034084},{"_id":"public/archives/2016/06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647034081},{"_id":"source/.DS_Store","hash":"865c04d0c88fbe0a8774c438f452f08c20dcecc8","modified":1499647701000},{"_id":"source/documents/.DS_Store","hash":"7367c755980c2f4790a6398c872465af967b68fc","modified":1499646902000},{"_id":"source/documents/AndroidCalculator.sh","hash":"959920a165d6459c717629b4cbb3bf0b0635ada2","modified":1499149098000},{"_id":"source/documents/UIKitCatalog.sh","hash":"555737fb3ac10e3dd9d69c6a72a0046379bf043a","modified":1499327060000},{"_id":"source/documents/UIKitCatalog.app/Info.plist","hash":"37745c3050efdd63fe0b19a0bb3430a8811dfd7b","modified":1499135105000},{"_id":"source/documents/UIKitCatalog.app/Localizable.strings","hash":"db76188a94d46bc585048e257868e11285072c31","modified":1499131894000},{"_id":"source/documents/UIKitCatalog.app/PkgInfo","hash":"9f9eea0cfe2d65f2c3d6b092e375b40782d08f31","modified":1499135105000},{"_id":"source/documents/UIKitCatalog.app/LaunchScreen.storyboardc/01J-lp-oVM-view-Ze5-6b-2t3.nib","hash":"16278a91f06697f13f7d106c000e53aaeec2a7c2","modified":1499131898000},{"_id":"source/documents/UIKitCatalog.app/LaunchScreen.storyboardc/Info.plist","hash":"9f6b7c82c0e97c4e979211b7d69ec84094714f15","modified":1499131898000},{"_id":"source/documents/UIKitCatalog.app/LaunchScreen.storyboardc/UIViewController-01J-lp-oVM.nib","hash":"07a076bc5e1eba9d20de433b10c30e1b4224ec9c","modified":1499131898000},{"_id":"source/documents/UIKitCatalog.app/_CodeSignature/CodeResources","hash":"4d7ac2adf5aa67798218ee92d7dfdbc94054d9e5","modified":1499135106000},{"_id":"source/documents/UIKitCatalog.app/en.lproj/InfoPlist.strings","hash":"ce657a52a052a3aaf534ecfbf7cbdde4ee334c10","modified":1499131894000},{"_id":"source/documents/UIKitCatalog.app/Frameworks/libswiftCoreImage.dylib","hash":"4e19eda82eba7053cd5c875d192f16b15dadb1e0","modified":1499131907000},{"_id":"source/documents/UIKitCatalog.app/Frameworks/libswiftQuartzCore.dylib","hash":"4f05f3ea9b765ce675bb209cd59ec65088d9a13c","modified":1499131907000},{"_id":"source/documents/UIKitCatalog.app/Frameworks/libswiftObjectiveC.dylib","hash":"a1e05b5b853e5ef0fdfb983becf4234cdb725252","modified":1499131907000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/Info.plist","hash":"48ceb50ada5c3315112dadbdf7e37e52a5b45cee","modified":1499131900000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/Mhd-Bs-sIn-view-YVy-et-UAQ.nib","hash":"c6c748cb50d0c74f04086f9bbe20fc992b682573","modified":1499131900000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/SearchResultsViewControllerStoryboardIdentifier.nib","hash":"d41ec1ce67090e109041adb9492b8c39ae823ec0","modified":1499131900000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UINavigationController-6Ay-cF-67z.nib","hash":"6043b2f0a01e9c450be78974be879e03a8d493e7","modified":1499131900000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/Thx-B6-QkK-view-QvM-3S-GbD.nib","hash":"08df5cb129c634f00a26428eaa6563413aa72673","modified":1499131900000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UITableViewController-aRM-gX-SK9.nib","hash":"f08f7e1a80e0af92f7e790e8bdaf12758b7ce66f","modified":1499131900000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UITableViewController-fjx-Zc-6QZ.nib","hash":"19ee0ee6b1084a187034790c6f16818398a37120","modified":1499131900000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UITableViewController-yzs-dR-TMM.nib","hash":"7df427260e720c485ff2ca4deea5f2f8ddc05249","modified":1499131900000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UIViewController-Mhd-Bs-sIn.nib","hash":"e3c352b74cd534f031c498f77b8408df9b93fba4","modified":1499131900000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UIViewController-aTT-8g-UdL.nib","hash":"87fd47287183bb341c1885977b7191c40c75bbdb","modified":1499131900000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/aRM-gX-SK9-view-1PE-AW-QJq.nib","hash":"55078e5b84f562fd968f6d0930ff0defd7ac0547","modified":1499131900000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/aTT-8g-UdL-view-VZF-3b-rcm.nib","hash":"63dbc11509d3b5f745df2ab0dc4f52ff4b565fcc","modified":1499131900000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/fjx-Zc-6QZ-view-964-BZ-diD.nib","hash":"523ef42e545808b65a32a2db0d3758a08ab88f1b","modified":1499131900000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/v21-vF-FLh-view-d2N-kr-XWw.nib","hash":"d6cc1a3408966edfbed7260885e7fd3995bc48e2","modified":1499131900000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/yzs-dR-TMM-view-RmR-zN-t9e.nib","hash":"5507fd3abc5456516cce6c0d02e947a65f01a156","modified":1499131900000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/08q-TN-XKe-view-Txd-dj-VDv.nib","hash":"b3a6e73629676049d5c4f738cb4f9e8f1f2eedfb","modified":1499131903000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/7Xn-ho-KP8-view-LFl-gd-u3P.nib","hash":"a8d6df4b37aa79dba60528be7089fa92cb60ff48","modified":1499131903000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/CRN-u2-9ve-view-u45-Qw-Gig.nib","hash":"db77c122b351e92f52a348a0caa73d148d742f2a","modified":1499131902000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/DSJ-7r-oCY-view-dyj-uS-k8j.nib","hash":"1fc3d4b44b29636f31e64d38e9e0db0dabad1ea8","modified":1499131902000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/Eil-ie-nN6-view-fLQ-5f-tUh.nib","hash":"560ffbd503b14c4bcc41006ae2ff4cfa393011d4","modified":1499131905000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/F6w-By-RQf-view-jKA-KV-iQF.nib","hash":"5e7b0bd6e01be47f7c9aa4c04f8e4e71ad282bae","modified":1499131903000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/FlG-Up-yfw-view-TUr-qb-IUg.nib","hash":"51b3da6cf5b6857a42bf955ddc71b48a36a8a200","modified":1499131905000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/Info.plist","hash":"dd55e80308eff280c1b12afbb7c9da1000b337d5","modified":1499131906000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/K8w-Uq-R9J-view-Hwb-09-b4P.nib","hash":"3b5a6183f371748312a5d5e031f95474ad97e968","modified":1499131903000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/Ob2-pp-aCj-view-aQ3-9F-Tmi.nib","hash":"7d802aa9c396a3d98a91a3286f19e55f7086fabd","modified":1499131902000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/SVQ-IJ-reh-view-lDC-Xd-apf.nib","hash":"3217310f6aff0dce61278f8527fd966d43df9700","modified":1499131903000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-3hj-3A-Jeu.nib","hash":"234bd9eb4937db2f1b456bab368c11420da0a2c4","modified":1499131905000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-4VS-2r-7OB.nib","hash":"59551a153bab6cfe5af68074cd5847615adba227","modified":1499131905000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-JOI-11-xgr.nib","hash":"b3b9373224932483c8b357c7fc9e1ffb2d1c1321","modified":1499131906000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-MJ0-Ub-SBU.nib","hash":"476f25fd93cc523ff788cb1b316efdb472d33067","modified":1499131905000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-VO7-2f-x5T.nib","hash":"b80b1ada2b1877537d94b3be3fc24cdd5aea0f6a","modified":1499131906000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-av9-5l-681.nib","hash":"4994bb3bf2ba88193086a4e4b5a32770235edc66","modified":1499131905000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-b4J-Sc-TeP.nib","hash":"a97285aba922c68ccdff9f3fa9df01b71e030d47","modified":1499131906000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-fyN-ao-mNW.nib","hash":"fb2daa0090a03f17ab5ed71e68d97aa2a7bc9aef","modified":1499131905000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-jVo-88-dub.nib","hash":"e89d0411bc8e4c9bf1bfdbb60cf4c73a16a29788","modified":1499131905000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-kZ9-XK-Aa6.nib","hash":"c3e3bf13023054d0e5d18fdff651cc100fbaded7","modified":1499131906000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-mN2-KO-6A2.nib","hash":"1f9f7763f185677f960c7888c7f717a6b3b86fe6","modified":1499131905000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-PtF-vt-hJJ.nib","hash":"e6091b24957c46208294b897463088e6af4b864c","modified":1499131905000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-ob4-mD-tic.nib","hash":"504e452fcb6f1b35c36a415831402d445f0c11f5","modified":1499131906000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-qr8-uD-JZA.nib","hash":"4fa90e2c5277b1c7b198ab335bba4b8679435c6e","modified":1499131905000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-u6u-ko-s7H.nib","hash":"0c1ecd02eb203c1d7beff07c8d0e221ce9d62058","modified":1499131906000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-upa-p3-O3r.nib","hash":"17c664072787367fbb3867a81e56e28595dad884","modified":1499131905000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-z9a-R6-EDf.nib","hash":"7a8e6b1275936b3f122d4010d74e9b058c90f3c8","modified":1499131905000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UISplitViewController-H1p-Uh-vWS.nib","hash":"a783c9e2bcb2949b2a2289854e398e00e6c2f1d5","modified":1499131906000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UIViewController-CRN-u2-9ve.nib","hash":"411fdcbc003ee499c22e176ec203d24b8e7dab52","modified":1499131905000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UIViewController-F6w-By-RQf.nib","hash":"81b218ddab6b86692e336e4be43f82d4543ab751","modified":1499131906000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UIViewController-FlG-Up-yfw.nib","hash":"bc4f7b46133e1a2c653f2f08a933a034158adee7","modified":1499131906000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UIViewController-qCe-qZ-xUZ.nib","hash":"c407221b0e943bc10c74b0d2ba4695f6428716cd","modified":1499131905000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/Va4-Ge-jQn-view-iro-ev-0xV.nib","hash":"6c6bd08aea774373174d6bf42fa5e03cf9a91303","modified":1499131902000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/VeD-XY-hiR-view-uNJ-1h-kk4.nib","hash":"cfb0634e922d97e3a4fc5128db7031b3674f812d","modified":1499131902000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/XCI-A9-c2M-view-InE-1J-uPb.nib","hash":"859ed98f26bc8a4fe9176e7ffa7e87bbc3ba8785","modified":1499131902000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/ZSF-lM-gQa-view-1Df-6J-Q8v.nib","hash":"e365a6e6e7dc5f4d347fb15c461a02156ea413d6","modified":1499131902000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/aY0-FD-8DD-view-vxe-YC-yBi.nib","hash":"e7cda3862bcea9c20038db2f2bc917f05f210f3c","modified":1499131903000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/gl0-hM-EWg-view-gDs-OX-aHt.nib","hash":"052fc0452b436cc38d143f0bb4c7282f55dab832","modified":1499131905000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/hIc-I2-PiV-view-EB5-Ny-mbq.nib","hash":"28e2e22296da50ed754776fce6cd9ef09cde27b3","modified":1499131902000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/i9U-A8-mkf-view-cde-Ag-lVB.nib","hash":"6ca13a70ac1d6dfe6d50df17aae2eeeb74981538","modified":1499131905000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/laz-6N-ZhE-view-8xG-xW-Mvc.nib","hash":"3ce1f61a246e36844d44d32f90358fc694601aa9","modified":1499131903000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/pUP-b0-VMf-view-eAJ-am-dgQ.nib","hash":"12a500222b00aa3235cac7282263333d37425f96","modified":1499131903000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/riI-GT-RXv-view-1Bw-B1-fb8.nib","hash":"8df8e07b1cc30f51948a4d51bca89d5d3029a73b","modified":1499131902000},{"_id":"source/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/zcI-oN-J3j-view-4ER-nG-feZ.nib","hash":"6da320c76937dc44b5e582872212008da6d81c0b","modified":1499131902000},{"_id":"source/documents/UIKitCatalog.app/Frameworks/libswiftDarwin.dylib","hash":"c0bc57a189dfa829362155a915a9df580e0e9194","modified":1499131907000},{"_id":"source/documents/UIKitCatalog.app/Frameworks/libswiftUIKit.dylib","hash":"1c7cdf0258eed2e1415bb302c38ffaaba5a295ae","modified":1499131907000},{"_id":"source/documents/UIKitCatalog.app/Frameworks/libswiftCoreGraphics.dylib","hash":"15e893b27bdcf599392fbdd3ede908b9cdee4cca","modified":1499131907000},{"_id":"source/documents/UIKitCatalog.app/libswiftRemoteMirror.dylib","hash":"a7c316c9e645740bdf7a8e94d616ed914aae456b","modified":1494479161000},{"_id":"source/documents/UIKitCatalog.app/Frameworks/libswiftDispatch.dylib","hash":"eb70095a561c4f1eaf1d35cdcef2ba1c773d6b73","modified":1499131907000},{"_id":"source/documents/UIKitCatalog.app/UIKitCatalog","hash":"8bfb803019d2a51603b57e2129c1cac487de9abd","modified":1499135107000},{"_id":"source/documents/AndroidCalculator.apk","hash":"5e83b7d974019de57111c74bf49cdb71e6e723eb","modified":1336537452000},{"_id":"source/documents/UIKitCatalog.app/Frameworks/libswiftFoundation.dylib","hash":"f9d9e17031628a2b92d1b053b990244e9bdb5726","modified":1499131907000},{"_id":"source/documents/UIKitCatalog.app/Frameworks/libswiftCore.dylib","hash":"fa6b2ec9b12c3cf311d9c2da0b46c7e2d0a94960","modified":1499131907000},{"_id":"source/documents/UIKitCatalog.app/Assets.car","hash":"d9bea41f6cbd091f886050aab49913b2c1aa78d3","modified":1499135105000},{"_id":"public/documents/AndroidCalculator.sh","hash":"959920a165d6459c717629b4cbb3bf0b0635ada2","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.sh","hash":"555737fb3ac10e3dd9d69c6a72a0046379bf043a","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Info.plist","hash":"37745c3050efdd63fe0b19a0bb3430a8811dfd7b","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Localizable.strings","hash":"db76188a94d46bc585048e257868e11285072c31","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/PkgInfo","hash":"9f9eea0cfe2d65f2c3d6b092e375b40782d08f31","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/LaunchScreen.storyboardc/01J-lp-oVM-view-Ze5-6b-2t3.nib","hash":"16278a91f06697f13f7d106c000e53aaeec2a7c2","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/LaunchScreen.storyboardc/Info.plist","hash":"9f6b7c82c0e97c4e979211b7d69ec84094714f15","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/LaunchScreen.storyboardc/UIViewController-01J-lp-oVM.nib","hash":"07a076bc5e1eba9d20de433b10c30e1b4224ec9c","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/en.lproj/InfoPlist.strings","hash":"ce657a52a052a3aaf534ecfbf7cbdde4ee334c10","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/Info.plist","hash":"48ceb50ada5c3315112dadbdf7e37e52a5b45cee","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/Mhd-Bs-sIn-view-YVy-et-UAQ.nib","hash":"c6c748cb50d0c74f04086f9bbe20fc992b682573","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/SearchResultsViewControllerStoryboardIdentifier.nib","hash":"d41ec1ce67090e109041adb9492b8c39ae823ec0","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UINavigationController-6Ay-cF-67z.nib","hash":"6043b2f0a01e9c450be78974be879e03a8d493e7","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/Thx-B6-QkK-view-QvM-3S-GbD.nib","hash":"08df5cb129c634f00a26428eaa6563413aa72673","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UITableViewController-aRM-gX-SK9.nib","hash":"f08f7e1a80e0af92f7e790e8bdaf12758b7ce66f","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UITableViewController-fjx-Zc-6QZ.nib","hash":"19ee0ee6b1084a187034790c6f16818398a37120","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UITableViewController-yzs-dR-TMM.nib","hash":"7df427260e720c485ff2ca4deea5f2f8ddc05249","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UIViewController-Mhd-Bs-sIn.nib","hash":"e3c352b74cd534f031c498f77b8408df9b93fba4","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/UIViewController-aTT-8g-UdL.nib","hash":"87fd47287183bb341c1885977b7191c40c75bbdb","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/aRM-gX-SK9-view-1PE-AW-QJq.nib","hash":"55078e5b84f562fd968f6d0930ff0defd7ac0547","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/aTT-8g-UdL-view-VZF-3b-rcm.nib","hash":"63dbc11509d3b5f745df2ab0dc4f52ff4b565fcc","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/fjx-Zc-6QZ-view-964-BZ-diD.nib","hash":"523ef42e545808b65a32a2db0d3758a08ab88f1b","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/v21-vF-FLh-view-d2N-kr-XWw.nib","hash":"d6cc1a3408966edfbed7260885e7fd3995bc48e2","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Search.storyboardc/yzs-dR-TMM-view-RmR-zN-t9e.nib","hash":"5507fd3abc5456516cce6c0d02e947a65f01a156","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/08q-TN-XKe-view-Txd-dj-VDv.nib","hash":"b3a6e73629676049d5c4f738cb4f9e8f1f2eedfb","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/7Xn-ho-KP8-view-LFl-gd-u3P.nib","hash":"a8d6df4b37aa79dba60528be7089fa92cb60ff48","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/CRN-u2-9ve-view-u45-Qw-Gig.nib","hash":"db77c122b351e92f52a348a0caa73d148d742f2a","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/DSJ-7r-oCY-view-dyj-uS-k8j.nib","hash":"1fc3d4b44b29636f31e64d38e9e0db0dabad1ea8","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/Eil-ie-nN6-view-fLQ-5f-tUh.nib","hash":"560ffbd503b14c4bcc41006ae2ff4cfa393011d4","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/F6w-By-RQf-view-jKA-KV-iQF.nib","hash":"5e7b0bd6e01be47f7c9aa4c04f8e4e71ad282bae","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/FlG-Up-yfw-view-TUr-qb-IUg.nib","hash":"51b3da6cf5b6857a42bf955ddc71b48a36a8a200","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/Info.plist","hash":"dd55e80308eff280c1b12afbb7c9da1000b337d5","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/K8w-Uq-R9J-view-Hwb-09-b4P.nib","hash":"3b5a6183f371748312a5d5e031f95474ad97e968","modified":1499647034170},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/Ob2-pp-aCj-view-aQ3-9F-Tmi.nib","hash":"7d802aa9c396a3d98a91a3286f19e55f7086fabd","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/SVQ-IJ-reh-view-lDC-Xd-apf.nib","hash":"3217310f6aff0dce61278f8527fd966d43df9700","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-3hj-3A-Jeu.nib","hash":"234bd9eb4937db2f1b456bab368c11420da0a2c4","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-4VS-2r-7OB.nib","hash":"59551a153bab6cfe5af68074cd5847615adba227","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-JOI-11-xgr.nib","hash":"b3b9373224932483c8b357c7fc9e1ffb2d1c1321","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-MJ0-Ub-SBU.nib","hash":"476f25fd93cc523ff788cb1b316efdb472d33067","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-VO7-2f-x5T.nib","hash":"b80b1ada2b1877537d94b3be3fc24cdd5aea0f6a","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-av9-5l-681.nib","hash":"4994bb3bf2ba88193086a4e4b5a32770235edc66","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-b4J-Sc-TeP.nib","hash":"a97285aba922c68ccdff9f3fa9df01b71e030d47","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-fyN-ao-mNW.nib","hash":"fb2daa0090a03f17ab5ed71e68d97aa2a7bc9aef","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-jVo-88-dub.nib","hash":"e89d0411bc8e4c9bf1bfdbb60cf4c73a16a29788","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-kZ9-XK-Aa6.nib","hash":"c3e3bf13023054d0e5d18fdff651cc100fbaded7","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-mN2-KO-6A2.nib","hash":"1f9f7763f185677f960c7888c7f717a6b3b86fe6","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-PtF-vt-hJJ.nib","hash":"e6091b24957c46208294b897463088e6af4b864c","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-ob4-mD-tic.nib","hash":"504e452fcb6f1b35c36a415831402d445f0c11f5","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-qr8-uD-JZA.nib","hash":"4fa90e2c5277b1c7b198ab335bba4b8679435c6e","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-u6u-ko-s7H.nib","hash":"0c1ecd02eb203c1d7beff07c8d0e221ce9d62058","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-upa-p3-O3r.nib","hash":"17c664072787367fbb3867a81e56e28595dad884","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UINavigationController-z9a-R6-EDf.nib","hash":"7a8e6b1275936b3f122d4010d74e9b058c90f3c8","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UISplitViewController-H1p-Uh-vWS.nib","hash":"a783c9e2bcb2949b2a2289854e398e00e6c2f1d5","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UIViewController-CRN-u2-9ve.nib","hash":"411fdcbc003ee499c22e176ec203d24b8e7dab52","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UIViewController-F6w-By-RQf.nib","hash":"81b218ddab6b86692e336e4be43f82d4543ab751","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UIViewController-FlG-Up-yfw.nib","hash":"bc4f7b46133e1a2c653f2f08a933a034158adee7","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/UIViewController-qCe-qZ-xUZ.nib","hash":"c407221b0e943bc10c74b0d2ba4695f6428716cd","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/Va4-Ge-jQn-view-iro-ev-0xV.nib","hash":"6c6bd08aea774373174d6bf42fa5e03cf9a91303","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/VeD-XY-hiR-view-uNJ-1h-kk4.nib","hash":"cfb0634e922d97e3a4fc5128db7031b3674f812d","modified":1499647034171},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/XCI-A9-c2M-view-InE-1J-uPb.nib","hash":"859ed98f26bc8a4fe9176e7ffa7e87bbc3ba8785","modified":1499647034172},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/ZSF-lM-gQa-view-1Df-6J-Q8v.nib","hash":"e365a6e6e7dc5f4d347fb15c461a02156ea413d6","modified":1499647034172},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/aY0-FD-8DD-view-vxe-YC-yBi.nib","hash":"e7cda3862bcea9c20038db2f2bc917f05f210f3c","modified":1499647034172},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/gl0-hM-EWg-view-gDs-OX-aHt.nib","hash":"052fc0452b436cc38d143f0bb4c7282f55dab832","modified":1499647034172},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/hIc-I2-PiV-view-EB5-Ny-mbq.nib","hash":"28e2e22296da50ed754776fce6cd9ef09cde27b3","modified":1499647034172},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/i9U-A8-mkf-view-cde-Ag-lVB.nib","hash":"6ca13a70ac1d6dfe6d50df17aae2eeeb74981538","modified":1499647034172},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/laz-6N-ZhE-view-8xG-xW-Mvc.nib","hash":"3ce1f61a246e36844d44d32f90358fc694601aa9","modified":1499647034172},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/pUP-b0-VMf-view-eAJ-am-dgQ.nib","hash":"12a500222b00aa3235cac7282263333d37425f96","modified":1499647034172},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/riI-GT-RXv-view-1Bw-B1-fb8.nib","hash":"8df8e07b1cc30f51948a4d51bca89d5d3029a73b","modified":1499647034172},{"_id":"public/documents/UIKitCatalog.app/Base.lproj/Main.storyboardc/zcI-oN-J3j-view-4ER-nG-feZ.nib","hash":"6da320c76937dc44b5e582872212008da6d81c0b","modified":1499647034172},{"_id":"public/documents/UIKitCatalog.app/Frameworks/libswiftCoreImage.dylib","hash":"4e19eda82eba7053cd5c875d192f16b15dadb1e0","modified":1499647034191},{"_id":"public/documents/UIKitCatalog.app/Frameworks/libswiftQuartzCore.dylib","hash":"4f05f3ea9b765ce675bb209cd59ec65088d9a13c","modified":1499647034191},{"_id":"public/documents/UIKitCatalog.app/Frameworks/libswiftObjectiveC.dylib","hash":"a1e05b5b853e5ef0fdfb983becf4234cdb725252","modified":1499647034191},{"_id":"public/documents/UIKitCatalog.app/Frameworks/libswiftDarwin.dylib","hash":"c0bc57a189dfa829362155a915a9df580e0e9194","modified":1499647034210},{"_id":"public/documents/UIKitCatalog.app/Frameworks/libswiftUIKit.dylib","hash":"1c7cdf0258eed2e1415bb302c38ffaaba5a295ae","modified":1499647034221},{"_id":"public/documents/UIKitCatalog.app/Frameworks/libswiftCoreGraphics.dylib","hash":"15e893b27bdcf599392fbdd3ede908b9cdee4cca","modified":1499647034233},{"_id":"public/documents/UIKitCatalog.app/Frameworks/libswiftDispatch.dylib","hash":"eb70095a561c4f1eaf1d35cdcef2ba1c773d6b73","modified":1499647034280},{"_id":"public/documents/UIKitCatalog.app/libswiftRemoteMirror.dylib","hash":"a7c316c9e645740bdf7a8e94d616ed914aae456b","modified":1499647034289},{"_id":"public/documents/UIKitCatalog.app/UIKitCatalog","hash":"8bfb803019d2a51603b57e2129c1cac487de9abd","modified":1499647034310},{"_id":"public/documents/AndroidCalculator.apk","hash":"5e83b7d974019de57111c74bf49cdb71e6e723eb","modified":1499647034335},{"_id":"public/documents/UIKitCatalog.app/Frameworks/libswiftFoundation.dylib","hash":"f9d9e17031628a2b92d1b053b990244e9bdb5726","modified":1499647034411},{"_id":"public/documents/UIKitCatalog.app/Frameworks/libswiftCore.dylib","hash":"fa6b2ec9b12c3cf311d9c2da0b46c7e2d0a94960","modified":1499647034673},{"_id":"public/documents/UIKitCatalog.app/Assets.car","hash":"d9bea41f6cbd091f886050aab49913b2c1aa78d3","modified":1499647034734},{"_id":"source/_posts/Quick_Start_For_Appium_iOS_And_Android.md","hash":"792fddce4fd76d7e73f15ed4709224f271f8653d","modified":1499647809000},{"_id":"source/images/.DS_Store","hash":"eff78078bff7ada583d996233874b1cc595c1e83","modified":1499647537000},{"_id":"source/images/WebTestingBookCover.jpg","hash":"50c1b71bd056a8ea7988873b020c1f57ca479c42","modified":1499647679000},{"_id":"source/images/MobileTestingBookCover.png","hash":"c25b41aeeba67e96b27b2b7cf43821b2c6d7800d","modified":1499643193000},{"_id":"source/images/Bug_Big_Bang_In_Web_Testing.jpg","hash":"3214d8594098524d272d476a6f79fb5cbc601de6","modified":1499647266000},{"_id":"public/2017/07/10/Quick_Start_For_Appium_iOS_And_Android/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647824601},{"_id":"public/archives/2017/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647824601},{"_id":"public/archives/2017/07/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647824601},{"_id":"public/tags/Appium/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647824601},{"_id":"public/tags/Get-Start/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499647824601},{"_id":"public/images/WebTestingBookCover.jpg","hash":"50c1b71bd056a8ea7988873b020c1f57ca479c42","modified":1499647824602},{"_id":"public/images/MobileTestingBookCover.png","hash":"c25b41aeeba67e96b27b2b7cf43821b2c6d7800d","modified":1499647824603},{"_id":"public/images/Bug_Big_Bang_In_Web_Testing.jpg","hash":"3214d8594098524d272d476a6f79fb5cbc601de6","modified":1499647824611}],"Category":[{"name":"Testing","_id":"cijxylu4b0004y73nstb7oagp"},{"name":"Test","_id":"cijxylu4r0014y73n4u7zgcpa"},{"name":"Tester","_id":"cijxylu540026y73nxoiots6d"},{"name":"Tester","parent":"cijxylu4r0014y73n4u7zgcpa","_id":"cijxylu5m003fy73nabyeo8zo"}],"Data":[],"Page":[{"_content":"## Hello\n\n\nI am **HuangYong**, a Quality Analyst from China, who worked in software testing since 2006. Currently I am focusing on testing practices and frameworks of Mobile testing.\n\n![HuangYong's avatar](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/avatar.png)\n\n#### I have published one paper book about mobile app testing and another paper book about web testing:\n\n1. [**Pro Mobile App Testing With 22 Rules**](https://www.amazon.cn/dp/B011B2GP22)\n\n![Pro Mobile App Testing With 22 Rules](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/MobileTestingBookCover.png)\n\n2. [**Bug Big Bang in Web Testing**](https://www.amazon.cn/dp/B071GYCWHP)\n\n![Pro Mobile App Testing With 22 Rules](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/WebTestingBookCover.png)\n\n#### I have published 2 handbooks on Github:\n\n1. [*Handbook of appium*](http://hy1984427.github.io/appium/)\n\n2. [*Handbook of BDD with PageObject*](http://hy1984427.github.io/BDD-with-PageObject/)\n\n#### There are 3 videos of my speaking in [B'QConf (Better Quality Conference)](http://weibo.com/bqconf):\n\n1. [*Automation for WebService - SoapUI*](http://v.youku.com/v_show/id_XMjU3MzM4NjU2.html)\n\n\tPresentation can be found through [here](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/coduments/Automation_For_Web_Service-soapui.pdf).\n\n2. [*Blackbox automation for Android - Robotium*](http://v.youku.com/v_show/id_XMjU2NzEzNzY0.html)\n\n\tPresentation can be found through [here](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/coduments/Robotium_Black_Box_Testing_For_Android_Chinese.pdf).\n\n3. [*Pro Mobile App Testing With 22 Rules*](http://v.youku.com/v_show/id_XMTI1MzcxNzE5Ng.html)\n\n\tPresentation can be found through [here](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/coduments/Pro_Mobile_App_Testing_With_22_Rules.pdf).\n\n\nAnd I have also published an article about **Gamification in Insurance project** on InfoQ China: [*Practice of gamification in insurance project*](http://www.infoq.com/cn/articles/practice-of-gamification-in-insurance-project).\n\nFor more details, you can fine me on **LinkedIn**:[![www.linkedin.com/in/hy1984427](http://www.linkedin.com/img/webpromo/btn_viewmy_160x33.gif)](http://www.linkedin.com/in/hy1984427)\n\n#### Links:\n[Code and Life](http://icodeit.org/)\n[PHODAL](https://www.phodal.com/)\n[YangXuemin](http://xmyang.github.io/)\n[鹤音谷](http://lotuswlz.github.io/)\n","source":"AboutMe.md","raw":"## Hello\n\n\nI am **HuangYong**, a Quality Analyst from China, who worked in software testing since 2006. Currently I am focusing on testing practices and frameworks of Mobile testing.\n\n![HuangYong's avatar](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/avatar.png)\n\n#### I have published one paper book about mobile app testing and another paper book about web testing:\n\n1. [**Pro Mobile App Testing With 22 Rules**](https://www.amazon.cn/dp/B011B2GP22)\n\n![Pro Mobile App Testing With 22 Rules](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/MobileTestingBookCover.png)\n\n2. [**Bug Big Bang in Web Testing**](https://www.amazon.cn/dp/B071GYCWHP)\n\n![Pro Mobile App Testing With 22 Rules](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/WebTestingBookCover.png)\n\n#### I have published 2 handbooks on Github:\n\n1. [*Handbook of appium*](http://hy1984427.github.io/appium/)\n\n2. [*Handbook of BDD with PageObject*](http://hy1984427.github.io/BDD-with-PageObject/)\n\n#### There are 3 videos of my speaking in [B'QConf (Better Quality Conference)](http://weibo.com/bqconf):\n\n1. [*Automation for WebService - SoapUI*](http://v.youku.com/v_show/id_XMjU3MzM4NjU2.html)\n\n\tPresentation can be found through [here](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/coduments/Automation_For_Web_Service-soapui.pdf).\n\n2. [*Blackbox automation for Android - Robotium*](http://v.youku.com/v_show/id_XMjU2NzEzNzY0.html)\n\n\tPresentation can be found through [here](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/coduments/Robotium_Black_Box_Testing_For_Android_Chinese.pdf).\n\n3. [*Pro Mobile App Testing With 22 Rules*](http://v.youku.com/v_show/id_XMTI1MzcxNzE5Ng.html)\n\n\tPresentation can be found through [here](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/coduments/Pro_Mobile_App_Testing_With_22_Rules.pdf).\n\n\nAnd I have also published an article about **Gamification in Insurance project** on InfoQ China: [*Practice of gamification in insurance project*](http://www.infoq.com/cn/articles/practice-of-gamification-in-insurance-project).\n\nFor more details, you can fine me on **LinkedIn**:[![www.linkedin.com/in/hy1984427](http://www.linkedin.com/img/webpromo/btn_viewmy_160x33.gif)](http://www.linkedin.com/in/hy1984427)\n\n#### Links:\n[Code and Life](http://icodeit.org/)\n[PHODAL](https://www.phodal.com/)\n[YangXuemin](http://xmyang.github.io/)\n[鹤音谷](http://lotuswlz.github.io/)\n","date":"2017-07-10T00:45:25.000Z","updated":"2017-07-10T00:45:25.000Z","path":"AboutMe.html","_id":"cijxylu3s0000y73n7zi4jjol","title":"","comments":1,"layout":"page","content":"<h2 id=\"Hello\">Hello</h2><p>I am <strong>HuangYong</strong>, a Quality Analyst from China, who worked in software testing since 2006. Currently I am focusing on testing practices and frameworks of Mobile testing.</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/avatar.png\" alt=\"HuangYong&#39;s avatar\"></p>\n<h4 id=\"I_have_published_one_paper_book_about_mobile_app_testing_and_another_paper_book_about_web_testing:\">I have published one paper book about mobile app testing and another paper book about web testing:</h4><ol>\n<li><a href=\"https://www.amazon.cn/dp/B011B2GP22\" target=\"_blank\" rel=\"external\"><strong>Pro Mobile App Testing With 22 Rules</strong></a></li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/MobileTestingBookCover.png\" alt=\"Pro Mobile App Testing With 22 Rules\"></p>\n<ol>\n<li><a href=\"https://www.amazon.cn/dp/B071GYCWHP\" target=\"_blank\" rel=\"external\"><strong>Bug Big Bang in Web Testing</strong></a></li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/WebTestingBookCover.png\" alt=\"Pro Mobile App Testing With 22 Rules\"></p>\n<h4 id=\"I_have_published_2_handbooks_on_Github:\">I have published 2 handbooks on Github:</h4><ol>\n<li><p><a href=\"http://hy1984427.github.io/appium/\"><em>Handbook of appium</em></a></p>\n</li>\n<li><p><a href=\"http://hy1984427.github.io/BDD-with-PageObject/\"><em>Handbook of BDD with PageObject</em></a></p>\n</li>\n</ol>\n<h4 id=\"There_are_3_videos_of_my_speaking_in_B’QConf_(Better_Quality_Conference):\">There are 3 videos of my speaking in <a href=\"http://weibo.com/bqconf\" target=\"_blank\" rel=\"external\">B’QConf (Better Quality Conference)</a>:</h4><ol>\n<li><p><a href=\"http://v.youku.com/v_show/id_XMjU3MzM4NjU2.html\" target=\"_blank\" rel=\"external\"><em>Automation for WebService - SoapUI</em></a></p>\n<p> Presentation can be found through <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/coduments/Automation_For_Web_Service-soapui.pdf\" target=\"_blank\" rel=\"external\">here</a>.</p>\n</li>\n<li><p><a href=\"http://v.youku.com/v_show/id_XMjU2NzEzNzY0.html\" target=\"_blank\" rel=\"external\"><em>Blackbox automation for Android - Robotium</em></a></p>\n<p> Presentation can be found through <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/coduments/Robotium_Black_Box_Testing_For_Android_Chinese.pdf\" target=\"_blank\" rel=\"external\">here</a>.</p>\n</li>\n<li><p><a href=\"http://v.youku.com/v_show/id_XMTI1MzcxNzE5Ng.html\" target=\"_blank\" rel=\"external\"><em>Pro Mobile App Testing With 22 Rules</em></a></p>\n<p> Presentation can be found through <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/coduments/Pro_Mobile_App_Testing_With_22_Rules.pdf\" target=\"_blank\" rel=\"external\">here</a>.</p>\n</li>\n</ol>\n<p>And I have also published an article about <strong>Gamification in Insurance project</strong> on InfoQ China: <a href=\"http://www.infoq.com/cn/articles/practice-of-gamification-in-insurance-project\" target=\"_blank\" rel=\"external\"><em>Practice of gamification in insurance project</em></a>.</p>\n<p>For more details, you can fine me on <strong>LinkedIn</strong>:<a href=\"http://www.linkedin.com/in/hy1984427\" target=\"_blank\" rel=\"external\"><img src=\"http://www.linkedin.com/img/webpromo/btn_viewmy_160x33.gif\" alt=\"www.linkedin.com/in/hy1984427\"></a></p>\n<h4 id=\"Links:\">Links:</h4><p><a href=\"http://icodeit.org/\" target=\"_blank\" rel=\"external\">Code and Life</a><br><a href=\"https://www.phodal.com/\" target=\"_blank\" rel=\"external\">PHODAL</a><br><a href=\"http://xmyang.github.io/\" target=\"_blank\" rel=\"external\">YangXuemin</a><br><a href=\"http://lotuswlz.github.io/\" target=\"_blank\" rel=\"external\">鹤音谷</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Hello\">Hello</h2><p>I am <strong>HuangYong</strong>, a Quality Analyst from China, who worked in software testing since 2006. Currently I am focusing on testing practices and frameworks of Mobile testing.</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/avatar.png\" alt=\"HuangYong&#39;s avatar\"></p>\n<h4 id=\"I_have_published_one_paper_book_about_mobile_app_testing_and_another_paper_book_about_web_testing:\">I have published one paper book about mobile app testing and another paper book about web testing:</h4><ol>\n<li><a href=\"https://www.amazon.cn/dp/B011B2GP22\" target=\"_blank\" rel=\"external\"><strong>Pro Mobile App Testing With 22 Rules</strong></a></li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/MobileTestingBookCover.png\" alt=\"Pro Mobile App Testing With 22 Rules\"></p>\n<ol>\n<li><a href=\"https://www.amazon.cn/dp/B071GYCWHP\" target=\"_blank\" rel=\"external\"><strong>Bug Big Bang in Web Testing</strong></a></li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/WebTestingBookCover.png\" alt=\"Pro Mobile App Testing With 22 Rules\"></p>\n<h4 id=\"I_have_published_2_handbooks_on_Github:\">I have published 2 handbooks on Github:</h4><ol>\n<li><p><a href=\"http://hy1984427.github.io/appium/\"><em>Handbook of appium</em></a></p>\n</li>\n<li><p><a href=\"http://hy1984427.github.io/BDD-with-PageObject/\"><em>Handbook of BDD with PageObject</em></a></p>\n</li>\n</ol>\n<h4 id=\"There_are_3_videos_of_my_speaking_in_B’QConf_(Better_Quality_Conference):\">There are 3 videos of my speaking in <a href=\"http://weibo.com/bqconf\" target=\"_blank\" rel=\"external\">B’QConf (Better Quality Conference)</a>:</h4><ol>\n<li><p><a href=\"http://v.youku.com/v_show/id_XMjU3MzM4NjU2.html\" target=\"_blank\" rel=\"external\"><em>Automation for WebService - SoapUI</em></a></p>\n<p> Presentation can be found through <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/coduments/Automation_For_Web_Service-soapui.pdf\" target=\"_blank\" rel=\"external\">here</a>.</p>\n</li>\n<li><p><a href=\"http://v.youku.com/v_show/id_XMjU2NzEzNzY0.html\" target=\"_blank\" rel=\"external\"><em>Blackbox automation for Android - Robotium</em></a></p>\n<p> Presentation can be found through <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/coduments/Robotium_Black_Box_Testing_For_Android_Chinese.pdf\" target=\"_blank\" rel=\"external\">here</a>.</p>\n</li>\n<li><p><a href=\"http://v.youku.com/v_show/id_XMTI1MzcxNzE5Ng.html\" target=\"_blank\" rel=\"external\"><em>Pro Mobile App Testing With 22 Rules</em></a></p>\n<p> Presentation can be found through <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/coduments/Pro_Mobile_App_Testing_With_22_Rules.pdf\" target=\"_blank\" rel=\"external\">here</a>.</p>\n</li>\n</ol>\n<p>And I have also published an article about <strong>Gamification in Insurance project</strong> on InfoQ China: <a href=\"http://www.infoq.com/cn/articles/practice-of-gamification-in-insurance-project\" target=\"_blank\" rel=\"external\"><em>Practice of gamification in insurance project</em></a>.</p>\n<p>For more details, you can fine me on <strong>LinkedIn</strong>:<a href=\"http://www.linkedin.com/in/hy1984427\" target=\"_blank\" rel=\"external\"><img src=\"http://www.linkedin.com/img/webpromo/btn_viewmy_160x33.gif\" alt=\"www.linkedin.com/in/hy1984427\"></a></p>\n<h4 id=\"Links:\">Links:</h4><p><a href=\"http://icodeit.org/\" target=\"_blank\" rel=\"external\">Code and Life</a><br><a href=\"https://www.phodal.com/\" target=\"_blank\" rel=\"external\">PHODAL</a><br><a href=\"http://xmyang.github.io/\" target=\"_blank\" rel=\"external\">YangXuemin</a><br><a href=\"http://lotuswlz.github.io/\" target=\"_blank\" rel=\"external\">鹤音谷</a></p>\n"},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---\n","date":"2017-07-09T23:33:13.000Z","updated":"2017-07-09T23:33:13.000Z","path":"tags/index.html","_id":"cijxylu3v0001y73ng8hi2hng","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Categories","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"Categories\"\nlayout: \"categories\"\n---\n","date":"2017-07-09T23:33:12.000Z","updated":"2017-07-09T23:33:12.000Z","path":"categories/index.html","_id":"cijxylu430002y73n18f999y1","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"iOS Automation - UIAutomation","date":"2012-04-25T14:00:00.000Z","comments":1,"_content":"\n**This framework is not suggested!**\n\n**Some materials for iOS - UIAutomation framework:**\n1. [Working with UIAutomation](http://alexvollmer.com/posts/2010/07/03/working-with-uiautomation/)\n2. [UI Automation](http://www.sunsetlakesoftware.com/sites/default/files/Fall2010CourseNotes/ui%20automation.html)\n3. [UI Automation JavaScript Reference for iOS](https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Reference/UIAutomationRef/)\n4. [How Do I Perform UI Automation Testing in iOS 4](http://www.codeproject.com/Articles/107595/How-Do-I-Perform-UI-Automation-Testing-in-iOS-4)\n5. [iOS - UI Automation get textfield by accessibility label?](http://stackoverflow.com/questions/8306076/ios-ui-automation-get-textfield-by-accessibility-label)\n6. [iOS Automated Tests with UIAutomation](http://blog.manbolo.com/2012/04/08/ios-automated-tests-with-uiautomation)\n7. [Can't get value of UIAStaticText?](http://stackoverflow.com/questions/7688311/cant-get-value-of-uiastatictext)\n\n**UIAutomation**\n1. Using JavaScript: each line of JavaScript in UIAutomation will trigger a request to iOS simulator, which make the awful performance of it;\n2. The framework is unstable: for the script attached, sometimes the testing results are different, even same environment and script are provided; and sometimes the simulator or instrument will hung and quit expected;\n3. The testing supporting of this framework is not good: the element can be get by its id, but can only get by its name/label occasionally, and there are some issues unresolved, like value of label item can't be get;\n4. Readiness of JavaScript is hard, it doesn't provide the capability to integrate with tools like Cucumber;\n5. It doesn't have the capability to integrate with CI tools;\n6. It can't run on real devices, but only on simulator, which means it can't run parallel.\n\n### Attachments:\n\n[UIAutomation.zip](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/UIAutomation.zip)","source":"_posts/iOS_Automation_UIAutomation.md","raw":"title: iOS Automation - UIAutomation\ndate: 2012-04-26\ncategories:\n- Testing\ntags:\n- Mobile\n- iOS\n- Automation\n- Framework\n- UIAutomation\ncomments: true\n---\n\n**This framework is not suggested!**\n\n**Some materials for iOS - UIAutomation framework:**\n1. [Working with UIAutomation](http://alexvollmer.com/posts/2010/07/03/working-with-uiautomation/)\n2. [UI Automation](http://www.sunsetlakesoftware.com/sites/default/files/Fall2010CourseNotes/ui%20automation.html)\n3. [UI Automation JavaScript Reference for iOS](https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Reference/UIAutomationRef/)\n4. [How Do I Perform UI Automation Testing in iOS 4](http://www.codeproject.com/Articles/107595/How-Do-I-Perform-UI-Automation-Testing-in-iOS-4)\n5. [iOS - UI Automation get textfield by accessibility label?](http://stackoverflow.com/questions/8306076/ios-ui-automation-get-textfield-by-accessibility-label)\n6. [iOS Automated Tests with UIAutomation](http://blog.manbolo.com/2012/04/08/ios-automated-tests-with-uiautomation)\n7. [Can't get value of UIAStaticText?](http://stackoverflow.com/questions/7688311/cant-get-value-of-uiastatictext)\n\n**UIAutomation**\n1. Using JavaScript: each line of JavaScript in UIAutomation will trigger a request to iOS simulator, which make the awful performance of it;\n2. The framework is unstable: for the script attached, sometimes the testing results are different, even same environment and script are provided; and sometimes the simulator or instrument will hung and quit expected;\n3. The testing supporting of this framework is not good: the element can be get by its id, but can only get by its name/label occasionally, and there are some issues unresolved, like value of label item can't be get;\n4. Readiness of JavaScript is hard, it doesn't provide the capability to integrate with tools like Cucumber;\n5. It doesn't have the capability to integrate with CI tools;\n6. It can't run on real devices, but only on simulator, which means it can't run parallel.\n\n### Attachments:\n\n[UIAutomation.zip](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/UIAutomation.zip)","slug":"iOS_Automation_UIAutomation","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu460003y73n88yiw2i9","layout":"post","photos":[],"link":"","content":"<p><strong>This framework is not suggested!</strong></p>\n<p><strong>Some materials for iOS - UIAutomation framework:</strong></p>\n<ol>\n<li><a href=\"http://alexvollmer.com/posts/2010/07/03/working-with-uiautomation/\" target=\"_blank\" rel=\"external\">Working with UIAutomation</a></li>\n<li><a href=\"http://www.sunsetlakesoftware.com/sites/default/files/Fall2010CourseNotes/ui%20automation.html\" target=\"_blank\" rel=\"external\">UI Automation</a></li>\n<li><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Reference/UIAutomationRef/\" target=\"_blank\" rel=\"external\">UI Automation JavaScript Reference for iOS</a></li>\n<li><a href=\"http://www.codeproject.com/Articles/107595/How-Do-I-Perform-UI-Automation-Testing-in-iOS-4\" target=\"_blank\" rel=\"external\">How Do I Perform UI Automation Testing in iOS 4</a></li>\n<li><a href=\"http://stackoverflow.com/questions/8306076/ios-ui-automation-get-textfield-by-accessibility-label\" target=\"_blank\" rel=\"external\">iOS - UI Automation get textfield by accessibility label?</a></li>\n<li><a href=\"http://blog.manbolo.com/2012/04/08/ios-automated-tests-with-uiautomation\" target=\"_blank\" rel=\"external\">iOS Automated Tests with UIAutomation</a></li>\n<li><a href=\"http://stackoverflow.com/questions/7688311/cant-get-value-of-uiastatictext\" target=\"_blank\" rel=\"external\">Can’t get value of UIAStaticText?</a></li>\n</ol>\n<p><strong>UIAutomation</strong></p>\n<ol>\n<li>Using JavaScript: each line of JavaScript in UIAutomation will trigger a request to iOS simulator, which make the awful performance of it;</li>\n<li>The framework is unstable: for the script attached, sometimes the testing results are different, even same environment and script are provided; and sometimes the simulator or instrument will hung and quit expected;</li>\n<li>The testing supporting of this framework is not good: the element can be get by its id, but can only get by its name/label occasionally, and there are some issues unresolved, like value of label item can’t be get;</li>\n<li>Readiness of JavaScript is hard, it doesn’t provide the capability to integrate with tools like Cucumber;</li>\n<li>It doesn’t have the capability to integrate with CI tools;</li>\n<li>It can’t run on real devices, but only on simulator, which means it can’t run parallel.</li>\n</ol>\n<h3 id=\"Attachments:\">Attachments:</h3><p><a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/UIAutomation.zip\" target=\"_blank\" rel=\"external\">UIAutomation.zip</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>This framework is not suggested!</strong></p>\n<p><strong>Some materials for iOS - UIAutomation framework:</strong></p>\n<ol>\n<li><a href=\"http://alexvollmer.com/posts/2010/07/03/working-with-uiautomation/\" target=\"_blank\" rel=\"external\">Working with UIAutomation</a></li>\n<li><a href=\"http://www.sunsetlakesoftware.com/sites/default/files/Fall2010CourseNotes/ui%20automation.html\" target=\"_blank\" rel=\"external\">UI Automation</a></li>\n<li><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Reference/UIAutomationRef/\" target=\"_blank\" rel=\"external\">UI Automation JavaScript Reference for iOS</a></li>\n<li><a href=\"http://www.codeproject.com/Articles/107595/How-Do-I-Perform-UI-Automation-Testing-in-iOS-4\" target=\"_blank\" rel=\"external\">How Do I Perform UI Automation Testing in iOS 4</a></li>\n<li><a href=\"http://stackoverflow.com/questions/8306076/ios-ui-automation-get-textfield-by-accessibility-label\" target=\"_blank\" rel=\"external\">iOS - UI Automation get textfield by accessibility label?</a></li>\n<li><a href=\"http://blog.manbolo.com/2012/04/08/ios-automated-tests-with-uiautomation\" target=\"_blank\" rel=\"external\">iOS Automated Tests with UIAutomation</a></li>\n<li><a href=\"http://stackoverflow.com/questions/7688311/cant-get-value-of-uiastatictext\" target=\"_blank\" rel=\"external\">Can’t get value of UIAStaticText?</a></li>\n</ol>\n<p><strong>UIAutomation</strong></p>\n<ol>\n<li>Using JavaScript: each line of JavaScript in UIAutomation will trigger a request to iOS simulator, which make the awful performance of it;</li>\n<li>The framework is unstable: for the script attached, sometimes the testing results are different, even same environment and script are provided; and sometimes the simulator or instrument will hung and quit expected;</li>\n<li>The testing supporting of this framework is not good: the element can be get by its id, but can only get by its name/label occasionally, and there are some issues unresolved, like value of label item can’t be get;</li>\n<li>Readiness of JavaScript is hard, it doesn’t provide the capability to integrate with tools like Cucumber;</li>\n<li>It doesn’t have the capability to integrate with CI tools;</li>\n<li>It can’t run on real devices, but only on simulator, which means it can’t run parallel.</li>\n</ol>\n<h3 id=\"Attachments:\">Attachments:</h3><p><a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/UIAutomation.zip\" target=\"_blank\" rel=\"external\">UIAutomation.zip</a></p>\n"},{"title":"iOS Automation - NativeDriver","date":"2012-05-07T14:00:00.000Z","comments":1,"_content":"\nVery easy to learn, and can reuse lots of knowledge in Web testing.\nNothing need to explain, just follow the document to setup the environment.\n\n**Open \"NativeDriverTests\" in Eclipse, run the app in XCode simulator first, then run the tests in Eclipse as JUnit Test.**\n\n**References:**\n1. [NativeDriver](http://code.google.com/p/nativedriver)\n2. [NativeDriver Wiki](http://code.google.com/p/nativedriver/w/list)\n3. [Selenium](http://code.google.com/p/selenium/)\n4. [NativeDriver and iOS: First Impressions](http://electronicingenuity.com/nativedriver-ios-first-impressions)\n\n### Attachments:\n\n[NativeDriverIOSTests.zip](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/NativeDriverIOSTests.zip)","source":"_posts/iOS_Automation_NativeDriver.md","raw":"title: iOS Automation - NativeDriver\ndate: 2012-05-08\ncategories:\n- Testing\ntags:\n- Mobile\n- iOS\n- Automation\n- Framework\n- NativeDriver\ncomments: true\n---\n\nVery easy to learn, and can reuse lots of knowledge in Web testing.\nNothing need to explain, just follow the document to setup the environment.\n\n**Open \"NativeDriverTests\" in Eclipse, run the app in XCode simulator first, then run the tests in Eclipse as JUnit Test.**\n\n**References:**\n1. [NativeDriver](http://code.google.com/p/nativedriver)\n2. [NativeDriver Wiki](http://code.google.com/p/nativedriver/w/list)\n3. [Selenium](http://code.google.com/p/selenium/)\n4. [NativeDriver and iOS: First Impressions](http://electronicingenuity.com/nativedriver-ios-first-impressions)\n\n### Attachments:\n\n[NativeDriverIOSTests.zip](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/NativeDriverIOSTests.zip)","slug":"iOS_Automation_NativeDriver","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu4h000gy73ntlwjv74f","layout":"post","photos":[],"link":"","content":"<p>Very easy to learn, and can reuse lots of knowledge in Web testing.<br>Nothing need to explain, just follow the document to setup the environment.</p>\n<p><strong>Open “NativeDriverTests” in Eclipse, run the app in XCode simulator first, then run the tests in Eclipse as JUnit Test.</strong></p>\n<p><strong>References:</strong></p>\n<ol>\n<li><a href=\"http://code.google.com/p/nativedriver\" target=\"_blank\" rel=\"external\">NativeDriver</a></li>\n<li><a href=\"http://code.google.com/p/nativedriver/w/list\" target=\"_blank\" rel=\"external\">NativeDriver Wiki</a></li>\n<li><a href=\"http://code.google.com/p/selenium/\" target=\"_blank\" rel=\"external\">Selenium</a></li>\n<li><a href=\"http://electronicingenuity.com/nativedriver-ios-first-impressions\" target=\"_blank\" rel=\"external\">NativeDriver and iOS: First Impressions</a></li>\n</ol>\n<h3 id=\"Attachments:\">Attachments:</h3><p><a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/NativeDriverIOSTests.zip\" target=\"_blank\" rel=\"external\">NativeDriverIOSTests.zip</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Very easy to learn, and can reuse lots of knowledge in Web testing.<br>Nothing need to explain, just follow the document to setup the environment.</p>\n<p><strong>Open “NativeDriverTests” in Eclipse, run the app in XCode simulator first, then run the tests in Eclipse as JUnit Test.</strong></p>\n<p><strong>References:</strong></p>\n<ol>\n<li><a href=\"http://code.google.com/p/nativedriver\" target=\"_blank\" rel=\"external\">NativeDriver</a></li>\n<li><a href=\"http://code.google.com/p/nativedriver/w/list\" target=\"_blank\" rel=\"external\">NativeDriver Wiki</a></li>\n<li><a href=\"http://code.google.com/p/selenium/\" target=\"_blank\" rel=\"external\">Selenium</a></li>\n<li><a href=\"http://electronicingenuity.com/nativedriver-ios-first-impressions\" target=\"_blank\" rel=\"external\">NativeDriver and iOS: First Impressions</a></li>\n</ol>\n<h3 id=\"Attachments:\">Attachments:</h3><p><a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/NativeDriverIOSTests.zip\" target=\"_blank\" rel=\"external\">NativeDriverIOSTests.zip</a></p>\n"},{"title":"iOS Automation - KIF (Keep It Functional)","date":"2012-04-25T14:00:00.000Z","comments":1,"_content":"\nPlease download and unzip [KIF.zip](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/KIF.zip), and select \"HelloWorld copy\" to run KIFTests.\n\n**Note:**\n1. I have modified KIF framework: add \"[(UITextField *) view setText:nil];\" in KIFTestStep.m to clear text before input;\n2. By default, using \"[super initializeScenarios]\" in EXTestController.m to initialize all scenarios, the order of scenarios are defined according to the scenario name ascending; to change the order of them, change corresponding lines in \"initializeScenarios\" in EXTestController.m.\n3. For KIF tests, in order to get value of text field, we need to set \"accessibilityValue\" of it in code first, then we can access its value in testing code. It's better we can package them into one class, which we can reuse later.\n\n**References for KIF:**\n1. KIF uses undocumented Apple APIs. This is true of most iOS testing frameworks, and is safe for testing purposes, but it's important that KIF does not make it into production code, by duplicating a second target for the KIF-enabled version of the app to test. This gives you an easy way to begin testing -- *just run this second target* -- and also helps make sure that no testing code ever makes it into your App Store submission and gets your app rejected.\n2. All of the tests for KIF are written in Objective C, so the performance is good.\n3. Some detailed steps are not documented in KIF official documents, need to compare the docs with code provided in GitHub.\n\n#### Advantages of KIF comparing to UIAutomation (official by KIF group but briefly):\n\n**KIF Pros**\n1. All objective-C. No need to write translations from JavaScript.\n2. Can easily hook into your code base for obscure things, like \"fake a credit card swipe.\"\n3. Easily runs on the command line for CI. Current shipping version of UIAutomation does not.\n4. No external dependencies. UIAutomation currently requires Instruments.\n5. Easy to integrate into your Xcode workflow.\n6. Tests run quickly. Runs in the app rather than being translated from Instruments/JS.\n7. It's open source. If there's something you want to add, you can. If something's broken, it can be fixed quickly.\n\n**UIAutomation Pros**\n1. Runs outside of the process, so it could potentially simulate things like switching apps or hitting the home button. KIF could possibly do some of this using private API, but in general you need to mock these sorts of interactions.\n2. JS is less verbose and may appeal to some more than ObjC.\n3. Apple has full access to the frameworks and can potentially do some awesome things in the future.\n4. We get new features for free over time, and old ones will always be supported. KIF uses a lot of undocumented API, so it's possible that future iOS releases would require it to be updated.\n\n**Some materials for iOS - KIF framework:**\n1. [KIF](https://github.com/square/KIF)\n2. [KIF Google Groups](https://groups.google.com/forum/?fromgroups#!forum/kif-framework)\n3. [iOS Integration Testing](http://corner.squareup.com/2011/07/ios-integration-testing.html)\n4. [Enabling Accessibility Programatically on iOS Devices](http://sgleadow.github.com/blog/2011/11/16/enabling-accessibility-programatically-on-ios-devices/)","source":"_posts/iOS_Automation_KIF_Keep_It_Functional.md","raw":"title: iOS Automation - KIF (Keep It Functional)\ndate: 2012-04-26\ncategories:\n- Testing\ntags:\n- Mobile\n- iOS\n- Automation\n- Framework\n- UIAutomation\ncomments: true\n---\n\nPlease download and unzip [KIF.zip](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/KIF.zip), and select \"HelloWorld copy\" to run KIFTests.\n\n**Note:**\n1. I have modified KIF framework: add \"[(UITextField *) view setText:nil];\" in KIFTestStep.m to clear text before input;\n2. By default, using \"[super initializeScenarios]\" in EXTestController.m to initialize all scenarios, the order of scenarios are defined according to the scenario name ascending; to change the order of them, change corresponding lines in \"initializeScenarios\" in EXTestController.m.\n3. For KIF tests, in order to get value of text field, we need to set \"accessibilityValue\" of it in code first, then we can access its value in testing code. It's better we can package them into one class, which we can reuse later.\n\n**References for KIF:**\n1. KIF uses undocumented Apple APIs. This is true of most iOS testing frameworks, and is safe for testing purposes, but it's important that KIF does not make it into production code, by duplicating a second target for the KIF-enabled version of the app to test. This gives you an easy way to begin testing -- *just run this second target* -- and also helps make sure that no testing code ever makes it into your App Store submission and gets your app rejected.\n2. All of the tests for KIF are written in Objective C, so the performance is good.\n3. Some detailed steps are not documented in KIF official documents, need to compare the docs with code provided in GitHub.\n\n#### Advantages of KIF comparing to UIAutomation (official by KIF group but briefly):\n\n**KIF Pros**\n1. All objective-C. No need to write translations from JavaScript.\n2. Can easily hook into your code base for obscure things, like \"fake a credit card swipe.\"\n3. Easily runs on the command line for CI. Current shipping version of UIAutomation does not.\n4. No external dependencies. UIAutomation currently requires Instruments.\n5. Easy to integrate into your Xcode workflow.\n6. Tests run quickly. Runs in the app rather than being translated from Instruments/JS.\n7. It's open source. If there's something you want to add, you can. If something's broken, it can be fixed quickly.\n\n**UIAutomation Pros**\n1. Runs outside of the process, so it could potentially simulate things like switching apps or hitting the home button. KIF could possibly do some of this using private API, but in general you need to mock these sorts of interactions.\n2. JS is less verbose and may appeal to some more than ObjC.\n3. Apple has full access to the frameworks and can potentially do some awesome things in the future.\n4. We get new features for free over time, and old ones will always be supported. KIF uses a lot of undocumented API, so it's possible that future iOS releases would require it to be updated.\n\n**Some materials for iOS - KIF framework:**\n1. [KIF](https://github.com/square/KIF)\n2. [KIF Google Groups](https://groups.google.com/forum/?fromgroups#!forum/kif-framework)\n3. [iOS Integration Testing](http://corner.squareup.com/2011/07/ios-integration-testing.html)\n4. [Enabling Accessibility Programatically on iOS Devices](http://sgleadow.github.com/blog/2011/11/16/enabling-accessibility-programatically-on-ios-devices/)","slug":"iOS_Automation_KIF_Keep_It_Functional","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu4k000oy73nh7te4r5b","layout":"post","photos":[],"link":"","content":"<p>Please download and unzip <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/KIF.zip\" target=\"_blank\" rel=\"external\">KIF.zip</a>, and select “HelloWorld copy” to run KIFTests.</p>\n<p><strong>Note:</strong></p>\n<ol>\n<li>I have modified KIF framework: add “[(UITextField *) view setText:nil];” in KIFTestStep.m to clear text before input;</li>\n<li>By default, using “[super initializeScenarios]” in EXTestController.m to initialize all scenarios, the order of scenarios are defined according to the scenario name ascending; to change the order of them, change corresponding lines in “initializeScenarios” in EXTestController.m.</li>\n<li>For KIF tests, in order to get value of text field, we need to set “accessibilityValue” of it in code first, then we can access its value in testing code. It’s better we can package them into one class, which we can reuse later.</li>\n</ol>\n<p><strong>References for KIF:</strong></p>\n<ol>\n<li>KIF uses undocumented Apple APIs. This is true of most iOS testing frameworks, and is safe for testing purposes, but it’s important that KIF does not make it into production code, by duplicating a second target for the KIF-enabled version of the app to test. This gives you an easy way to begin testing — <em>just run this second target</em> — and also helps make sure that no testing code ever makes it into your App Store submission and gets your app rejected.</li>\n<li>All of the tests for KIF are written in Objective C, so the performance is good.</li>\n<li>Some detailed steps are not documented in KIF official documents, need to compare the docs with code provided in GitHub.</li>\n</ol>\n<h4 id=\"Advantages_of_KIF_comparing_to_UIAutomation_(official_by_KIF_group_but_briefly):\">Advantages of KIF comparing to UIAutomation (official by KIF group but briefly):</h4><p><strong>KIF Pros</strong></p>\n<ol>\n<li>All objective-C. No need to write translations from JavaScript.</li>\n<li>Can easily hook into your code base for obscure things, like “fake a credit card swipe.”</li>\n<li>Easily runs on the command line for CI. Current shipping version of UIAutomation does not.</li>\n<li>No external dependencies. UIAutomation currently requires Instruments.</li>\n<li>Easy to integrate into your Xcode workflow.</li>\n<li>Tests run quickly. Runs in the app rather than being translated from Instruments/JS.</li>\n<li>It’s open source. If there’s something you want to add, you can. If something’s broken, it can be fixed quickly.</li>\n</ol>\n<p><strong>UIAutomation Pros</strong></p>\n<ol>\n<li>Runs outside of the process, so it could potentially simulate things like switching apps or hitting the home button. KIF could possibly do some of this using private API, but in general you need to mock these sorts of interactions.</li>\n<li>JS is less verbose and may appeal to some more than ObjC.</li>\n<li>Apple has full access to the frameworks and can potentially do some awesome things in the future.</li>\n<li>We get new features for free over time, and old ones will always be supported. KIF uses a lot of undocumented API, so it’s possible that future iOS releases would require it to be updated.</li>\n</ol>\n<p><strong>Some materials for iOS - KIF framework:</strong></p>\n<ol>\n<li><a href=\"https://github.com/square/KIF\" target=\"_blank\" rel=\"external\">KIF</a></li>\n<li><a href=\"https://groups.google.com/forum/?fromgroups#!forum/kif-framework\" target=\"_blank\" rel=\"external\">KIF Google Groups</a></li>\n<li><a href=\"http://corner.squareup.com/2011/07/ios-integration-testing.html\" target=\"_blank\" rel=\"external\">iOS Integration Testing</a></li>\n<li><a href=\"http://sgleadow.github.com/blog/2011/11/16/enabling-accessibility-programatically-on-ios-devices/\" target=\"_blank\" rel=\"external\">Enabling Accessibility Programatically on iOS Devices</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>Please download and unzip <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/KIF.zip\" target=\"_blank\" rel=\"external\">KIF.zip</a>, and select “HelloWorld copy” to run KIFTests.</p>\n<p><strong>Note:</strong></p>\n<ol>\n<li>I have modified KIF framework: add “[(UITextField *) view setText:nil];” in KIFTestStep.m to clear text before input;</li>\n<li>By default, using “[super initializeScenarios]” in EXTestController.m to initialize all scenarios, the order of scenarios are defined according to the scenario name ascending; to change the order of them, change corresponding lines in “initializeScenarios” in EXTestController.m.</li>\n<li>For KIF tests, in order to get value of text field, we need to set “accessibilityValue” of it in code first, then we can access its value in testing code. It’s better we can package them into one class, which we can reuse later.</li>\n</ol>\n<p><strong>References for KIF:</strong></p>\n<ol>\n<li>KIF uses undocumented Apple APIs. This is true of most iOS testing frameworks, and is safe for testing purposes, but it’s important that KIF does not make it into production code, by duplicating a second target for the KIF-enabled version of the app to test. This gives you an easy way to begin testing — <em>just run this second target</em> — and also helps make sure that no testing code ever makes it into your App Store submission and gets your app rejected.</li>\n<li>All of the tests for KIF are written in Objective C, so the performance is good.</li>\n<li>Some detailed steps are not documented in KIF official documents, need to compare the docs with code provided in GitHub.</li>\n</ol>\n<h4 id=\"Advantages_of_KIF_comparing_to_UIAutomation_(official_by_KIF_group_but_briefly):\">Advantages of KIF comparing to UIAutomation (official by KIF group but briefly):</h4><p><strong>KIF Pros</strong></p>\n<ol>\n<li>All objective-C. No need to write translations from JavaScript.</li>\n<li>Can easily hook into your code base for obscure things, like “fake a credit card swipe.”</li>\n<li>Easily runs on the command line for CI. Current shipping version of UIAutomation does not.</li>\n<li>No external dependencies. UIAutomation currently requires Instruments.</li>\n<li>Easy to integrate into your Xcode workflow.</li>\n<li>Tests run quickly. Runs in the app rather than being translated from Instruments/JS.</li>\n<li>It’s open source. If there’s something you want to add, you can. If something’s broken, it can be fixed quickly.</li>\n</ol>\n<p><strong>UIAutomation Pros</strong></p>\n<ol>\n<li>Runs outside of the process, so it could potentially simulate things like switching apps or hitting the home button. KIF could possibly do some of this using private API, but in general you need to mock these sorts of interactions.</li>\n<li>JS is less verbose and may appeal to some more than ObjC.</li>\n<li>Apple has full access to the frameworks and can potentially do some awesome things in the future.</li>\n<li>We get new features for free over time, and old ones will always be supported. KIF uses a lot of undocumented API, so it’s possible that future iOS releases would require it to be updated.</li>\n</ol>\n<p><strong>Some materials for iOS - KIF framework:</strong></p>\n<ol>\n<li><a href=\"https://github.com/square/KIF\" target=\"_blank\" rel=\"external\">KIF</a></li>\n<li><a href=\"https://groups.google.com/forum/?fromgroups#!forum/kif-framework\" target=\"_blank\" rel=\"external\">KIF Google Groups</a></li>\n<li><a href=\"http://corner.squareup.com/2011/07/ios-integration-testing.html\" target=\"_blank\" rel=\"external\">iOS Integration Testing</a></li>\n<li><a href=\"http://sgleadow.github.com/blog/2011/11/16/enabling-accessibility-programatically-on-ios-devices/\" target=\"_blank\" rel=\"external\">Enabling Accessibility Programatically on iOS Devices</a></li>\n</ol>\n"},{"title":"iOS Automation - Frank","date":"2012-05-13T14:00:00.000Z","comments":1,"_content":"\nPlease download and unzip [HelloWorld_Frank.zip](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/HelloWorld_Frank.zip), and select \"**HelloWorld copy**\" to run FrankTests.\n\n**Frank (Frankenstein!?) is 'Selenium for native iOS apps'.**\n1. Frank use KIF and UISpec as base structure, and use UIQuery to locate elements.\n2. Frank used to based on other framework, but recently it's changed to KIF, so some documents may out of date. Try to use the latest documents and samples.\n3. You can use Ruby in Frank rather than Objective-C in KIF.\n\n**Environment preparation:**\n1. Install rvm, ruby (1.9.2 is preferred to avoid issue when installing ruby-debug later), frank-cucumber and follow the [installation script](http://www.testingwithfrank.com/installing.html) provided by Frank.\n2. For debug use, I have added ruby-debug, please gem install it when you see message of that gem is required.\n\n***Note:***\n1. Screenshots will be generated under *HelloWorld/Frank/screenshots*, if the 1st step in `Then /^I can see \"([^\"]*)\"$/ do |welcomeMessage|` is enabled;\n2. DOM can be exported if the 2nd step in `Then /^I can see \"([^\"]*)\"$/ do |welcomeMessage|` is enabled;\n3. Add *@record* before scenario can start recording, but you should use it only once.\n\n**Highly recommend before you start using Frank:**\n1. http://www.testingwithfrank.com/screencasts.html\n2. http://www.testingwithfrank.com/presentations.html\n\n**Tips/Limitations:**\n1. Build the app first, then run cucumber; otherwise sometimes, Frank can't attach to the simulator.\n2. Encounter one issue which is not fixed, post in the gmail group: Google Groups. It's about how to check a text filed with space in its value.\n3. For label, we can't access their value and check on them, Apple should be blamed, so we can only write code by ourselves to implement it from ground: set accessibilityValue -> write down the method to locate and compare the value -> write the step definition to recall the method -> use the step definition in Frank.\n4. Few documents/samples for Frank, even how to use selector; and some step definitions are not suitable for use, need to google or write down basic steps for action and validation.\n\n**How to use Symbiote (the elements' tree viewer):**\n\nFew material for it, only found http://vimeo.com/22644221 and http://blog.thepete.net/2011/05/inspect-state-of-our-running-ios-apps.html\n\n**Debug:**\n1. Using Frank is not easy to debug, using ruby, so can use ruby-debug to debug, but you need to install gem of ruby-debug first, then follow steps in https://gist.github.com/1333785.\n2. A better way is just installing ruby1.9.2 rather than 1.9.3\n3. But for the step in Frank itself, you can only use \"Console.app\" on Mac to see log. Only few useful info can be found.\n\n[**How to select elements for Frank using UIQuery/UISpec?**](http://stackoverflow.com/questions/9745842/how-to-select-elements-for-frank-using-uiquery-uispec)\n\n**Recording of script running:**\n1. Will recording everything from the scenario marked as *@record*.\n2. With multiple *@record* tags, it will open recording app multiple times, which is unusable when recording. So only use *@record* tag once.\n3. The recording is a feature of QuickTime player.\n\n**Reference**\n1. https://github.com/moredip/Frank\n2. http://www.testingwithfrank.com/\n3. https://groups.google.com/forum/?fromgroups#!forum/frank-discuss\n4. http://code.google.com/p/uispec\n4. Ruby-debug: http://bashdb.sourceforge.net/ruby-debug.html","source":"_posts/iOS_Automation_Frank.md","raw":"title: iOS Automation - Frank\ndate: 2012-05-14\ncategories:\n- Testing\ntags:\n- Mobile\n- iOS\n- Automation\n- Framework\n- Frank\ncomments: true\n---\n\nPlease download and unzip [HelloWorld_Frank.zip](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/HelloWorld_Frank.zip), and select \"**HelloWorld copy**\" to run FrankTests.\n\n**Frank (Frankenstein!?) is 'Selenium for native iOS apps'.**\n1. Frank use KIF and UISpec as base structure, and use UIQuery to locate elements.\n2. Frank used to based on other framework, but recently it's changed to KIF, so some documents may out of date. Try to use the latest documents and samples.\n3. You can use Ruby in Frank rather than Objective-C in KIF.\n\n**Environment preparation:**\n1. Install rvm, ruby (1.9.2 is preferred to avoid issue when installing ruby-debug later), frank-cucumber and follow the [installation script](http://www.testingwithfrank.com/installing.html) provided by Frank.\n2. For debug use, I have added ruby-debug, please gem install it when you see message of that gem is required.\n\n***Note:***\n1. Screenshots will be generated under *HelloWorld/Frank/screenshots*, if the 1st step in `Then /^I can see \"([^\"]*)\"$/ do |welcomeMessage|` is enabled;\n2. DOM can be exported if the 2nd step in `Then /^I can see \"([^\"]*)\"$/ do |welcomeMessage|` is enabled;\n3. Add *@record* before scenario can start recording, but you should use it only once.\n\n**Highly recommend before you start using Frank:**\n1. http://www.testingwithfrank.com/screencasts.html\n2. http://www.testingwithfrank.com/presentations.html\n\n**Tips/Limitations:**\n1. Build the app first, then run cucumber; otherwise sometimes, Frank can't attach to the simulator.\n2. Encounter one issue which is not fixed, post in the gmail group: Google Groups. It's about how to check a text filed with space in its value.\n3. For label, we can't access their value and check on them, Apple should be blamed, so we can only write code by ourselves to implement it from ground: set accessibilityValue -> write down the method to locate and compare the value -> write the step definition to recall the method -> use the step definition in Frank.\n4. Few documents/samples for Frank, even how to use selector; and some step definitions are not suitable for use, need to google or write down basic steps for action and validation.\n\n**How to use Symbiote (the elements' tree viewer):**\n\nFew material for it, only found http://vimeo.com/22644221 and http://blog.thepete.net/2011/05/inspect-state-of-our-running-ios-apps.html\n\n**Debug:**\n1. Using Frank is not easy to debug, using ruby, so can use ruby-debug to debug, but you need to install gem of ruby-debug first, then follow steps in https://gist.github.com/1333785.\n2. A better way is just installing ruby1.9.2 rather than 1.9.3\n3. But for the step in Frank itself, you can only use \"Console.app\" on Mac to see log. Only few useful info can be found.\n\n[**How to select elements for Frank using UIQuery/UISpec?**](http://stackoverflow.com/questions/9745842/how-to-select-elements-for-frank-using-uiquery-uispec)\n\n**Recording of script running:**\n1. Will recording everything from the scenario marked as *@record*.\n2. With multiple *@record* tags, it will open recording app multiple times, which is unusable when recording. So only use *@record* tag once.\n3. The recording is a feature of QuickTime player.\n\n**Reference**\n1. https://github.com/moredip/Frank\n2. http://www.testingwithfrank.com/\n3. https://groups.google.com/forum/?fromgroups#!forum/frank-discuss\n4. http://code.google.com/p/uispec\n4. Ruby-debug: http://bashdb.sourceforge.net/ruby-debug.html","slug":"iOS_Automation_Frank","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu4m000vy73n8575vtjq","layout":"post","photos":[],"link":"","content":"<p>Please download and unzip <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/HelloWorld_Frank.zip\" target=\"_blank\" rel=\"external\">HelloWorld_Frank.zip</a>, and select “<strong>HelloWorld copy</strong>“ to run FrankTests.</p>\n<p><strong>Frank (Frankenstein!?) is ‘Selenium for native iOS apps’.</strong></p>\n<ol>\n<li>Frank use KIF and UISpec as base structure, and use UIQuery to locate elements.</li>\n<li>Frank used to based on other framework, but recently it’s changed to KIF, so some documents may out of date. Try to use the latest documents and samples.</li>\n<li>You can use Ruby in Frank rather than Objective-C in KIF.</li>\n</ol>\n<p><strong>Environment preparation:</strong></p>\n<ol>\n<li>Install rvm, ruby (1.9.2 is preferred to avoid issue when installing ruby-debug later), frank-cucumber and follow the <a href=\"http://www.testingwithfrank.com/installing.html\" target=\"_blank\" rel=\"external\">installation script</a> provided by Frank.</li>\n<li>For debug use, I have added ruby-debug, please gem install it when you see message of that gem is required.</li>\n</ol>\n<p><strong><em>Note:</em></strong></p>\n<ol>\n<li>Screenshots will be generated under <em>HelloWorld/Frank/screenshots</em>, if the 1st step in <code>Then /^I can see &quot;([^&quot;]*)&quot;$/ do |welcomeMessage|</code> is enabled;</li>\n<li>DOM can be exported if the 2nd step in <code>Then /^I can see &quot;([^&quot;]*)&quot;$/ do |welcomeMessage|</code> is enabled;</li>\n<li>Add <em>@record</em> before scenario can start recording, but you should use it only once.</li>\n</ol>\n<p><strong>Highly recommend before you start using Frank:</strong></p>\n<ol>\n<li><a href=\"http://www.testingwithfrank.com/screencasts.html\" target=\"_blank\" rel=\"external\">http://www.testingwithfrank.com/screencasts.html</a></li>\n<li><a href=\"http://www.testingwithfrank.com/presentations.html\" target=\"_blank\" rel=\"external\">http://www.testingwithfrank.com/presentations.html</a></li>\n</ol>\n<p><strong>Tips/Limitations:</strong></p>\n<ol>\n<li>Build the app first, then run cucumber; otherwise sometimes, Frank can’t attach to the simulator.</li>\n<li>Encounter one issue which is not fixed, post in the gmail group: Google Groups. It’s about how to check a text filed with space in its value.</li>\n<li>For label, we can’t access their value and check on them, Apple should be blamed, so we can only write code by ourselves to implement it from ground: set accessibilityValue -&gt; write down the method to locate and compare the value -&gt; write the step definition to recall the method -&gt; use the step definition in Frank.</li>\n<li>Few documents/samples for Frank, even how to use selector; and some step definitions are not suitable for use, need to google or write down basic steps for action and validation.</li>\n</ol>\n<p><strong>How to use Symbiote (the elements’ tree viewer):</strong></p>\n<p>Few material for it, only found <a href=\"http://vimeo.com/22644221\" target=\"_blank\" rel=\"external\">http://vimeo.com/22644221</a> and <a href=\"http://blog.thepete.net/2011/05/inspect-state-of-our-running-ios-apps.html\" target=\"_blank\" rel=\"external\">http://blog.thepete.net/2011/05/inspect-state-of-our-running-ios-apps.html</a></p>\n<p><strong>Debug:</strong></p>\n<ol>\n<li>Using Frank is not easy to debug, using ruby, so can use ruby-debug to debug, but you need to install gem of ruby-debug first, then follow steps in <a href=\"https://gist.github.com/1333785\" target=\"_blank\" rel=\"external\">https://gist.github.com/1333785</a>.</li>\n<li>A better way is just installing ruby1.9.2 rather than 1.9.3</li>\n<li>But for the step in Frank itself, you can only use “Console.app” on Mac to see log. Only few useful info can be found.</li>\n</ol>\n<p><a href=\"http://stackoverflow.com/questions/9745842/how-to-select-elements-for-frank-using-uiquery-uispec\" target=\"_blank\" rel=\"external\"><strong>How to select elements for Frank using UIQuery/UISpec?</strong></a></p>\n<p><strong>Recording of script running:</strong></p>\n<ol>\n<li>Will recording everything from the scenario marked as <em>@record</em>.</li>\n<li>With multiple <em>@record</em> tags, it will open recording app multiple times, which is unusable when recording. So only use <em>@record</em> tag once.</li>\n<li>The recording is a feature of QuickTime player.</li>\n</ol>\n<p><strong>Reference</strong></p>\n<ol>\n<li><a href=\"https://github.com/moredip/Frank\" target=\"_blank\" rel=\"external\">https://github.com/moredip/Frank</a></li>\n<li><a href=\"http://www.testingwithfrank.com/\" target=\"_blank\" rel=\"external\">http://www.testingwithfrank.com/</a></li>\n<li><a href=\"https://groups.google.com/forum/?fromgroups#!forum/frank-discuss\" target=\"_blank\" rel=\"external\">https://groups.google.com/forum/?fromgroups#!forum/frank-discuss</a></li>\n<li><a href=\"http://code.google.com/p/uispec\" target=\"_blank\" rel=\"external\">http://code.google.com/p/uispec</a></li>\n<li>Ruby-debug: <a href=\"http://bashdb.sourceforge.net/ruby-debug.html\" target=\"_blank\" rel=\"external\">http://bashdb.sourceforge.net/ruby-debug.html</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>Please download and unzip <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/HelloWorld_Frank.zip\" target=\"_blank\" rel=\"external\">HelloWorld_Frank.zip</a>, and select “<strong>HelloWorld copy</strong>“ to run FrankTests.</p>\n<p><strong>Frank (Frankenstein!?) is ‘Selenium for native iOS apps’.</strong></p>\n<ol>\n<li>Frank use KIF and UISpec as base structure, and use UIQuery to locate elements.</li>\n<li>Frank used to based on other framework, but recently it’s changed to KIF, so some documents may out of date. Try to use the latest documents and samples.</li>\n<li>You can use Ruby in Frank rather than Objective-C in KIF.</li>\n</ol>\n<p><strong>Environment preparation:</strong></p>\n<ol>\n<li>Install rvm, ruby (1.9.2 is preferred to avoid issue when installing ruby-debug later), frank-cucumber and follow the <a href=\"http://www.testingwithfrank.com/installing.html\" target=\"_blank\" rel=\"external\">installation script</a> provided by Frank.</li>\n<li>For debug use, I have added ruby-debug, please gem install it when you see message of that gem is required.</li>\n</ol>\n<p><strong><em>Note:</em></strong></p>\n<ol>\n<li>Screenshots will be generated under <em>HelloWorld/Frank/screenshots</em>, if the 1st step in <code>Then /^I can see &quot;([^&quot;]*)&quot;$/ do |welcomeMessage|</code> is enabled;</li>\n<li>DOM can be exported if the 2nd step in <code>Then /^I can see &quot;([^&quot;]*)&quot;$/ do |welcomeMessage|</code> is enabled;</li>\n<li>Add <em>@record</em> before scenario can start recording, but you should use it only once.</li>\n</ol>\n<p><strong>Highly recommend before you start using Frank:</strong></p>\n<ol>\n<li><a href=\"http://www.testingwithfrank.com/screencasts.html\" target=\"_blank\" rel=\"external\">http://www.testingwithfrank.com/screencasts.html</a></li>\n<li><a href=\"http://www.testingwithfrank.com/presentations.html\" target=\"_blank\" rel=\"external\">http://www.testingwithfrank.com/presentations.html</a></li>\n</ol>\n<p><strong>Tips/Limitations:</strong></p>\n<ol>\n<li>Build the app first, then run cucumber; otherwise sometimes, Frank can’t attach to the simulator.</li>\n<li>Encounter one issue which is not fixed, post in the gmail group: Google Groups. It’s about how to check a text filed with space in its value.</li>\n<li>For label, we can’t access their value and check on them, Apple should be blamed, so we can only write code by ourselves to implement it from ground: set accessibilityValue -&gt; write down the method to locate and compare the value -&gt; write the step definition to recall the method -&gt; use the step definition in Frank.</li>\n<li>Few documents/samples for Frank, even how to use selector; and some step definitions are not suitable for use, need to google or write down basic steps for action and validation.</li>\n</ol>\n<p><strong>How to use Symbiote (the elements’ tree viewer):</strong></p>\n<p>Few material for it, only found <a href=\"http://vimeo.com/22644221\" target=\"_blank\" rel=\"external\">http://vimeo.com/22644221</a> and <a href=\"http://blog.thepete.net/2011/05/inspect-state-of-our-running-ios-apps.html\" target=\"_blank\" rel=\"external\">http://blog.thepete.net/2011/05/inspect-state-of-our-running-ios-apps.html</a></p>\n<p><strong>Debug:</strong></p>\n<ol>\n<li>Using Frank is not easy to debug, using ruby, so can use ruby-debug to debug, but you need to install gem of ruby-debug first, then follow steps in <a href=\"https://gist.github.com/1333785\" target=\"_blank\" rel=\"external\">https://gist.github.com/1333785</a>.</li>\n<li>A better way is just installing ruby1.9.2 rather than 1.9.3</li>\n<li>But for the step in Frank itself, you can only use “Console.app” on Mac to see log. Only few useful info can be found.</li>\n</ol>\n<p><a href=\"http://stackoverflow.com/questions/9745842/how-to-select-elements-for-frank-using-uiquery-uispec\" target=\"_blank\" rel=\"external\"><strong>How to select elements for Frank using UIQuery/UISpec?</strong></a></p>\n<p><strong>Recording of script running:</strong></p>\n<ol>\n<li>Will recording everything from the scenario marked as <em>@record</em>.</li>\n<li>With multiple <em>@record</em> tags, it will open recording app multiple times, which is unusable when recording. So only use <em>@record</em> tag once.</li>\n<li>The recording is a feature of QuickTime player.</li>\n</ol>\n<p><strong>Reference</strong></p>\n<ol>\n<li><a href=\"https://github.com/moredip/Frank\" target=\"_blank\" rel=\"external\">https://github.com/moredip/Frank</a></li>\n<li><a href=\"http://www.testingwithfrank.com/\" target=\"_blank\" rel=\"external\">http://www.testingwithfrank.com/</a></li>\n<li><a href=\"https://groups.google.com/forum/?fromgroups#!forum/frank-discuss\" target=\"_blank\" rel=\"external\">https://groups.google.com/forum/?fromgroups#!forum/frank-discuss</a></li>\n<li><a href=\"http://code.google.com/p/uispec\" target=\"_blank\" rel=\"external\">http://code.google.com/p/uispec</a></li>\n<li>Ruby-debug: <a href=\"http://bashdb.sourceforge.net/ruby-debug.html\" target=\"_blank\" rel=\"external\">http://bashdb.sourceforge.net/ruby-debug.html</a></li>\n</ol>\n"},{"title":"使用Mind Map写Test Case","date":"2012-04-22T14:00:00.000Z","comments":1,"_content":"\n在之前的项目中，Acceptance Criteria （AC）的描述会存放在Jira Description中；在当前项目中，除了在Jira中描述AC外，我们会使用Mind Map来写AC，以便形成测试用例Test Case，并标注测试结果和注测试代码覆盖，用着效果不错。\n\n具体格式可以参考[这里](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/PageName_FeatureName_StoryID.mm)。\n\n![Mind Map中的Test Case](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/test_case_in_mindmap.png)\n\nMind Map中的AC虽然没有严格按照标准方式书写Given When Then，但实际上通过每个节点的上下文，我们就能了解到相应的这几方面的内容。\n\n我觉得这种方式写Test Case的**优势**在于：\n1. 有层次，一目了然\n2. 也看得出AC的关联\n3. 能知道哪些有测试实现\n4. 能看得到测试结果\n5. 任何角色都能看到MindMap，也都能了解相应的Story的状态。\n\n对于Mind Map的**书写和分类**，目前我们是按照相对独立的Feature来分文件，Page-Feature-StoryID,方便找到需要的Mind Map。对于以后功能和页面过多的时候怎么分类（页面过多文件过多，功能多了后也必然会有不同页面的Feature的关联），还在思考中，逐步变化吧。\n\n之前是每次修改后就上传到一个地方，要么重命名要么覆盖，后来就建议使用Svn之类的工具来进行版本管理以便于追踪修改。\n\n与之对应，我们目前的**工作流程**是：\n1. BA确定需求后会写出Mind Map的初稿；\n2. QA和BA一起Review并得到最后的AC；\n3. Kick Off Story时会按照Mind Map来过一遍\n4. 在Developer进行开发的时候，会将已实现单元测试的方法名加在对应的AC之后并加上单元测试覆盖的图标；\n5. QA能看到哪些AC被测试覆盖了，并着重未覆盖的AC也着重探索性，测试完成后会在对应的AC加上勾或者叉来标注结果。\n\n有**欠缺**的地方有：\n1. 多了一次对Story的描述，最开始是当做Story的补充，因此Mind Map能否及时根据Story更新也成了要关注的问题；\n2. Mind Map是文档但不是可执行的文档。","source":"_posts/Write_Test_Case_Use_Mind_Map.md","raw":"title: 使用Mind Map写Test Case\ndate: 2012-04-23\ncategories:\n- Test\ntags:\n- Mind Map\n- Test Case\n- Acceptance Criteria\n- AC\ncomments: true\n---\n\n在之前的项目中，Acceptance Criteria （AC）的描述会存放在Jira Description中；在当前项目中，除了在Jira中描述AC外，我们会使用Mind Map来写AC，以便形成测试用例Test Case，并标注测试结果和注测试代码覆盖，用着效果不错。\n\n具体格式可以参考[这里](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/PageName_FeatureName_StoryID.mm)。\n\n![Mind Map中的Test Case](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/test_case_in_mindmap.png)\n\nMind Map中的AC虽然没有严格按照标准方式书写Given When Then，但实际上通过每个节点的上下文，我们就能了解到相应的这几方面的内容。\n\n我觉得这种方式写Test Case的**优势**在于：\n1. 有层次，一目了然\n2. 也看得出AC的关联\n3. 能知道哪些有测试实现\n4. 能看得到测试结果\n5. 任何角色都能看到MindMap，也都能了解相应的Story的状态。\n\n对于Mind Map的**书写和分类**，目前我们是按照相对独立的Feature来分文件，Page-Feature-StoryID,方便找到需要的Mind Map。对于以后功能和页面过多的时候怎么分类（页面过多文件过多，功能多了后也必然会有不同页面的Feature的关联），还在思考中，逐步变化吧。\n\n之前是每次修改后就上传到一个地方，要么重命名要么覆盖，后来就建议使用Svn之类的工具来进行版本管理以便于追踪修改。\n\n与之对应，我们目前的**工作流程**是：\n1. BA确定需求后会写出Mind Map的初稿；\n2. QA和BA一起Review并得到最后的AC；\n3. Kick Off Story时会按照Mind Map来过一遍\n4. 在Developer进行开发的时候，会将已实现单元测试的方法名加在对应的AC之后并加上单元测试覆盖的图标；\n5. QA能看到哪些AC被测试覆盖了，并着重未覆盖的AC也着重探索性，测试完成后会在对应的AC加上勾或者叉来标注结果。\n\n有**欠缺**的地方有：\n1. 多了一次对Story的描述，最开始是当做Story的补充，因此Mind Map能否及时根据Story更新也成了要关注的问题；\n2. Mind Map是文档但不是可执行的文档。","slug":"Write_Test_Case_Use_Mind_Map","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu4p0013y73n8e0722tx","layout":"post","photos":[],"link":"","content":"<p>在之前的项目中，Acceptance Criteria （AC）的描述会存放在Jira Description中；在当前项目中，除了在Jira中描述AC外，我们会使用Mind Map来写AC，以便形成测试用例Test Case，并标注测试结果和注测试代码覆盖，用着效果不错。</p>\n<p>具体格式可以参考<a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/PageName_FeatureName_StoryID.mm\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/test_case_in_mindmap.png\" alt=\"Mind Map中的Test Case\"></p>\n<p>Mind Map中的AC虽然没有严格按照标准方式书写Given When Then，但实际上通过每个节点的上下文，我们就能了解到相应的这几方面的内容。</p>\n<p>我觉得这种方式写Test Case的<strong>优势</strong>在于：</p>\n<ol>\n<li>有层次，一目了然</li>\n<li>也看得出AC的关联</li>\n<li>能知道哪些有测试实现</li>\n<li>能看得到测试结果</li>\n<li>任何角色都能看到MindMap，也都能了解相应的Story的状态。</li>\n</ol>\n<p>对于Mind Map的<strong>书写和分类</strong>，目前我们是按照相对独立的Feature来分文件，Page-Feature-StoryID,方便找到需要的Mind Map。对于以后功能和页面过多的时候怎么分类（页面过多文件过多，功能多了后也必然会有不同页面的Feature的关联），还在思考中，逐步变化吧。</p>\n<p>之前是每次修改后就上传到一个地方，要么重命名要么覆盖，后来就建议使用Svn之类的工具来进行版本管理以便于追踪修改。</p>\n<p>与之对应，我们目前的<strong>工作流程</strong>是：</p>\n<ol>\n<li>BA确定需求后会写出Mind Map的初稿；</li>\n<li>QA和BA一起Review并得到最后的AC；</li>\n<li>Kick Off Story时会按照Mind Map来过一遍</li>\n<li>在Developer进行开发的时候，会将已实现单元测试的方法名加在对应的AC之后并加上单元测试覆盖的图标；</li>\n<li>QA能看到哪些AC被测试覆盖了，并着重未覆盖的AC也着重探索性，测试完成后会在对应的AC加上勾或者叉来标注结果。</li>\n</ol>\n<p>有<strong>欠缺</strong>的地方有：</p>\n<ol>\n<li>多了一次对Story的描述，最开始是当做Story的补充，因此Mind Map能否及时根据Story更新也成了要关注的问题；</li>\n<li>Mind Map是文档但不是可执行的文档。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在之前的项目中，Acceptance Criteria （AC）的描述会存放在Jira Description中；在当前项目中，除了在Jira中描述AC外，我们会使用Mind Map来写AC，以便形成测试用例Test Case，并标注测试结果和注测试代码覆盖，用着效果不错。</p>\n<p>具体格式可以参考<a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/PageName_FeatureName_StoryID.mm\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/test_case_in_mindmap.png\" alt=\"Mind Map中的Test Case\"></p>\n<p>Mind Map中的AC虽然没有严格按照标准方式书写Given When Then，但实际上通过每个节点的上下文，我们就能了解到相应的这几方面的内容。</p>\n<p>我觉得这种方式写Test Case的<strong>优势</strong>在于：</p>\n<ol>\n<li>有层次，一目了然</li>\n<li>也看得出AC的关联</li>\n<li>能知道哪些有测试实现</li>\n<li>能看得到测试结果</li>\n<li>任何角色都能看到MindMap，也都能了解相应的Story的状态。</li>\n</ol>\n<p>对于Mind Map的<strong>书写和分类</strong>，目前我们是按照相对独立的Feature来分文件，Page-Feature-StoryID,方便找到需要的Mind Map。对于以后功能和页面过多的时候怎么分类（页面过多文件过多，功能多了后也必然会有不同页面的Feature的关联），还在思考中，逐步变化吧。</p>\n<p>之前是每次修改后就上传到一个地方，要么重命名要么覆盖，后来就建议使用Svn之类的工具来进行版本管理以便于追踪修改。</p>\n<p>与之对应，我们目前的<strong>工作流程</strong>是：</p>\n<ol>\n<li>BA确定需求后会写出Mind Map的初稿；</li>\n<li>QA和BA一起Review并得到最后的AC；</li>\n<li>Kick Off Story时会按照Mind Map来过一遍</li>\n<li>在Developer进行开发的时候，会将已实现单元测试的方法名加在对应的AC之后并加上单元测试覆盖的图标；</li>\n<li>QA能看到哪些AC被测试覆盖了，并着重未覆盖的AC也着重探索性，测试完成后会在对应的AC加上勾或者叉来标注结果。</li>\n</ol>\n<p>有<strong>欠缺</strong>的地方有：</p>\n<ol>\n<li>多了一次对Story的描述，最开始是当做Story的补充，因此Mind Map能否及时根据Story更新也成了要关注的问题；</li>\n<li>Mind Map是文档但不是可执行的文档。</li>\n</ol>\n"},{"title":"Whindows Phone Automation - WindowsPhoneTestFramework","date":"2012-05-17T14:00:00.000Z","comments":1,"_content":"\nBetter to install VS2010 first, otherwise required testing framework/dll can't be found.\n\n[**WindowsPhone system structure**](http://msdn.microsoft.com/zh-cn/windowsphone/ff955778.aspx)\n\n**WindowsPhoneApp developing basics:**\n1. [Windows Phone 7 开发常见问题汇集贴](http://social.msdn.microsoft.com/Forums/zh-CN/windowsphonezhchs/thread/5aacf6ab-dab7-4dcc-9d3d-d2c9095e490e)\n2. [Windows Phone 7 手机开发](http://msdn.microsoft.com/zh-cn/ff380145)\n\n**WindowsPhone Automation test:**\n1. [Expensify/WindowsPhoneTestFramework](https://github.com/Expensify/WindowsPhoneTestFramework)\n2. [UI Testing on Windows Phone 7](http://www.slideshare.net/cirrious/ui-testing-on-windows-phone)\n3. [Windows Phone应用开发](http://www.cnblogs.com/chenkai/tag/Windows%20Phone/)\n\n**Suggestions for development:**\n1. WindowsPhone app use MVVM pattern: M is Model, it controls the data and events; V is View, which controls the display; and VM is View-Model, which is the bridge from Model to View.\n2. A better way to design the app is heavily use M and VM, with light V. So that we can test the app easily and quickly, with stub and mock, rather than heavy UI tests.\n3. A tool recommended is MVVM light, check the references from http://mvvmlight.codeplex.com/ and http://www.galasoft.ch/mvvm/.\n\n**Problem encountered:**\n\nThe development of WhindowsPhone app is quite easy (please refer to [this](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/WP7App.zip), it's a basic WP7 app), but for automation testing, especially UI testing, it's the opposite.\n\nWhen using WindowsPhoneTestFramework, following the steps in video of [Ui Testing on Windows Phone](http://www.slideshare.net/cirrious/ui-testing-on-windows-phone), the step of install BDD class library show error of JsonValue 0.5.0 can't be installed, even try to install JsonValue 0.6.0 still fails.\n\nI am blocked by this. No clue found.","source":"_posts/Windows_Phone_Automation_Windows_Phone_Test_Framework.md","raw":"title: Whindows Phone Automation - WindowsPhoneTestFramework\ndate: 2012-05-18\ncategories:\n- Testing\ntags:\n- Mobile\n- Windows Phone\n- Automation\n- Framework\n- WindowsPhoneTestFramework\ncomments: true\n---\n\nBetter to install VS2010 first, otherwise required testing framework/dll can't be found.\n\n[**WindowsPhone system structure**](http://msdn.microsoft.com/zh-cn/windowsphone/ff955778.aspx)\n\n**WindowsPhoneApp developing basics:**\n1. [Windows Phone 7 开发常见问题汇集贴](http://social.msdn.microsoft.com/Forums/zh-CN/windowsphonezhchs/thread/5aacf6ab-dab7-4dcc-9d3d-d2c9095e490e)\n2. [Windows Phone 7 手机开发](http://msdn.microsoft.com/zh-cn/ff380145)\n\n**WindowsPhone Automation test:**\n1. [Expensify/WindowsPhoneTestFramework](https://github.com/Expensify/WindowsPhoneTestFramework)\n2. [UI Testing on Windows Phone 7](http://www.slideshare.net/cirrious/ui-testing-on-windows-phone)\n3. [Windows Phone应用开发](http://www.cnblogs.com/chenkai/tag/Windows%20Phone/)\n\n**Suggestions for development:**\n1. WindowsPhone app use MVVM pattern: M is Model, it controls the data and events; V is View, which controls the display; and VM is View-Model, which is the bridge from Model to View.\n2. A better way to design the app is heavily use M and VM, with light V. So that we can test the app easily and quickly, with stub and mock, rather than heavy UI tests.\n3. A tool recommended is MVVM light, check the references from http://mvvmlight.codeplex.com/ and http://www.galasoft.ch/mvvm/.\n\n**Problem encountered:**\n\nThe development of WhindowsPhone app is quite easy (please refer to [this](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/WP7App.zip), it's a basic WP7 app), but for automation testing, especially UI testing, it's the opposite.\n\nWhen using WindowsPhoneTestFramework, following the steps in video of [Ui Testing on Windows Phone](http://www.slideshare.net/cirrious/ui-testing-on-windows-phone), the step of install BDD class library show error of JsonValue 0.5.0 can't be installed, even try to install JsonValue 0.6.0 still fails.\n\nI am blocked by this. No clue found.","slug":"Windows_Phone_Automation_Windows_Phone_Test_Framework","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu4v001ey73nkiujlo7b","layout":"post","photos":[],"link":"","content":"<p>Better to install VS2010 first, otherwise required testing framework/dll can’t be found.</p>\n<p><a href=\"http://msdn.microsoft.com/zh-cn/windowsphone/ff955778.aspx\" target=\"_blank\" rel=\"external\"><strong>WindowsPhone system structure</strong></a></p>\n<p><strong>WindowsPhoneApp developing basics:</strong></p>\n<ol>\n<li><a href=\"http://social.msdn.microsoft.com/Forums/zh-CN/windowsphonezhchs/thread/5aacf6ab-dab7-4dcc-9d3d-d2c9095e490e\" target=\"_blank\" rel=\"external\">Windows Phone 7 开发常见问题汇集贴</a></li>\n<li><a href=\"http://msdn.microsoft.com/zh-cn/ff380145\" target=\"_blank\" rel=\"external\">Windows Phone 7 手机开发</a></li>\n</ol>\n<p><strong>WindowsPhone Automation test:</strong></p>\n<ol>\n<li><a href=\"https://github.com/Expensify/WindowsPhoneTestFramework\" target=\"_blank\" rel=\"external\">Expensify/WindowsPhoneTestFramework</a></li>\n<li><a href=\"http://www.slideshare.net/cirrious/ui-testing-on-windows-phone\" target=\"_blank\" rel=\"external\">UI Testing on Windows Phone 7</a></li>\n<li><a href=\"http://www.cnblogs.com/chenkai/tag/Windows%20Phone/\" target=\"_blank\" rel=\"external\">Windows Phone应用开发</a></li>\n</ol>\n<p><strong>Suggestions for development:</strong></p>\n<ol>\n<li>WindowsPhone app use MVVM pattern: M is Model, it controls the data and events; V is View, which controls the display; and VM is View-Model, which is the bridge from Model to View.</li>\n<li>A better way to design the app is heavily use M and VM, with light V. So that we can test the app easily and quickly, with stub and mock, rather than heavy UI tests.</li>\n<li>A tool recommended is MVVM light, check the references from <a href=\"http://mvvmlight.codeplex.com/\" target=\"_blank\" rel=\"external\">http://mvvmlight.codeplex.com/</a> and <a href=\"http://www.galasoft.ch/mvvm/\" target=\"_blank\" rel=\"external\">http://www.galasoft.ch/mvvm/</a>.</li>\n</ol>\n<p><strong>Problem encountered:</strong></p>\n<p>The development of WhindowsPhone app is quite easy (please refer to <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/WP7App.zip\" target=\"_blank\" rel=\"external\">this</a>, it’s a basic WP7 app), but for automation testing, especially UI testing, it’s the opposite.</p>\n<p>When using WindowsPhoneTestFramework, following the steps in video of <a href=\"http://www.slideshare.net/cirrious/ui-testing-on-windows-phone\" target=\"_blank\" rel=\"external\">Ui Testing on Windows Phone</a>, the step of install BDD class library show error of JsonValue 0.5.0 can’t be installed, even try to install JsonValue 0.6.0 still fails.</p>\n<p>I am blocked by this. No clue found.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Better to install VS2010 first, otherwise required testing framework/dll can’t be found.</p>\n<p><a href=\"http://msdn.microsoft.com/zh-cn/windowsphone/ff955778.aspx\" target=\"_blank\" rel=\"external\"><strong>WindowsPhone system structure</strong></a></p>\n<p><strong>WindowsPhoneApp developing basics:</strong></p>\n<ol>\n<li><a href=\"http://social.msdn.microsoft.com/Forums/zh-CN/windowsphonezhchs/thread/5aacf6ab-dab7-4dcc-9d3d-d2c9095e490e\" target=\"_blank\" rel=\"external\">Windows Phone 7 开发常见问题汇集贴</a></li>\n<li><a href=\"http://msdn.microsoft.com/zh-cn/ff380145\" target=\"_blank\" rel=\"external\">Windows Phone 7 手机开发</a></li>\n</ol>\n<p><strong>WindowsPhone Automation test:</strong></p>\n<ol>\n<li><a href=\"https://github.com/Expensify/WindowsPhoneTestFramework\" target=\"_blank\" rel=\"external\">Expensify/WindowsPhoneTestFramework</a></li>\n<li><a href=\"http://www.slideshare.net/cirrious/ui-testing-on-windows-phone\" target=\"_blank\" rel=\"external\">UI Testing on Windows Phone 7</a></li>\n<li><a href=\"http://www.cnblogs.com/chenkai/tag/Windows%20Phone/\" target=\"_blank\" rel=\"external\">Windows Phone应用开发</a></li>\n</ol>\n<p><strong>Suggestions for development:</strong></p>\n<ol>\n<li>WindowsPhone app use MVVM pattern: M is Model, it controls the data and events; V is View, which controls the display; and VM is View-Model, which is the bridge from Model to View.</li>\n<li>A better way to design the app is heavily use M and VM, with light V. So that we can test the app easily and quickly, with stub and mock, rather than heavy UI tests.</li>\n<li>A tool recommended is MVVM light, check the references from <a href=\"http://mvvmlight.codeplex.com/\" target=\"_blank\" rel=\"external\">http://mvvmlight.codeplex.com/</a> and <a href=\"http://www.galasoft.ch/mvvm/\" target=\"_blank\" rel=\"external\">http://www.galasoft.ch/mvvm/</a>.</li>\n</ol>\n<p><strong>Problem encountered:</strong></p>\n<p>The development of WhindowsPhone app is quite easy (please refer to <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/WP7App.zip\" target=\"_blank\" rel=\"external\">this</a>, it’s a basic WP7 app), but for automation testing, especially UI testing, it’s the opposite.</p>\n<p>When using WindowsPhoneTestFramework, following the steps in video of <a href=\"http://www.slideshare.net/cirrious/ui-testing-on-windows-phone\" target=\"_blank\" rel=\"external\">Ui Testing on Windows Phone</a>, the step of install BDD class library show error of JsonValue 0.5.0 can’t be installed, even try to install JsonValue 0.6.0 still fails.</p>\n<p>I am blocked by this. No clue found.</p>\n"},{"title":"用户测试User Testing在项目中的实践","date":"2013-01-27T13:00:00.000Z","comments":1,"_content":"\n本项目是对于养老金进行管理和投资的一个网站。\n\n以往大家对于养老金甚至银行的看法是守旧和难于打交道，他们的网站也是一样的糟糕。而恰恰是这一点，被我们当做是自己做有可能解决和成功的关键。\n\n为此，我们设计了Gamification（游戏化），并通过User Testing来检验整个系统的易用性。Gamification本身也是需要通过User Testing来验证的。\n\n![网站界面](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/User_Testing.png)\n\n对于User Testing，我们是在项目初期，就邀请用户参与（当然会发放一下小礼品或者现金），来了解用户对于产品的接受程度。这对我们很重要，因为养老金的用户覆盖范围比较广，从15岁到70岁，我们主要针对的是年轻的客户，同时也需要兼顾老年用户。\n\n我们基本上会每一个月或两个月进行一次User Testing，以确定我们的方向是正确的；在项目初期User Testing的频率会更高。\n\n在User Testing的初期，选择用户也是很关键的，因为我们需要让选择的用户对实际的目标客户有好的覆盖，也需要针对不同的User Testing侧重点选择有针对性的用户。（选择新的用户vs邀请以前参与过测试的用户；选择对产品一点都不了解的客户vs邀请对产品基本概念有一定了解的用户vs产品专家。。。）\n\n在测试过程中，我们最好能控制自己去协助用户进行操作的冲动，所以最好是留一个人，甚至是不留人和用户一起测试，而是通过视频等手段来记录用户行为（同时通过摄像头来录制用户的表情也是很有帮助的）。\n\n在测试结束后，需要让用户对产品进行反馈，并协助进行总结和归纳。\n\n我们在测试结束后，还需要对所有的反馈进行分析和整理，以确定对于项目的影响以及我们对应的行动。\n\nP.S. 测试人员的选择可以不仅是那些定期地User Testing的用户，也可以是项目组或者办公室的同事，能更多更频繁地提供反馈。我们在圣诞节时尝试让在用户所在地的成员把User Testing的脚本打印出来，拿回家让家里的长辈帮助测试。因为对家人的了解程度更高，这对我们针对反馈进行的行动提供了更多的信息和依据。\n\nGamification的wiki:http://en.wikipedia.org/wiki/Gamification 以及个人觉得比较好的中文解释: http://ucdchina.com/snap/9587","source":"_posts/UserTesting_In_Project.md","raw":"title: 用户测试User Testing在项目中的实践\ndate: 2013-01-28\ncategories:\n- Test\ntags:\n- User Testing\n- Practice\ncomments: true\n---\n\n本项目是对于养老金进行管理和投资的一个网站。\n\n以往大家对于养老金甚至银行的看法是守旧和难于打交道，他们的网站也是一样的糟糕。而恰恰是这一点，被我们当做是自己做有可能解决和成功的关键。\n\n为此，我们设计了Gamification（游戏化），并通过User Testing来检验整个系统的易用性。Gamification本身也是需要通过User Testing来验证的。\n\n![网站界面](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/User_Testing.png)\n\n对于User Testing，我们是在项目初期，就邀请用户参与（当然会发放一下小礼品或者现金），来了解用户对于产品的接受程度。这对我们很重要，因为养老金的用户覆盖范围比较广，从15岁到70岁，我们主要针对的是年轻的客户，同时也需要兼顾老年用户。\n\n我们基本上会每一个月或两个月进行一次User Testing，以确定我们的方向是正确的；在项目初期User Testing的频率会更高。\n\n在User Testing的初期，选择用户也是很关键的，因为我们需要让选择的用户对实际的目标客户有好的覆盖，也需要针对不同的User Testing侧重点选择有针对性的用户。（选择新的用户vs邀请以前参与过测试的用户；选择对产品一点都不了解的客户vs邀请对产品基本概念有一定了解的用户vs产品专家。。。）\n\n在测试过程中，我们最好能控制自己去协助用户进行操作的冲动，所以最好是留一个人，甚至是不留人和用户一起测试，而是通过视频等手段来记录用户行为（同时通过摄像头来录制用户的表情也是很有帮助的）。\n\n在测试结束后，需要让用户对产品进行反馈，并协助进行总结和归纳。\n\n我们在测试结束后，还需要对所有的反馈进行分析和整理，以确定对于项目的影响以及我们对应的行动。\n\nP.S. 测试人员的选择可以不仅是那些定期地User Testing的用户，也可以是项目组或者办公室的同事，能更多更频繁地提供反馈。我们在圣诞节时尝试让在用户所在地的成员把User Testing的脚本打印出来，拿回家让家里的长辈帮助测试。因为对家人的了解程度更高，这对我们针对反馈进行的行动提供了更多的信息和依据。\n\nGamification的wiki:http://en.wikipedia.org/wiki/Gamification 以及个人觉得比较好的中文解释: http://ucdchina.com/snap/9587","slug":"UserTesting_In_Project","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu4y001ny73n63c5g55w","layout":"post","photos":[],"link":"","content":"<p>本项目是对于养老金进行管理和投资的一个网站。</p>\n<p>以往大家对于养老金甚至银行的看法是守旧和难于打交道，他们的网站也是一样的糟糕。而恰恰是这一点，被我们当做是自己做有可能解决和成功的关键。</p>\n<p>为此，我们设计了Gamification（游戏化），并通过User Testing来检验整个系统的易用性。Gamification本身也是需要通过User Testing来验证的。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/User_Testing.png\" alt=\"网站界面\"></p>\n<p>对于User Testing，我们是在项目初期，就邀请用户参与（当然会发放一下小礼品或者现金），来了解用户对于产品的接受程度。这对我们很重要，因为养老金的用户覆盖范围比较广，从15岁到70岁，我们主要针对的是年轻的客户，同时也需要兼顾老年用户。</p>\n<p>我们基本上会每一个月或两个月进行一次User Testing，以确定我们的方向是正确的；在项目初期User Testing的频率会更高。</p>\n<p>在User Testing的初期，选择用户也是很关键的，因为我们需要让选择的用户对实际的目标客户有好的覆盖，也需要针对不同的User Testing侧重点选择有针对性的用户。（选择新的用户vs邀请以前参与过测试的用户；选择对产品一点都不了解的客户vs邀请对产品基本概念有一定了解的用户vs产品专家。。。）</p>\n<p>在测试过程中，我们最好能控制自己去协助用户进行操作的冲动，所以最好是留一个人，甚至是不留人和用户一起测试，而是通过视频等手段来记录用户行为（同时通过摄像头来录制用户的表情也是很有帮助的）。</p>\n<p>在测试结束后，需要让用户对产品进行反馈，并协助进行总结和归纳。</p>\n<p>我们在测试结束后，还需要对所有的反馈进行分析和整理，以确定对于项目的影响以及我们对应的行动。</p>\n<p>P.S. 测试人员的选择可以不仅是那些定期地User Testing的用户，也可以是项目组或者办公室的同事，能更多更频繁地提供反馈。我们在圣诞节时尝试让在用户所在地的成员把User Testing的脚本打印出来，拿回家让家里的长辈帮助测试。因为对家人的了解程度更高，这对我们针对反馈进行的行动提供了更多的信息和依据。</p>\n<p>Gamification的wiki:<a href=\"http://en.wikipedia.org/wiki/Gamification\" target=\"_blank\" rel=\"external\">http://en.wikipedia.org/wiki/Gamification</a> 以及个人觉得比较好的中文解释: <a href=\"http://ucdchina.com/snap/9587\" target=\"_blank\" rel=\"external\">http://ucdchina.com/snap/9587</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本项目是对于养老金进行管理和投资的一个网站。</p>\n<p>以往大家对于养老金甚至银行的看法是守旧和难于打交道，他们的网站也是一样的糟糕。而恰恰是这一点，被我们当做是自己做有可能解决和成功的关键。</p>\n<p>为此，我们设计了Gamification（游戏化），并通过User Testing来检验整个系统的易用性。Gamification本身也是需要通过User Testing来验证的。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/User_Testing.png\" alt=\"网站界面\"></p>\n<p>对于User Testing，我们是在项目初期，就邀请用户参与（当然会发放一下小礼品或者现金），来了解用户对于产品的接受程度。这对我们很重要，因为养老金的用户覆盖范围比较广，从15岁到70岁，我们主要针对的是年轻的客户，同时也需要兼顾老年用户。</p>\n<p>我们基本上会每一个月或两个月进行一次User Testing，以确定我们的方向是正确的；在项目初期User Testing的频率会更高。</p>\n<p>在User Testing的初期，选择用户也是很关键的，因为我们需要让选择的用户对实际的目标客户有好的覆盖，也需要针对不同的User Testing侧重点选择有针对性的用户。（选择新的用户vs邀请以前参与过测试的用户；选择对产品一点都不了解的客户vs邀请对产品基本概念有一定了解的用户vs产品专家。。。）</p>\n<p>在测试过程中，我们最好能控制自己去协助用户进行操作的冲动，所以最好是留一个人，甚至是不留人和用户一起测试，而是通过视频等手段来记录用户行为（同时通过摄像头来录制用户的表情也是很有帮助的）。</p>\n<p>在测试结束后，需要让用户对产品进行反馈，并协助进行总结和归纳。</p>\n<p>我们在测试结束后，还需要对所有的反馈进行分析和整理，以确定对于项目的影响以及我们对应的行动。</p>\n<p>P.S. 测试人员的选择可以不仅是那些定期地User Testing的用户，也可以是项目组或者办公室的同事，能更多更频繁地提供反馈。我们在圣诞节时尝试让在用户所在地的成员把User Testing的脚本打印出来，拿回家让家里的长辈帮助测试。因为对家人的了解程度更高，这对我们针对反馈进行的行动提供了更多的信息和依据。</p>\n<p>Gamification的wiki:<a href=\"http://en.wikipedia.org/wiki/Gamification\" target=\"_blank\" rel=\"external\">http://en.wikipedia.org/wiki/Gamification</a> 以及个人觉得比较好的中文解释: <a href=\"http://ucdchina.com/snap/9587\" target=\"_blank\" rel=\"external\">http://ucdchina.com/snap/9587</a></p>\n"},{"title":"演讲技巧","date":"2015-06-09T14:00:00.000Z","comments":1,"_content":"\n##演讲的实用技巧\n****\n###内容准备\n1. 熟悉内容\n\n    *演讲最先需要准备的就是内容。只有保证了内容的吸引力，才会有观众，才会需要准备后续的内容。*\n2. ⽇程\n\n    *在演讲一开始，就需要明确告诉观众大致的流程，这样便于观众快速确定听的重点，也能让观众在走神的时候快速切换到正在演讲的内容。*\n3. 图⽚\n\n    *在一般的场合，演讲的材料最好以图片为主，避免过多的文字对于观众注意力的干扰。*\n4. 字体\n\n    *为了保证所有观众都能准确无误地接收到演讲的内容，需要在准备时调整字体大小，让即使最后一排的观众都能看得清楚。*\n5. 备忘\n \n    *演讲不可避免需要做一些备忘。这样可以在必要时提示演讲者。*\n    \n###演讲中\n1. 站位\n\n    *大部分的演讲现在都会录制视频，在会后分享。一定要注意自己的站位不要阻挡摄像机，也需要让摄像机能拍摄到自己。同时还需要注意自己的手势有可能也会影响视频效果。*\n2. 与观众交流\n\n    *如果不是特意锻炼过，任何人在演讲的时候都或多或少会紧张。观众不仅可以是紧张的来源，也可以通过寻求观众中赞同的观点和眼神，来缓解自己的紧张感，更好地发挥。同样也包括和观众进行问答等互动，增强观众的参与度，让演讲更生动。*\n3. 不要读ppt内容\n\n    *没有人愿意在现场听人读稿子，如果这样，不如省下这些时间，在会后看分享的资料就好了。而如果在准备阶段，演讲稿大部分是图片，也没有太多机会陷入这个问题之中。*\n4. 适当的停顿\n\n    *适当的停顿是为了保证所有观众都能理解到演讲的重点，也让观众有时间去思考和消化相关的内容。*\n5. 语调\n \n    *语调的变化可以唤起观众的注意力，对于把走神的观众拉回演讲中很有帮助。同理还有反复强调某一内容*\n6. 肢体语⾔\n \n    *肢体语言不仅是表达内容的一个方式，能让演讲形势更加丰富，也可以让演讲者更自然地进行表达。*\n\n###回答问题\n1. 基于⾃⼰的实践\n\n    *不少人都觉得谈项目实践会误导别人，毕竟项目情况是不一样的。其实大可不必，只需要适当介绍项目背景和执行具体实践的背景就可以了。大部分观众都想了解别人是如何做事的，从而给自己启发，自然项目实践会更贴近于观众的实际工作，更具有借鉴意义。*\n2. 解决具体的问题，⽽不是⽅法论\n\n    *很多人觉得对于观众的问题，需要提供大一统的解决方案，概括性地从根本解决观众的问题。实际项目中没有一个方法是银弹，所以更需要告诉观众每种解决方案都是有其特定的使用场景的。回答问题时需要更具体，更基于实践，而不是空洞的理论。*\n3. 重复问题，得到确认\n\n    *如果问题比较复杂，在回答观众提问之前，需要根据自己的理解重新描述问题，确保观众提问的和自己回答的是同一个问题。*\n4. 详细说明会很占⽤时间，下来⼀起讨论\n\n    *如果观众的问题太过于细节，同时需要更多的背景知识才能进行探讨，亦或是问题和主题不太相关，大多数人不关心，则可以向提问者提出等演讲结束，可以有更多时间一起深入问题进行探讨。*\n    \n###演讲后\n1. 根据反馈更新内容\n\n    *演讲之后除了搜集对于自己演讲的反馈之外，还需要根据观众的反馈，适度调整演讲稿的内容。这样对于之后的分享和演讲都很有帮助。*\n2. 存档\n\n    *对于演讲稿和相关的资料，例如图片等，需要进行存档，便于之后的查询和检索。*\n3. 对外分享时使⽤PDF\n\n    *对外分享的演讲稿，需要使用PDF的格式，尤其是演讲稿带有公司的logo的情形。*\n\n[Speaking_Skills.pdf](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Speaking_Skills.pdf)","source":"_posts/Speaking_Skills.md","raw":"title: 演讲技巧\ndate: 2015-06-10\ncategories:\n- Test\ntags:\n- Speaking\n- Skills\ncomments: true\n---\n\n##演讲的实用技巧\n****\n###内容准备\n1. 熟悉内容\n\n    *演讲最先需要准备的就是内容。只有保证了内容的吸引力，才会有观众，才会需要准备后续的内容。*\n2. ⽇程\n\n    *在演讲一开始，就需要明确告诉观众大致的流程，这样便于观众快速确定听的重点，也能让观众在走神的时候快速切换到正在演讲的内容。*\n3. 图⽚\n\n    *在一般的场合，演讲的材料最好以图片为主，避免过多的文字对于观众注意力的干扰。*\n4. 字体\n\n    *为了保证所有观众都能准确无误地接收到演讲的内容，需要在准备时调整字体大小，让即使最后一排的观众都能看得清楚。*\n5. 备忘\n \n    *演讲不可避免需要做一些备忘。这样可以在必要时提示演讲者。*\n    \n###演讲中\n1. 站位\n\n    *大部分的演讲现在都会录制视频，在会后分享。一定要注意自己的站位不要阻挡摄像机，也需要让摄像机能拍摄到自己。同时还需要注意自己的手势有可能也会影响视频效果。*\n2. 与观众交流\n\n    *如果不是特意锻炼过，任何人在演讲的时候都或多或少会紧张。观众不仅可以是紧张的来源，也可以通过寻求观众中赞同的观点和眼神，来缓解自己的紧张感，更好地发挥。同样也包括和观众进行问答等互动，增强观众的参与度，让演讲更生动。*\n3. 不要读ppt内容\n\n    *没有人愿意在现场听人读稿子，如果这样，不如省下这些时间，在会后看分享的资料就好了。而如果在准备阶段，演讲稿大部分是图片，也没有太多机会陷入这个问题之中。*\n4. 适当的停顿\n\n    *适当的停顿是为了保证所有观众都能理解到演讲的重点，也让观众有时间去思考和消化相关的内容。*\n5. 语调\n \n    *语调的变化可以唤起观众的注意力，对于把走神的观众拉回演讲中很有帮助。同理还有反复强调某一内容*\n6. 肢体语⾔\n \n    *肢体语言不仅是表达内容的一个方式，能让演讲形势更加丰富，也可以让演讲者更自然地进行表达。*\n\n###回答问题\n1. 基于⾃⼰的实践\n\n    *不少人都觉得谈项目实践会误导别人，毕竟项目情况是不一样的。其实大可不必，只需要适当介绍项目背景和执行具体实践的背景就可以了。大部分观众都想了解别人是如何做事的，从而给自己启发，自然项目实践会更贴近于观众的实际工作，更具有借鉴意义。*\n2. 解决具体的问题，⽽不是⽅法论\n\n    *很多人觉得对于观众的问题，需要提供大一统的解决方案，概括性地从根本解决观众的问题。实际项目中没有一个方法是银弹，所以更需要告诉观众每种解决方案都是有其特定的使用场景的。回答问题时需要更具体，更基于实践，而不是空洞的理论。*\n3. 重复问题，得到确认\n\n    *如果问题比较复杂，在回答观众提问之前，需要根据自己的理解重新描述问题，确保观众提问的和自己回答的是同一个问题。*\n4. 详细说明会很占⽤时间，下来⼀起讨论\n\n    *如果观众的问题太过于细节，同时需要更多的背景知识才能进行探讨，亦或是问题和主题不太相关，大多数人不关心，则可以向提问者提出等演讲结束，可以有更多时间一起深入问题进行探讨。*\n    \n###演讲后\n1. 根据反馈更新内容\n\n    *演讲之后除了搜集对于自己演讲的反馈之外，还需要根据观众的反馈，适度调整演讲稿的内容。这样对于之后的分享和演讲都很有帮助。*\n2. 存档\n\n    *对于演讲稿和相关的资料，例如图片等，需要进行存档，便于之后的查询和检索。*\n3. 对外分享时使⽤PDF\n\n    *对外分享的演讲稿，需要使用PDF的格式，尤其是演讲稿带有公司的logo的情形。*\n\n[Speaking_Skills.pdf](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Speaking_Skills.pdf)","slug":"Speaking_Skills","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu50001ty73nn97vgf8y","layout":"post","photos":[],"link":"","content":"<h2 id=\"演讲的实用技巧\">演讲的实用技巧</h2><hr>\n<h3 id=\"内容准备\">内容准备</h3><ol>\n<li><p>熟悉内容</p>\n<p> <em>演讲最先需要准备的就是内容。只有保证了内容的吸引力，才会有观众，才会需要准备后续的内容。</em></p>\n</li>\n<li><p>⽇程</p>\n<p> <em>在演讲一开始，就需要明确告诉观众大致的流程，这样便于观众快速确定听的重点，也能让观众在走神的时候快速切换到正在演讲的内容。</em></p>\n</li>\n<li><p>图⽚</p>\n<p> <em>在一般的场合，演讲的材料最好以图片为主，避免过多的文字对于观众注意力的干扰。</em></p>\n</li>\n<li><p>字体</p>\n<p> <em>为了保证所有观众都能准确无误地接收到演讲的内容，需要在准备时调整字体大小，让即使最后一排的观众都能看得清楚。</em></p>\n</li>\n<li><p>备忘</p>\n<p> <em>演讲不可避免需要做一些备忘。这样可以在必要时提示演讲者。</em></p>\n</li>\n</ol>\n<h3 id=\"演讲中\">演讲中</h3><ol>\n<li><p>站位</p>\n<p> <em>大部分的演讲现在都会录制视频，在会后分享。一定要注意自己的站位不要阻挡摄像机，也需要让摄像机能拍摄到自己。同时还需要注意自己的手势有可能也会影响视频效果。</em></p>\n</li>\n<li><p>与观众交流</p>\n<p> <em>如果不是特意锻炼过，任何人在演讲的时候都或多或少会紧张。观众不仅可以是紧张的来源，也可以通过寻求观众中赞同的观点和眼神，来缓解自己的紧张感，更好地发挥。同样也包括和观众进行问答等互动，增强观众的参与度，让演讲更生动。</em></p>\n</li>\n<li><p>不要读ppt内容</p>\n<p> <em>没有人愿意在现场听人读稿子，如果这样，不如省下这些时间，在会后看分享的资料就好了。而如果在准备阶段，演讲稿大部分是图片，也没有太多机会陷入这个问题之中。</em></p>\n</li>\n<li><p>适当的停顿</p>\n<p> <em>适当的停顿是为了保证所有观众都能理解到演讲的重点，也让观众有时间去思考和消化相关的内容。</em></p>\n</li>\n<li><p>语调</p>\n<p> <em>语调的变化可以唤起观众的注意力，对于把走神的观众拉回演讲中很有帮助。同理还有反复强调某一内容</em></p>\n</li>\n<li><p>肢体语⾔</p>\n<p> <em>肢体语言不仅是表达内容的一个方式，能让演讲形势更加丰富，也可以让演讲者更自然地进行表达。</em></p>\n</li>\n</ol>\n<h3 id=\"回答问题\">回答问题</h3><ol>\n<li><p>基于⾃⼰的实践</p>\n<p> <em>不少人都觉得谈项目实践会误导别人，毕竟项目情况是不一样的。其实大可不必，只需要适当介绍项目背景和执行具体实践的背景就可以了。大部分观众都想了解别人是如何做事的，从而给自己启发，自然项目实践会更贴近于观众的实际工作，更具有借鉴意义。</em></p>\n</li>\n<li><p>解决具体的问题，⽽不是⽅法论</p>\n<p> <em>很多人觉得对于观众的问题，需要提供大一统的解决方案，概括性地从根本解决观众的问题。实际项目中没有一个方法是银弹，所以更需要告诉观众每种解决方案都是有其特定的使用场景的。回答问题时需要更具体，更基于实践，而不是空洞的理论。</em></p>\n</li>\n<li><p>重复问题，得到确认</p>\n<p> <em>如果问题比较复杂，在回答观众提问之前，需要根据自己的理解重新描述问题，确保观众提问的和自己回答的是同一个问题。</em></p>\n</li>\n<li><p>详细说明会很占⽤时间，下来⼀起讨论</p>\n<p> <em>如果观众的问题太过于细节，同时需要更多的背景知识才能进行探讨，亦或是问题和主题不太相关，大多数人不关心，则可以向提问者提出等演讲结束，可以有更多时间一起深入问题进行探讨。</em></p>\n</li>\n</ol>\n<h3 id=\"演讲后\">演讲后</h3><ol>\n<li><p>根据反馈更新内容</p>\n<p> <em>演讲之后除了搜集对于自己演讲的反馈之外，还需要根据观众的反馈，适度调整演讲稿的内容。这样对于之后的分享和演讲都很有帮助。</em></p>\n</li>\n<li><p>存档</p>\n<p> <em>对于演讲稿和相关的资料，例如图片等，需要进行存档，便于之后的查询和检索。</em></p>\n</li>\n<li><p>对外分享时使⽤PDF</p>\n<p> <em>对外分享的演讲稿，需要使用PDF的格式，尤其是演讲稿带有公司的logo的情形。</em></p>\n</li>\n</ol>\n<p><a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Speaking_Skills.pdf\" target=\"_blank\" rel=\"external\">Speaking_Skills.pdf</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"演讲的实用技巧\">演讲的实用技巧</h2><hr>\n<h3 id=\"内容准备\">内容准备</h3><ol>\n<li><p>熟悉内容</p>\n<p> <em>演讲最先需要准备的就是内容。只有保证了内容的吸引力，才会有观众，才会需要准备后续的内容。</em></p>\n</li>\n<li><p>⽇程</p>\n<p> <em>在演讲一开始，就需要明确告诉观众大致的流程，这样便于观众快速确定听的重点，也能让观众在走神的时候快速切换到正在演讲的内容。</em></p>\n</li>\n<li><p>图⽚</p>\n<p> <em>在一般的场合，演讲的材料最好以图片为主，避免过多的文字对于观众注意力的干扰。</em></p>\n</li>\n<li><p>字体</p>\n<p> <em>为了保证所有观众都能准确无误地接收到演讲的内容，需要在准备时调整字体大小，让即使最后一排的观众都能看得清楚。</em></p>\n</li>\n<li><p>备忘</p>\n<p> <em>演讲不可避免需要做一些备忘。这样可以在必要时提示演讲者。</em></p>\n</li>\n</ol>\n<h3 id=\"演讲中\">演讲中</h3><ol>\n<li><p>站位</p>\n<p> <em>大部分的演讲现在都会录制视频，在会后分享。一定要注意自己的站位不要阻挡摄像机，也需要让摄像机能拍摄到自己。同时还需要注意自己的手势有可能也会影响视频效果。</em></p>\n</li>\n<li><p>与观众交流</p>\n<p> <em>如果不是特意锻炼过，任何人在演讲的时候都或多或少会紧张。观众不仅可以是紧张的来源，也可以通过寻求观众中赞同的观点和眼神，来缓解自己的紧张感，更好地发挥。同样也包括和观众进行问答等互动，增强观众的参与度，让演讲更生动。</em></p>\n</li>\n<li><p>不要读ppt内容</p>\n<p> <em>没有人愿意在现场听人读稿子，如果这样，不如省下这些时间，在会后看分享的资料就好了。而如果在准备阶段，演讲稿大部分是图片，也没有太多机会陷入这个问题之中。</em></p>\n</li>\n<li><p>适当的停顿</p>\n<p> <em>适当的停顿是为了保证所有观众都能理解到演讲的重点，也让观众有时间去思考和消化相关的内容。</em></p>\n</li>\n<li><p>语调</p>\n<p> <em>语调的变化可以唤起观众的注意力，对于把走神的观众拉回演讲中很有帮助。同理还有反复强调某一内容</em></p>\n</li>\n<li><p>肢体语⾔</p>\n<p> <em>肢体语言不仅是表达内容的一个方式，能让演讲形势更加丰富，也可以让演讲者更自然地进行表达。</em></p>\n</li>\n</ol>\n<h3 id=\"回答问题\">回答问题</h3><ol>\n<li><p>基于⾃⼰的实践</p>\n<p> <em>不少人都觉得谈项目实践会误导别人，毕竟项目情况是不一样的。其实大可不必，只需要适当介绍项目背景和执行具体实践的背景就可以了。大部分观众都想了解别人是如何做事的，从而给自己启发，自然项目实践会更贴近于观众的实际工作，更具有借鉴意义。</em></p>\n</li>\n<li><p>解决具体的问题，⽽不是⽅法论</p>\n<p> <em>很多人觉得对于观众的问题，需要提供大一统的解决方案，概括性地从根本解决观众的问题。实际项目中没有一个方法是银弹，所以更需要告诉观众每种解决方案都是有其特定的使用场景的。回答问题时需要更具体，更基于实践，而不是空洞的理论。</em></p>\n</li>\n<li><p>重复问题，得到确认</p>\n<p> <em>如果问题比较复杂，在回答观众提问之前，需要根据自己的理解重新描述问题，确保观众提问的和自己回答的是同一个问题。</em></p>\n</li>\n<li><p>详细说明会很占⽤时间，下来⼀起讨论</p>\n<p> <em>如果观众的问题太过于细节，同时需要更多的背景知识才能进行探讨，亦或是问题和主题不太相关，大多数人不关心，则可以向提问者提出等演讲结束，可以有更多时间一起深入问题进行探讨。</em></p>\n</li>\n</ol>\n<h3 id=\"演讲后\">演讲后</h3><ol>\n<li><p>根据反馈更新内容</p>\n<p> <em>演讲之后除了搜集对于自己演讲的反馈之外，还需要根据观众的反馈，适度调整演讲稿的内容。这样对于之后的分享和演讲都很有帮助。</em></p>\n</li>\n<li><p>存档</p>\n<p> <em>对于演讲稿和相关的资料，例如图片等，需要进行存档，便于之后的查询和检索。</em></p>\n</li>\n<li><p>对外分享时使⽤PDF</p>\n<p> <em>对外分享的演讲稿，需要使用PDF的格式，尤其是演讲稿带有公司的logo的情形。</em></p>\n</li>\n</ol>\n<p><a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Speaking_Skills.pdf\" target=\"_blank\" rel=\"external\">Speaking_Skills.pdf</a></p>\n"},{"title":"Security Testing of Web Applications","date":"2012-02-20T13:00:00.000Z","comments":1,"_content":"\nThis representation is more theoretical, but I think we can have some basic knowledge from it.\n\n[Security_Testing_Of_Web_Applications.ppdf](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Security_Testing_Of_Web_Applications.pdf)","source":"_posts/Security_Testing_Of_Web_Applications.md","raw":"title: Security Testing of Web Applications\ndate: 2012-02-21\ncategories:\n- Testing\ntags:\n- Security\n- Web\ncomments: true\n---\n\nThis representation is more theoretical, but I think we can have some basic knowledge from it.\n\n[Security_Testing_Of_Web_Applications.ppdf](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Security_Testing_Of_Web_Applications.pdf)","slug":"Security_Testing_Of_Web_Applications","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu52001zy73nrm1kdkvr","layout":"post","photos":[],"link":"","content":"<p>This representation is more theoretical, but I think we can have some basic knowledge from it.</p>\n<p><a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Security_Testing_Of_Web_Applications.pdf\" target=\"_blank\" rel=\"external\">Security_Testing_Of_Web_Applications.ppdf</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>This representation is more theoretical, but I think we can have some basic knowledge from it.</p>\n<p><a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Security_Testing_Of_Web_Applications.pdf\" target=\"_blank\" rel=\"external\">Security_Testing_Of_Web_Applications.ppdf</a></p>\n"},{"title":"QA Capability Matrix","date":"2012-02-02T13:00:00.000Z","comments":1,"_content":"\nPlan to use QA Capability Matrix to track my progress.\n\n![QA Capability Matrix](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/QA_Capability_Matrix.png)\n\n[Sample](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/QA_Capability_Matrix.pdf) is also attached.","source":"_posts/QA_Capability_Matrix.md","raw":"title: QA Capability Matrix\ndate: 2012-02-03\ncategories:\n- Tester\ntags:\n- Capability\n- Matrix\ncomments: true\n---\n\nPlan to use QA Capability Matrix to track my progress.\n\n![QA Capability Matrix](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/QA_Capability_Matrix.png)\n\n[Sample](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/QA_Capability_Matrix.pdf) is also attached.","slug":"QA_Capability_Matrix","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu530025y73n8scf2sf8","layout":"post","photos":[],"link":"","content":"<p>Plan to use QA Capability Matrix to track my progress.</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/QA_Capability_Matrix.png\" alt=\"QA Capability Matrix\"></p>\n<p><a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/QA_Capability_Matrix.pdf\" target=\"_blank\" rel=\"external\">Sample</a> is also attached.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Plan to use QA Capability Matrix to track my progress.</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/QA_Capability_Matrix.png\" alt=\"QA Capability Matrix\"></p>\n<p><a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/QA_Capability_Matrix.pdf\" target=\"_blank\" rel=\"external\">Sample</a> is also attached.</p>\n"},{"title":"项目中可以采用的一些实践","date":"2011-09-28T14:00:00.000Z","comments":1,"_content":"\n最近总结了下在项目中采用的一些实践，以及一些需要注意和避免的细节问题\n\n1. QA完成故事测试时鼓掌等对团队正面反馈的一些实践（让团队更注重项目整体的进度并加强责任感），甚至可能包括一些团队建设的活动\n2. 每天的Code Review，最好QA也能参与，让整个团队都能从业务和代码层面有统一、整体的认识\n3. 在故事正式开始开发之前，不仅仅写好测试场景和用例，最好能写明自动化测试的场景，对于回归测试和对故事的认识都有更深入的了解\n4. 发布经理和迭代经理的轮替，能让更多团队成员接触敏捷开发流程上的各方面，对增强团队责任感和对流程的理解有不少帮助\n5. 多了解客户组织架构以及对客户的影响，分析在不同的情况下找哪个最合适的人来解决问题；同时需要多和客户沟通，加强个人的影响力，多方面加强与客户之间的关系\n6. 更好地了解和分析客户的业务模式及需求，不仅仅是从单个故事的角度提出我们的建议，而是从更高的层级提供分析以实现更多的业务价值\n7. 尝试用Ruby配合Cucumber搭建自动化测试环境，因为像使用cuke4duke配合Java这种实现方式，增加了中间插件自身的限制对于测试框架的影响；以及需要单独的测试环境和数据库\n8. 更频繁地和客户进行周期性的反馈（至少一个月一次），以及更频繁的团队内部的一对一的交流和反馈\n9. 合理的分配时间，控制同时参加活动的数量，保持精力的充沛\n10. 加强和客户，以及其他团队的沟通，制定更好的沟通计划（定期，有明确的接口人）\n11. 对于新人，尤其是QA的培训，可以分层次，采用技能矩阵的方法来制定比较详细的计划，想办法让他们保持积极性；可以建议每6个月换一下项目，加强 项目组和办公室之间的联系；对于新人的项目介绍和培训也需要系统化\n12. 加强团队成员的质量意识，开发帮忙测试，交换开发和测试的职责，让团队成员自己使用和测试系统；团队成员共享向客户演示的职责\n13. 增加测试覆盖率的可视化（手动以及自动化测试)，并进行分析\n14. 根据模块、功能、实际的每一天进行缺陷等测试的分析\n15. 在对客户演示之后进行反馈的总结，以帮助进行后续分析和开发的指导（迭代演示和故事卡演示）\n16. 不要急于沟通，可以沉淀一下，对问题有清晰的认识以后，避免自己情绪的干扰，再进行沟通；更多地使用电话等即时沟通的方式；多使用图片等直观的形式\n17. 通过不同的形式使故事卡、团队、迭代的进度更可视化\n18. 有急事时通知团队做好相应的处理\n19. 尽量避免打扰其他团队成员的工作\n20. 坐的位置最好能覆盖不同的结对的开发人员，加强相互之间的沟通\n21. 合理调节故事大小（包括技术故事），保证每天都有故事完成，增强团队的成就感","source":"_posts/Practices_Can_Be_Adopted_In_Projects.md","raw":"title: 项目中可以采用的一些实践\ndate: 2011-09-29\ncategories:\n- Tester\ntags:\n- Practice\n- Retro\ncomments: true\n---\n\n最近总结了下在项目中采用的一些实践，以及一些需要注意和避免的细节问题\n\n1. QA完成故事测试时鼓掌等对团队正面反馈的一些实践（让团队更注重项目整体的进度并加强责任感），甚至可能包括一些团队建设的活动\n2. 每天的Code Review，最好QA也能参与，让整个团队都能从业务和代码层面有统一、整体的认识\n3. 在故事正式开始开发之前，不仅仅写好测试场景和用例，最好能写明自动化测试的场景，对于回归测试和对故事的认识都有更深入的了解\n4. 发布经理和迭代经理的轮替，能让更多团队成员接触敏捷开发流程上的各方面，对增强团队责任感和对流程的理解有不少帮助\n5. 多了解客户组织架构以及对客户的影响，分析在不同的情况下找哪个最合适的人来解决问题；同时需要多和客户沟通，加强个人的影响力，多方面加强与客户之间的关系\n6. 更好地了解和分析客户的业务模式及需求，不仅仅是从单个故事的角度提出我们的建议，而是从更高的层级提供分析以实现更多的业务价值\n7. 尝试用Ruby配合Cucumber搭建自动化测试环境，因为像使用cuke4duke配合Java这种实现方式，增加了中间插件自身的限制对于测试框架的影响；以及需要单独的测试环境和数据库\n8. 更频繁地和客户进行周期性的反馈（至少一个月一次），以及更频繁的团队内部的一对一的交流和反馈\n9. 合理的分配时间，控制同时参加活动的数量，保持精力的充沛\n10. 加强和客户，以及其他团队的沟通，制定更好的沟通计划（定期，有明确的接口人）\n11. 对于新人，尤其是QA的培训，可以分层次，采用技能矩阵的方法来制定比较详细的计划，想办法让他们保持积极性；可以建议每6个月换一下项目，加强 项目组和办公室之间的联系；对于新人的项目介绍和培训也需要系统化\n12. 加强团队成员的质量意识，开发帮忙测试，交换开发和测试的职责，让团队成员自己使用和测试系统；团队成员共享向客户演示的职责\n13. 增加测试覆盖率的可视化（手动以及自动化测试)，并进行分析\n14. 根据模块、功能、实际的每一天进行缺陷等测试的分析\n15. 在对客户演示之后进行反馈的总结，以帮助进行后续分析和开发的指导（迭代演示和故事卡演示）\n16. 不要急于沟通，可以沉淀一下，对问题有清晰的认识以后，避免自己情绪的干扰，再进行沟通；更多地使用电话等即时沟通的方式；多使用图片等直观的形式\n17. 通过不同的形式使故事卡、团队、迭代的进度更可视化\n18. 有急事时通知团队做好相应的处理\n19. 尽量避免打扰其他团队成员的工作\n20. 坐的位置最好能覆盖不同的结对的开发人员，加强相互之间的沟通\n21. 合理调节故事大小（包括技术故事），保证每天都有故事完成，增强团队的成就感","slug":"Practices_Can_Be_Adopted_In_Projects","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu56002cy73nt70w3mgw","layout":"post","photos":[],"link":"","content":"<p>最近总结了下在项目中采用的一些实践，以及一些需要注意和避免的细节问题</p>\n<ol>\n<li>QA完成故事测试时鼓掌等对团队正面反馈的一些实践（让团队更注重项目整体的进度并加强责任感），甚至可能包括一些团队建设的活动</li>\n<li>每天的Code Review，最好QA也能参与，让整个团队都能从业务和代码层面有统一、整体的认识</li>\n<li>在故事正式开始开发之前，不仅仅写好测试场景和用例，最好能写明自动化测试的场景，对于回归测试和对故事的认识都有更深入的了解</li>\n<li>发布经理和迭代经理的轮替，能让更多团队成员接触敏捷开发流程上的各方面，对增强团队责任感和对流程的理解有不少帮助</li>\n<li>多了解客户组织架构以及对客户的影响，分析在不同的情况下找哪个最合适的人来解决问题；同时需要多和客户沟通，加强个人的影响力，多方面加强与客户之间的关系</li>\n<li>更好地了解和分析客户的业务模式及需求，不仅仅是从单个故事的角度提出我们的建议，而是从更高的层级提供分析以实现更多的业务价值</li>\n<li>尝试用Ruby配合Cucumber搭建自动化测试环境，因为像使用cuke4duke配合Java这种实现方式，增加了中间插件自身的限制对于测试框架的影响；以及需要单独的测试环境和数据库</li>\n<li>更频繁地和客户进行周期性的反馈（至少一个月一次），以及更频繁的团队内部的一对一的交流和反馈</li>\n<li>合理的分配时间，控制同时参加活动的数量，保持精力的充沛</li>\n<li>加强和客户，以及其他团队的沟通，制定更好的沟通计划（定期，有明确的接口人）</li>\n<li>对于新人，尤其是QA的培训，可以分层次，采用技能矩阵的方法来制定比较详细的计划，想办法让他们保持积极性；可以建议每6个月换一下项目，加强 项目组和办公室之间的联系；对于新人的项目介绍和培训也需要系统化</li>\n<li>加强团队成员的质量意识，开发帮忙测试，交换开发和测试的职责，让团队成员自己使用和测试系统；团队成员共享向客户演示的职责</li>\n<li>增加测试覆盖率的可视化（手动以及自动化测试)，并进行分析</li>\n<li>根据模块、功能、实际的每一天进行缺陷等测试的分析</li>\n<li>在对客户演示之后进行反馈的总结，以帮助进行后续分析和开发的指导（迭代演示和故事卡演示）</li>\n<li>不要急于沟通，可以沉淀一下，对问题有清晰的认识以后，避免自己情绪的干扰，再进行沟通；更多地使用电话等即时沟通的方式；多使用图片等直观的形式</li>\n<li>通过不同的形式使故事卡、团队、迭代的进度更可视化</li>\n<li>有急事时通知团队做好相应的处理</li>\n<li>尽量避免打扰其他团队成员的工作</li>\n<li>坐的位置最好能覆盖不同的结对的开发人员，加强相互之间的沟通</li>\n<li>合理调节故事大小（包括技术故事），保证每天都有故事完成，增强团队的成就感</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>最近总结了下在项目中采用的一些实践，以及一些需要注意和避免的细节问题</p>\n<ol>\n<li>QA完成故事测试时鼓掌等对团队正面反馈的一些实践（让团队更注重项目整体的进度并加强责任感），甚至可能包括一些团队建设的活动</li>\n<li>每天的Code Review，最好QA也能参与，让整个团队都能从业务和代码层面有统一、整体的认识</li>\n<li>在故事正式开始开发之前，不仅仅写好测试场景和用例，最好能写明自动化测试的场景，对于回归测试和对故事的认识都有更深入的了解</li>\n<li>发布经理和迭代经理的轮替，能让更多团队成员接触敏捷开发流程上的各方面，对增强团队责任感和对流程的理解有不少帮助</li>\n<li>多了解客户组织架构以及对客户的影响，分析在不同的情况下找哪个最合适的人来解决问题；同时需要多和客户沟通，加强个人的影响力，多方面加强与客户之间的关系</li>\n<li>更好地了解和分析客户的业务模式及需求，不仅仅是从单个故事的角度提出我们的建议，而是从更高的层级提供分析以实现更多的业务价值</li>\n<li>尝试用Ruby配合Cucumber搭建自动化测试环境，因为像使用cuke4duke配合Java这种实现方式，增加了中间插件自身的限制对于测试框架的影响；以及需要单独的测试环境和数据库</li>\n<li>更频繁地和客户进行周期性的反馈（至少一个月一次），以及更频繁的团队内部的一对一的交流和反馈</li>\n<li>合理的分配时间，控制同时参加活动的数量，保持精力的充沛</li>\n<li>加强和客户，以及其他团队的沟通，制定更好的沟通计划（定期，有明确的接口人）</li>\n<li>对于新人，尤其是QA的培训，可以分层次，采用技能矩阵的方法来制定比较详细的计划，想办法让他们保持积极性；可以建议每6个月换一下项目，加强 项目组和办公室之间的联系；对于新人的项目介绍和培训也需要系统化</li>\n<li>加强团队成员的质量意识，开发帮忙测试，交换开发和测试的职责，让团队成员自己使用和测试系统；团队成员共享向客户演示的职责</li>\n<li>增加测试覆盖率的可视化（手动以及自动化测试)，并进行分析</li>\n<li>根据模块、功能、实际的每一天进行缺陷等测试的分析</li>\n<li>在对客户演示之后进行反馈的总结，以帮助进行后续分析和开发的指导（迭代演示和故事卡演示）</li>\n<li>不要急于沟通，可以沉淀一下，对问题有清晰的认识以后，避免自己情绪的干扰，再进行沟通；更多地使用电话等即时沟通的方式；多使用图片等直观的形式</li>\n<li>通过不同的形式使故事卡、团队、迭代的进度更可视化</li>\n<li>有急事时通知团队做好相应的处理</li>\n<li>尽量避免打扰其他团队成员的工作</li>\n<li>坐的位置最好能覆盖不同的结对的开发人员，加强相互之间的沟通</li>\n<li>合理调节故事大小（包括技术故事），保证每天都有故事完成，增强团队的成就感</li>\n</ol>\n"},{"title":"QA能力列表在项目中的实践","date":"2012-12-02T13:00:00.000Z","comments":1,"_content":"\n大家可能都和我一样迷惑，在公司的不同项目上，我们怎么能提高自己的技术能力，并且通过能力的提升，使自己的工作和生活更加容易和便利？如果仅仅通过学习和看书，并不能很好地应用于项目和实践中。\n\n最近我们尝试把项目中需要用到的各项和QA相关的技术、工具，流程和方法列举出来，以方便我们有更明确的目的性，又有目标的提高自己的能力。也能让我们发现和QA能做的那个列表里面有哪些差距，在哪些方面我们可以提高和尝试。\n![QA Capability List](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/QA_capability.jpg)\n\n通过上面这张图片，我们总结了关于\"Business\", \"Tools\", \"Process\", \"Framework\", \"Language\", \"Platform\"和\"Technique\"这几个方面我们所涉及到的技术和工具等。\n\n根据这个QA能力列表，我们确定了自己近一个阶段所要针对提高的能力，比如我就选择了性能测试；而在这之后，我们把项目中的QA任务进行了划分，尽量让有不同目标的QA都能关注在自己想提高的领域，经过自己的学习和项目上的实践，不断巩固和提高这些能力，然后在项目组中分享和结对，转换发展方向，让更多的QA都能持续不断地提高。\n\n而且对于那些比较小的方面，比如说javascript脚本，其实只要利用5～10分钟的时间，可能我们就能写出一段可以在项目上使用的脚本，我们项目中现在就有一段可以辅助填表的脚本。这些小的改进都可以提高我们的效率，让我们有更多的时间去学习新技术和工具。\n\n对于项目组中只有一个QA的情况，除了上面的方法，我们还可以让Developer承担更多验证已有测试用例的活动，或者和他们结对来学习这些技术和工具。\n\n我们另一个项目实践是每个迭代都会发一封Quality Status给整个团队，以加强每个人对于质量的关注，分享QA最近的进展。下面给大家展示两个例子（代码是使用bootstrap实现的，下面的只是展示截图）。\n\n![Quality Status for Iteration](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/QA_capability_Iteration.png)\n\n![Quality Status for Release](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/QA_capability_Release.png)","source":"_posts/Practice_QA_Capability_In_Project.md","raw":"title: QA能力列表在项目中的实践\ndate: 2012-12-3\ncategories:\n- Tester\ntags:\n- Capability\n- Practice\ncomments: true\n---\n\n大家可能都和我一样迷惑，在公司的不同项目上，我们怎么能提高自己的技术能力，并且通过能力的提升，使自己的工作和生活更加容易和便利？如果仅仅通过学习和看书，并不能很好地应用于项目和实践中。\n\n最近我们尝试把项目中需要用到的各项和QA相关的技术、工具，流程和方法列举出来，以方便我们有更明确的目的性，又有目标的提高自己的能力。也能让我们发现和QA能做的那个列表里面有哪些差距，在哪些方面我们可以提高和尝试。\n![QA Capability List](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/QA_capability.jpg)\n\n通过上面这张图片，我们总结了关于\"Business\", \"Tools\", \"Process\", \"Framework\", \"Language\", \"Platform\"和\"Technique\"这几个方面我们所涉及到的技术和工具等。\n\n根据这个QA能力列表，我们确定了自己近一个阶段所要针对提高的能力，比如我就选择了性能测试；而在这之后，我们把项目中的QA任务进行了划分，尽量让有不同目标的QA都能关注在自己想提高的领域，经过自己的学习和项目上的实践，不断巩固和提高这些能力，然后在项目组中分享和结对，转换发展方向，让更多的QA都能持续不断地提高。\n\n而且对于那些比较小的方面，比如说javascript脚本，其实只要利用5～10分钟的时间，可能我们就能写出一段可以在项目上使用的脚本，我们项目中现在就有一段可以辅助填表的脚本。这些小的改进都可以提高我们的效率，让我们有更多的时间去学习新技术和工具。\n\n对于项目组中只有一个QA的情况，除了上面的方法，我们还可以让Developer承担更多验证已有测试用例的活动，或者和他们结对来学习这些技术和工具。\n\n我们另一个项目实践是每个迭代都会发一封Quality Status给整个团队，以加强每个人对于质量的关注，分享QA最近的进展。下面给大家展示两个例子（代码是使用bootstrap实现的，下面的只是展示截图）。\n\n![Quality Status for Iteration](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/QA_capability_Iteration.png)\n\n![Quality Status for Release](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/QA_capability_Release.png)","slug":"Practice_QA_Capability_In_Project","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu5a002hy73nlw7wmdsb","layout":"post","photos":[],"link":"","content":"<p>大家可能都和我一样迷惑，在公司的不同项目上，我们怎么能提高自己的技术能力，并且通过能力的提升，使自己的工作和生活更加容易和便利？如果仅仅通过学习和看书，并不能很好地应用于项目和实践中。</p>\n<p>最近我们尝试把项目中需要用到的各项和QA相关的技术、工具，流程和方法列举出来，以方便我们有更明确的目的性，又有目标的提高自己的能力。也能让我们发现和QA能做的那个列表里面有哪些差距，在哪些方面我们可以提高和尝试。<br><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/QA_capability.jpg\" alt=\"QA Capability List\"></p>\n<p>通过上面这张图片，我们总结了关于”Business”, “Tools”, “Process”, “Framework”, “Language”, “Platform”和”Technique”这几个方面我们所涉及到的技术和工具等。</p>\n<p>根据这个QA能力列表，我们确定了自己近一个阶段所要针对提高的能力，比如我就选择了性能测试；而在这之后，我们把项目中的QA任务进行了划分，尽量让有不同目标的QA都能关注在自己想提高的领域，经过自己的学习和项目上的实践，不断巩固和提高这些能力，然后在项目组中分享和结对，转换发展方向，让更多的QA都能持续不断地提高。</p>\n<p>而且对于那些比较小的方面，比如说javascript脚本，其实只要利用5～10分钟的时间，可能我们就能写出一段可以在项目上使用的脚本，我们项目中现在就有一段可以辅助填表的脚本。这些小的改进都可以提高我们的效率，让我们有更多的时间去学习新技术和工具。</p>\n<p>对于项目组中只有一个QA的情况，除了上面的方法，我们还可以让Developer承担更多验证已有测试用例的活动，或者和他们结对来学习这些技术和工具。</p>\n<p>我们另一个项目实践是每个迭代都会发一封Quality Status给整个团队，以加强每个人对于质量的关注，分享QA最近的进展。下面给大家展示两个例子（代码是使用bootstrap实现的，下面的只是展示截图）。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/QA_capability_Iteration.png\" alt=\"Quality Status for Iteration\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/QA_capability_Release.png\" alt=\"Quality Status for Release\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>大家可能都和我一样迷惑，在公司的不同项目上，我们怎么能提高自己的技术能力，并且通过能力的提升，使自己的工作和生活更加容易和便利？如果仅仅通过学习和看书，并不能很好地应用于项目和实践中。</p>\n<p>最近我们尝试把项目中需要用到的各项和QA相关的技术、工具，流程和方法列举出来，以方便我们有更明确的目的性，又有目标的提高自己的能力。也能让我们发现和QA能做的那个列表里面有哪些差距，在哪些方面我们可以提高和尝试。<br><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/QA_capability.jpg\" alt=\"QA Capability List\"></p>\n<p>通过上面这张图片，我们总结了关于”Business”, “Tools”, “Process”, “Framework”, “Language”, “Platform”和”Technique”这几个方面我们所涉及到的技术和工具等。</p>\n<p>根据这个QA能力列表，我们确定了自己近一个阶段所要针对提高的能力，比如我就选择了性能测试；而在这之后，我们把项目中的QA任务进行了划分，尽量让有不同目标的QA都能关注在自己想提高的领域，经过自己的学习和项目上的实践，不断巩固和提高这些能力，然后在项目组中分享和结对，转换发展方向，让更多的QA都能持续不断地提高。</p>\n<p>而且对于那些比较小的方面，比如说javascript脚本，其实只要利用5～10分钟的时间，可能我们就能写出一段可以在项目上使用的脚本，我们项目中现在就有一段可以辅助填表的脚本。这些小的改进都可以提高我们的效率，让我们有更多的时间去学习新技术和工具。</p>\n<p>对于项目组中只有一个QA的情况，除了上面的方法，我们还可以让Developer承担更多验证已有测试用例的活动，或者和他们结对来学习这些技术和工具。</p>\n<p>我们另一个项目实践是每个迭代都会发一封Quality Status给整个团队，以加强每个人对于质量的关注，分享QA最近的进展。下面给大家展示两个例子（代码是使用bootstrap实现的，下面的只是展示截图）。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/QA_capability_Iteration.png\" alt=\"Quality Status for Iteration\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/QA_capability_Release.png\" alt=\"Quality Status for Release\"></p>\n"},{"title":"游戏化在保险项目中的实践","date":"2014-06-18T14:00:00.000Z","comments":1,"_content":"\n### 引子\n\n虽说是关于Gamification游戏化的实践分享，其实也是两年前做过的项目了。之所以现在才写出这篇实践分享，也是源于最近看《MacTalk人生元编程》中提到的使用智能手环对思想和行为的改变：“用这玩意的另一个好处就是，如果需要徒步去做点什么，以前的反映是‘我了个擦，怎么这么远’。现在的反映是‘好，又可以增加几千步了’”。 这让我意识到，这不也是游戏化嘛，只是不局限在和在线业务结合紧密的领域，但却更深入地改变了我们的生活习惯。\n\n言归正传，游戏化是最近几年比较热门的一个话题，不同的行业和领域都开始使用这一概念来吸引更多的用户，或者维持用户的粘性。\n\n### 概念和意义\n\n对于游戏化概念，知乎有一篇很不错的介绍：[游戏化 (Gamification) 是什么？如何应用于营销与管理？](http://www.zhihu.com/question/20381247) ，对游戏化从设计思想和实际应用方面都进行了阐述。\n\n不过根据我自己的理解，游戏化这个概念，对于产品经理来说，就是通过类似于游戏打怪升级的方式来让用户保持对产品的新鲜感，并且更多地探索和尝试产品的各种功能及服务；对于用户来说，就是通过在使用产品的过程中，不断地获得成就感，以维持向他人炫耀的资本。说白了，就是让用户对你的产品感兴趣，并且上瘾。\n\n### 游戏化项目背景\n\n2012年的时候，我参与了一个澳洲保险公司的养老金项目，其中就包含了游戏化的一些应用。澳洲养老金并不像国内这样统一由政府管理，而是个人委托有相应资质的几家大型保险公司代为管理，并像股票基金一样有盈亏。由于遭遇了2008年的金融危机，澳洲养老金大幅缩水，导致很多人，包括以前不关注养老金的年轻人开始关注养老金的收益和投资。而我们项目的目的就在于如何吸引和留住这些年轻客户，从而提高市场占有率。因为对于一个保险公司来说，我们一贯的印象就是死板，还有多如牛毛的条款和说明。如果能让产品简洁明了，充满趣味性，不异于让用户对于这个公司形成新的企业形象。因此在项目启动阶段，我们就结合目标用户是年轻人的特点，提出了在项目中融入游戏化的概念。可喜的是，客户也很愿意尝试，毕竟这能很有效地拉大与市场竟品之间的差距。\n\n### 游戏化的项目实施\n\n我们在项目游戏化的实施中，使用了很多很明确的步骤来保证用户几乎是每一次的有效操作都能得到视觉和进度上的一个反馈。比如说，客户一开始注册了我们的账户，就能在显示总完成度的进度条中得到第一个徽章，在徽章上会标明完成时间和获得原因，在进度条上也会显现出相应的进展（图1）；页面上还会同时展示出操作向导，在向导中也再次以高亮的形式向用户传递出游戏化的概念（图2，这里展示的只是最初设计时的图片，非最终版）。\n\n![图1 用户的各类进展（成就）都会通过徽章的形式展现在进度条中，点击徽章，还会出现具体完成的时间和事件](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_01.png)\n\n![图2 在之后的改进中，指导页面更加突出－通过让背景的颜色更黑，以凸显需要用户关注的内容](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_02.png)\n\n除了向导的游戏化提示之外，我们通过设计用户体验的流程，规划出几大类User Journey用户旅程，并对每一类旅程进行细化，把每个步骤简化为用户能通过一个简单操作获得徽章和明显的进度条进展的模块（图3-1，3-2，3-3和3-4）。不仅有进度条对总完成度进行展示，我们还通过一些动画的方式展示出用户的进度。例如当用户刚注册时，在浏览器地址栏和总进度条之间，我们放置了一个卡通化的澳洲“普通民居”（图4），（但是对我们来说就是别墅啦），一栋二层的独立住宅，院子里没有围墙，车也是很普通的一辆；但是当用户对系统进行了更深入的探索和使用后，会发现原来的房子变漂亮了，围墙有了，草和树也更茂密了，车子变豪华了，还会有运钞车给送钱来了，等等（图5-1和5-2）。\n\n![图3-1 这张图展示了指导栏中，对于用户下一步行为的高亮和详细介绍，通过这样的方式指导用户操作](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_03-1.png)\n\n![图3-2 用户完成了某一模快下特定的操作步骤，指导栏会显示该步骤“已经完成”，并虚化这一步骤](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_03-2.png)\n\n![图3-3 这是对应的各类徽章，设计上也是本着简洁明了的意图](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_03-3.jpg)\n\n![图3-4 这是各类徽章在导航栏上显示的样式](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_03-4.png)\n\n![图4 这是最初用户注册完成，登录系统时表明该用户完成度的最基本的民居样式](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_04.png)\n\n![图5-1 通过上图的对比，我们可以看出随着用户完成度的提高，民居的样式一步一步地出现了非常大的变化，这些变化都是随着用户的这种操作而不断添加的](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_05-1.png)\n\n![图5-2 这张图展示了一个动画效果：当用户完成某项操作后，一辆货车出现在系统上用户房屋前，并抛出几个钱袋，让用户能直观地感受到“钱来了”](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_05-2.jpg)\n\n除此之外，当用户完成一些重大的操作里程碑后，比如说把用户的税号和系统绑定成功后，我们还会展示出类似于愤怒的小鸟过关后那种评星级的动画效果，让用户视觉化地感受到完成了一个大事件。这里只展示一下类似的完成账户归集之后的效果（图6）。\n\n![图6 这个只是展示了另一种模块完成时的效果：在指导栏显示完成度信息，并指导用户进行下一个模块的操作](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_06.png)\n\n### 游戏化设计需要整合架构和开发\n\n当然，这些游戏化的设计是在一开始就被设计到开发流程中的，如果是在开发流程中后期才加入游戏化的设计，对于现有功能的设计和实现，很可能需要按照新的设计方式重新进行编码，因为游戏化不是简单的功能堆砌，也需要进行整体设计。同时，在贯彻游戏化的过程中，也需要对系统功能进行精简和优化，没人会愿意去“玩”一个功能不明、逻辑混乱、支线情节枯燥无味的“游戏”。我们在设计中也通过游戏化对用户做有倾向性的指导和暗示，让用户更情愿地去做我们希望的用户旅程。\n\n就像每个项目都不可能平稳开展一样，游戏化的设计也需要不断地演进，而我们是通过定期持续的用户测试来获得反馈并及时调整的，当然中间也必不可少的需要团队的参与和讨论。比如我们对于主页的设计就经历过多次的变化（图7-1，7-2，7-3）。\n\n![图7-1 这是最初设计时的页面样式](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_07-1.jpg)\n\n![图7-2 这是进行了用户测试，根据反馈改进的页面样式](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_07-2.png)\n\n![图7-3 这是最后上线时，经过了5、6次用户测试，并不断改进后的样式](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_07-3.png)\n\n### 项目成果\n\n通过这些实践和努力，在经历了半年的开发，项目第一阶段成功于2012年底上线以后，由于系统设计简单明了，加之游戏化的趣味性，产品不仅吸引了大量的年轻用户，还获得了澳洲市场上百万级的用户市场，成为该保险公司在线业务中明星级的产品。当然，这一产品在持续的用户测试的反馈基础上，还在不断地演进和优化。\n\n### 游戏化不是一剂万能灵药，但是至少它让我们用另一种方式去诠释自己的产品。所以拓展思维，从“游戏化”的角度重新考虑一下我们的产品，对于关注产品的所有人都是值得一试的。","source":"_posts/Practice_Of_Gamification_In_Insurance_Project.md","raw":"title: 游戏化在保险项目中的实践\ndate: 2014-06-19\ncategories:\n- Test\ntags:\n- Gamification\n- Web\n- Practice\ncomments: true\n---\n\n### 引子\n\n虽说是关于Gamification游戏化的实践分享，其实也是两年前做过的项目了。之所以现在才写出这篇实践分享，也是源于最近看《MacTalk人生元编程》中提到的使用智能手环对思想和行为的改变：“用这玩意的另一个好处就是，如果需要徒步去做点什么，以前的反映是‘我了个擦，怎么这么远’。现在的反映是‘好，又可以增加几千步了’”。 这让我意识到，这不也是游戏化嘛，只是不局限在和在线业务结合紧密的领域，但却更深入地改变了我们的生活习惯。\n\n言归正传，游戏化是最近几年比较热门的一个话题，不同的行业和领域都开始使用这一概念来吸引更多的用户，或者维持用户的粘性。\n\n### 概念和意义\n\n对于游戏化概念，知乎有一篇很不错的介绍：[游戏化 (Gamification) 是什么？如何应用于营销与管理？](http://www.zhihu.com/question/20381247) ，对游戏化从设计思想和实际应用方面都进行了阐述。\n\n不过根据我自己的理解，游戏化这个概念，对于产品经理来说，就是通过类似于游戏打怪升级的方式来让用户保持对产品的新鲜感，并且更多地探索和尝试产品的各种功能及服务；对于用户来说，就是通过在使用产品的过程中，不断地获得成就感，以维持向他人炫耀的资本。说白了，就是让用户对你的产品感兴趣，并且上瘾。\n\n### 游戏化项目背景\n\n2012年的时候，我参与了一个澳洲保险公司的养老金项目，其中就包含了游戏化的一些应用。澳洲养老金并不像国内这样统一由政府管理，而是个人委托有相应资质的几家大型保险公司代为管理，并像股票基金一样有盈亏。由于遭遇了2008年的金融危机，澳洲养老金大幅缩水，导致很多人，包括以前不关注养老金的年轻人开始关注养老金的收益和投资。而我们项目的目的就在于如何吸引和留住这些年轻客户，从而提高市场占有率。因为对于一个保险公司来说，我们一贯的印象就是死板，还有多如牛毛的条款和说明。如果能让产品简洁明了，充满趣味性，不异于让用户对于这个公司形成新的企业形象。因此在项目启动阶段，我们就结合目标用户是年轻人的特点，提出了在项目中融入游戏化的概念。可喜的是，客户也很愿意尝试，毕竟这能很有效地拉大与市场竟品之间的差距。\n\n### 游戏化的项目实施\n\n我们在项目游戏化的实施中，使用了很多很明确的步骤来保证用户几乎是每一次的有效操作都能得到视觉和进度上的一个反馈。比如说，客户一开始注册了我们的账户，就能在显示总完成度的进度条中得到第一个徽章，在徽章上会标明完成时间和获得原因，在进度条上也会显现出相应的进展（图1）；页面上还会同时展示出操作向导，在向导中也再次以高亮的形式向用户传递出游戏化的概念（图2，这里展示的只是最初设计时的图片，非最终版）。\n\n![图1 用户的各类进展（成就）都会通过徽章的形式展现在进度条中，点击徽章，还会出现具体完成的时间和事件](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_01.png)\n\n![图2 在之后的改进中，指导页面更加突出－通过让背景的颜色更黑，以凸显需要用户关注的内容](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_02.png)\n\n除了向导的游戏化提示之外，我们通过设计用户体验的流程，规划出几大类User Journey用户旅程，并对每一类旅程进行细化，把每个步骤简化为用户能通过一个简单操作获得徽章和明显的进度条进展的模块（图3-1，3-2，3-3和3-4）。不仅有进度条对总完成度进行展示，我们还通过一些动画的方式展示出用户的进度。例如当用户刚注册时，在浏览器地址栏和总进度条之间，我们放置了一个卡通化的澳洲“普通民居”（图4），（但是对我们来说就是别墅啦），一栋二层的独立住宅，院子里没有围墙，车也是很普通的一辆；但是当用户对系统进行了更深入的探索和使用后，会发现原来的房子变漂亮了，围墙有了，草和树也更茂密了，车子变豪华了，还会有运钞车给送钱来了，等等（图5-1和5-2）。\n\n![图3-1 这张图展示了指导栏中，对于用户下一步行为的高亮和详细介绍，通过这样的方式指导用户操作](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_03-1.png)\n\n![图3-2 用户完成了某一模快下特定的操作步骤，指导栏会显示该步骤“已经完成”，并虚化这一步骤](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_03-2.png)\n\n![图3-3 这是对应的各类徽章，设计上也是本着简洁明了的意图](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_03-3.jpg)\n\n![图3-4 这是各类徽章在导航栏上显示的样式](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_03-4.png)\n\n![图4 这是最初用户注册完成，登录系统时表明该用户完成度的最基本的民居样式](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_04.png)\n\n![图5-1 通过上图的对比，我们可以看出随着用户完成度的提高，民居的样式一步一步地出现了非常大的变化，这些变化都是随着用户的这种操作而不断添加的](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_05-1.png)\n\n![图5-2 这张图展示了一个动画效果：当用户完成某项操作后，一辆货车出现在系统上用户房屋前，并抛出几个钱袋，让用户能直观地感受到“钱来了”](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_05-2.jpg)\n\n除此之外，当用户完成一些重大的操作里程碑后，比如说把用户的税号和系统绑定成功后，我们还会展示出类似于愤怒的小鸟过关后那种评星级的动画效果，让用户视觉化地感受到完成了一个大事件。这里只展示一下类似的完成账户归集之后的效果（图6）。\n\n![图6 这个只是展示了另一种模块完成时的效果：在指导栏显示完成度信息，并指导用户进行下一个模块的操作](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_06.png)\n\n### 游戏化设计需要整合架构和开发\n\n当然，这些游戏化的设计是在一开始就被设计到开发流程中的，如果是在开发流程中后期才加入游戏化的设计，对于现有功能的设计和实现，很可能需要按照新的设计方式重新进行编码，因为游戏化不是简单的功能堆砌，也需要进行整体设计。同时，在贯彻游戏化的过程中，也需要对系统功能进行精简和优化，没人会愿意去“玩”一个功能不明、逻辑混乱、支线情节枯燥无味的“游戏”。我们在设计中也通过游戏化对用户做有倾向性的指导和暗示，让用户更情愿地去做我们希望的用户旅程。\n\n就像每个项目都不可能平稳开展一样，游戏化的设计也需要不断地演进，而我们是通过定期持续的用户测试来获得反馈并及时调整的，当然中间也必不可少的需要团队的参与和讨论。比如我们对于主页的设计就经历过多次的变化（图7-1，7-2，7-3）。\n\n![图7-1 这是最初设计时的页面样式](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_07-1.jpg)\n\n![图7-2 这是进行了用户测试，根据反馈改进的页面样式](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_07-2.png)\n\n![图7-3 这是最后上线时，经过了5、6次用户测试，并不断改进后的样式](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_07-3.png)\n\n### 项目成果\n\n通过这些实践和努力，在经历了半年的开发，项目第一阶段成功于2012年底上线以后，由于系统设计简单明了，加之游戏化的趣味性，产品不仅吸引了大量的年轻用户，还获得了澳洲市场上百万级的用户市场，成为该保险公司在线业务中明星级的产品。当然，这一产品在持续的用户测试的反馈基础上，还在不断地演进和优化。\n\n### 游戏化不是一剂万能灵药，但是至少它让我们用另一种方式去诠释自己的产品。所以拓展思维，从“游戏化”的角度重新考虑一下我们的产品，对于关注产品的所有人都是值得一试的。","slug":"Practice_Of_Gamification_In_Insurance_Project","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu5c002ly73ngk8nt3cg","layout":"post","photos":[],"link":"","content":"<h3 id=\"引子\">引子</h3><p>虽说是关于Gamification游戏化的实践分享，其实也是两年前做过的项目了。之所以现在才写出这篇实践分享，也是源于最近看《MacTalk人生元编程》中提到的使用智能手环对思想和行为的改变：“用这玩意的另一个好处就是，如果需要徒步去做点什么，以前的反映是‘我了个擦，怎么这么远’。现在的反映是‘好，又可以增加几千步了’”。 这让我意识到，这不也是游戏化嘛，只是不局限在和在线业务结合紧密的领域，但却更深入地改变了我们的生活习惯。</p>\n<p>言归正传，游戏化是最近几年比较热门的一个话题，不同的行业和领域都开始使用这一概念来吸引更多的用户，或者维持用户的粘性。</p>\n<h3 id=\"概念和意义\">概念和意义</h3><p>对于游戏化概念，知乎有一篇很不错的介绍：<a href=\"http://www.zhihu.com/question/20381247\" target=\"_blank\" rel=\"external\">游戏化 (Gamification) 是什么？如何应用于营销与管理？</a> ，对游戏化从设计思想和实际应用方面都进行了阐述。</p>\n<p>不过根据我自己的理解，游戏化这个概念，对于产品经理来说，就是通过类似于游戏打怪升级的方式来让用户保持对产品的新鲜感，并且更多地探索和尝试产品的各种功能及服务；对于用户来说，就是通过在使用产品的过程中，不断地获得成就感，以维持向他人炫耀的资本。说白了，就是让用户对你的产品感兴趣，并且上瘾。</p>\n<h3 id=\"游戏化项目背景\">游戏化项目背景</h3><p>2012年的时候，我参与了一个澳洲保险公司的养老金项目，其中就包含了游戏化的一些应用。澳洲养老金并不像国内这样统一由政府管理，而是个人委托有相应资质的几家大型保险公司代为管理，并像股票基金一样有盈亏。由于遭遇了2008年的金融危机，澳洲养老金大幅缩水，导致很多人，包括以前不关注养老金的年轻人开始关注养老金的收益和投资。而我们项目的目的就在于如何吸引和留住这些年轻客户，从而提高市场占有率。因为对于一个保险公司来说，我们一贯的印象就是死板，还有多如牛毛的条款和说明。如果能让产品简洁明了，充满趣味性，不异于让用户对于这个公司形成新的企业形象。因此在项目启动阶段，我们就结合目标用户是年轻人的特点，提出了在项目中融入游戏化的概念。可喜的是，客户也很愿意尝试，毕竟这能很有效地拉大与市场竟品之间的差距。</p>\n<h3 id=\"游戏化的项目实施\">游戏化的项目实施</h3><p>我们在项目游戏化的实施中，使用了很多很明确的步骤来保证用户几乎是每一次的有效操作都能得到视觉和进度上的一个反馈。比如说，客户一开始注册了我们的账户，就能在显示总完成度的进度条中得到第一个徽章，在徽章上会标明完成时间和获得原因，在进度条上也会显现出相应的进展（图1）；页面上还会同时展示出操作向导，在向导中也再次以高亮的形式向用户传递出游戏化的概念（图2，这里展示的只是最初设计时的图片，非最终版）。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_01.png\" alt=\"图1 用户的各类进展（成就）都会通过徽章的形式展现在进度条中，点击徽章，还会出现具体完成的时间和事件\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_02.png\" alt=\"图2 在之后的改进中，指导页面更加突出－通过让背景的颜色更黑，以凸显需要用户关注的内容\"></p>\n<p>除了向导的游戏化提示之外，我们通过设计用户体验的流程，规划出几大类User Journey用户旅程，并对每一类旅程进行细化，把每个步骤简化为用户能通过一个简单操作获得徽章和明显的进度条进展的模块（图3-1，3-2，3-3和3-4）。不仅有进度条对总完成度进行展示，我们还通过一些动画的方式展示出用户的进度。例如当用户刚注册时，在浏览器地址栏和总进度条之间，我们放置了一个卡通化的澳洲“普通民居”（图4），（但是对我们来说就是别墅啦），一栋二层的独立住宅，院子里没有围墙，车也是很普通的一辆；但是当用户对系统进行了更深入的探索和使用后，会发现原来的房子变漂亮了，围墙有了，草和树也更茂密了，车子变豪华了，还会有运钞车给送钱来了，等等（图5-1和5-2）。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_03-1.png\" alt=\"图3-1 这张图展示了指导栏中，对于用户下一步行为的高亮和详细介绍，通过这样的方式指导用户操作\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_03-2.png\" alt=\"图3-2 用户完成了某一模快下特定的操作步骤，指导栏会显示该步骤“已经完成”，并虚化这一步骤\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_03-3.jpg\" alt=\"图3-3 这是对应的各类徽章，设计上也是本着简洁明了的意图\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_03-4.png\" alt=\"图3-4 这是各类徽章在导航栏上显示的样式\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_04.png\" alt=\"图4 这是最初用户注册完成，登录系统时表明该用户完成度的最基本的民居样式\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_05-1.png\" alt=\"图5-1 通过上图的对比，我们可以看出随着用户完成度的提高，民居的样式一步一步地出现了非常大的变化，这些变化都是随着用户的这种操作而不断添加的\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_05-2.jpg\" alt=\"图5-2 这张图展示了一个动画效果：当用户完成某项操作后，一辆货车出现在系统上用户房屋前，并抛出几个钱袋，让用户能直观地感受到“钱来了”\"></p>\n<p>除此之外，当用户完成一些重大的操作里程碑后，比如说把用户的税号和系统绑定成功后，我们还会展示出类似于愤怒的小鸟过关后那种评星级的动画效果，让用户视觉化地感受到完成了一个大事件。这里只展示一下类似的完成账户归集之后的效果（图6）。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_06.png\" alt=\"图6 这个只是展示了另一种模块完成时的效果：在指导栏显示完成度信息，并指导用户进行下一个模块的操作\"></p>\n<h3 id=\"游戏化设计需要整合架构和开发\">游戏化设计需要整合架构和开发</h3><p>当然，这些游戏化的设计是在一开始就被设计到开发流程中的，如果是在开发流程中后期才加入游戏化的设计，对于现有功能的设计和实现，很可能需要按照新的设计方式重新进行编码，因为游戏化不是简单的功能堆砌，也需要进行整体设计。同时，在贯彻游戏化的过程中，也需要对系统功能进行精简和优化，没人会愿意去“玩”一个功能不明、逻辑混乱、支线情节枯燥无味的“游戏”。我们在设计中也通过游戏化对用户做有倾向性的指导和暗示，让用户更情愿地去做我们希望的用户旅程。</p>\n<p>就像每个项目都不可能平稳开展一样，游戏化的设计也需要不断地演进，而我们是通过定期持续的用户测试来获得反馈并及时调整的，当然中间也必不可少的需要团队的参与和讨论。比如我们对于主页的设计就经历过多次的变化（图7-1，7-2，7-3）。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_07-1.jpg\" alt=\"图7-1 这是最初设计时的页面样式\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_07-2.png\" alt=\"图7-2 这是进行了用户测试，根据反馈改进的页面样式\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_07-3.png\" alt=\"图7-3 这是最后上线时，经过了5、6次用户测试，并不断改进后的样式\"></p>\n<h3 id=\"项目成果\">项目成果</h3><p>通过这些实践和努力，在经历了半年的开发，项目第一阶段成功于2012年底上线以后，由于系统设计简单明了，加之游戏化的趣味性，产品不仅吸引了大量的年轻用户，还获得了澳洲市场上百万级的用户市场，成为该保险公司在线业务中明星级的产品。当然，这一产品在持续的用户测试的反馈基础上，还在不断地演进和优化。</p>\n<h3 id=\"游戏化不是一剂万能灵药，但是至少它让我们用另一种方式去诠释自己的产品。所以拓展思维，从“游戏化”的角度重新考虑一下我们的产品，对于关注产品的所有人都是值得一试的。\">游戏化不是一剂万能灵药，但是至少它让我们用另一种方式去诠释自己的产品。所以拓展思维，从“游戏化”的角度重新考虑一下我们的产品，对于关注产品的所有人都是值得一试的。</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引子\">引子</h3><p>虽说是关于Gamification游戏化的实践分享，其实也是两年前做过的项目了。之所以现在才写出这篇实践分享，也是源于最近看《MacTalk人生元编程》中提到的使用智能手环对思想和行为的改变：“用这玩意的另一个好处就是，如果需要徒步去做点什么，以前的反映是‘我了个擦，怎么这么远’。现在的反映是‘好，又可以增加几千步了’”。 这让我意识到，这不也是游戏化嘛，只是不局限在和在线业务结合紧密的领域，但却更深入地改变了我们的生活习惯。</p>\n<p>言归正传，游戏化是最近几年比较热门的一个话题，不同的行业和领域都开始使用这一概念来吸引更多的用户，或者维持用户的粘性。</p>\n<h3 id=\"概念和意义\">概念和意义</h3><p>对于游戏化概念，知乎有一篇很不错的介绍：<a href=\"http://www.zhihu.com/question/20381247\" target=\"_blank\" rel=\"external\">游戏化 (Gamification) 是什么？如何应用于营销与管理？</a> ，对游戏化从设计思想和实际应用方面都进行了阐述。</p>\n<p>不过根据我自己的理解，游戏化这个概念，对于产品经理来说，就是通过类似于游戏打怪升级的方式来让用户保持对产品的新鲜感，并且更多地探索和尝试产品的各种功能及服务；对于用户来说，就是通过在使用产品的过程中，不断地获得成就感，以维持向他人炫耀的资本。说白了，就是让用户对你的产品感兴趣，并且上瘾。</p>\n<h3 id=\"游戏化项目背景\">游戏化项目背景</h3><p>2012年的时候，我参与了一个澳洲保险公司的养老金项目，其中就包含了游戏化的一些应用。澳洲养老金并不像国内这样统一由政府管理，而是个人委托有相应资质的几家大型保险公司代为管理，并像股票基金一样有盈亏。由于遭遇了2008年的金融危机，澳洲养老金大幅缩水，导致很多人，包括以前不关注养老金的年轻人开始关注养老金的收益和投资。而我们项目的目的就在于如何吸引和留住这些年轻客户，从而提高市场占有率。因为对于一个保险公司来说，我们一贯的印象就是死板，还有多如牛毛的条款和说明。如果能让产品简洁明了，充满趣味性，不异于让用户对于这个公司形成新的企业形象。因此在项目启动阶段，我们就结合目标用户是年轻人的特点，提出了在项目中融入游戏化的概念。可喜的是，客户也很愿意尝试，毕竟这能很有效地拉大与市场竟品之间的差距。</p>\n<h3 id=\"游戏化的项目实施\">游戏化的项目实施</h3><p>我们在项目游戏化的实施中，使用了很多很明确的步骤来保证用户几乎是每一次的有效操作都能得到视觉和进度上的一个反馈。比如说，客户一开始注册了我们的账户，就能在显示总完成度的进度条中得到第一个徽章，在徽章上会标明完成时间和获得原因，在进度条上也会显现出相应的进展（图1）；页面上还会同时展示出操作向导，在向导中也再次以高亮的形式向用户传递出游戏化的概念（图2，这里展示的只是最初设计时的图片，非最终版）。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_01.png\" alt=\"图1 用户的各类进展（成就）都会通过徽章的形式展现在进度条中，点击徽章，还会出现具体完成的时间和事件\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_02.png\" alt=\"图2 在之后的改进中，指导页面更加突出－通过让背景的颜色更黑，以凸显需要用户关注的内容\"></p>\n<p>除了向导的游戏化提示之外，我们通过设计用户体验的流程，规划出几大类User Journey用户旅程，并对每一类旅程进行细化，把每个步骤简化为用户能通过一个简单操作获得徽章和明显的进度条进展的模块（图3-1，3-2，3-3和3-4）。不仅有进度条对总完成度进行展示，我们还通过一些动画的方式展示出用户的进度。例如当用户刚注册时，在浏览器地址栏和总进度条之间，我们放置了一个卡通化的澳洲“普通民居”（图4），（但是对我们来说就是别墅啦），一栋二层的独立住宅，院子里没有围墙，车也是很普通的一辆；但是当用户对系统进行了更深入的探索和使用后，会发现原来的房子变漂亮了，围墙有了，草和树也更茂密了，车子变豪华了，还会有运钞车给送钱来了，等等（图5-1和5-2）。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_03-1.png\" alt=\"图3-1 这张图展示了指导栏中，对于用户下一步行为的高亮和详细介绍，通过这样的方式指导用户操作\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_03-2.png\" alt=\"图3-2 用户完成了某一模快下特定的操作步骤，指导栏会显示该步骤“已经完成”，并虚化这一步骤\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_03-3.jpg\" alt=\"图3-3 这是对应的各类徽章，设计上也是本着简洁明了的意图\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_03-4.png\" alt=\"图3-4 这是各类徽章在导航栏上显示的样式\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_04.png\" alt=\"图4 这是最初用户注册完成，登录系统时表明该用户完成度的最基本的民居样式\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_05-1.png\" alt=\"图5-1 通过上图的对比，我们可以看出随着用户完成度的提高，民居的样式一步一步地出现了非常大的变化，这些变化都是随着用户的这种操作而不断添加的\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_05-2.jpg\" alt=\"图5-2 这张图展示了一个动画效果：当用户完成某项操作后，一辆货车出现在系统上用户房屋前，并抛出几个钱袋，让用户能直观地感受到“钱来了”\"></p>\n<p>除此之外，当用户完成一些重大的操作里程碑后，比如说把用户的税号和系统绑定成功后，我们还会展示出类似于愤怒的小鸟过关后那种评星级的动画效果，让用户视觉化地感受到完成了一个大事件。这里只展示一下类似的完成账户归集之后的效果（图6）。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_06.png\" alt=\"图6 这个只是展示了另一种模块完成时的效果：在指导栏显示完成度信息，并指导用户进行下一个模块的操作\"></p>\n<h3 id=\"游戏化设计需要整合架构和开发\">游戏化设计需要整合架构和开发</h3><p>当然，这些游戏化的设计是在一开始就被设计到开发流程中的，如果是在开发流程中后期才加入游戏化的设计，对于现有功能的设计和实现，很可能需要按照新的设计方式重新进行编码，因为游戏化不是简单的功能堆砌，也需要进行整体设计。同时，在贯彻游戏化的过程中，也需要对系统功能进行精简和优化，没人会愿意去“玩”一个功能不明、逻辑混乱、支线情节枯燥无味的“游戏”。我们在设计中也通过游戏化对用户做有倾向性的指导和暗示，让用户更情愿地去做我们希望的用户旅程。</p>\n<p>就像每个项目都不可能平稳开展一样，游戏化的设计也需要不断地演进，而我们是通过定期持续的用户测试来获得反馈并及时调整的，当然中间也必不可少的需要团队的参与和讨论。比如我们对于主页的设计就经历过多次的变化（图7-1，7-2，7-3）。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_07-1.jpg\" alt=\"图7-1 这是最初设计时的页面样式\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_07-2.png\" alt=\"图7-2 这是进行了用户测试，根据反馈改进的页面样式\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Gamification_07-3.png\" alt=\"图7-3 这是最后上线时，经过了5、6次用户测试，并不断改进后的样式\"></p>\n<h3 id=\"项目成果\">项目成果</h3><p>通过这些实践和努力，在经历了半年的开发，项目第一阶段成功于2012年底上线以后，由于系统设计简单明了，加之游戏化的趣味性，产品不仅吸引了大量的年轻用户，还获得了澳洲市场上百万级的用户市场，成为该保险公司在线业务中明星级的产品。当然，这一产品在持续的用户测试的反馈基础上，还在不断地演进和优化。</p>\n<h3 id=\"游戏化不是一剂万能灵药，但是至少它让我们用另一种方式去诠释自己的产品。所以拓展思维，从“游戏化”的角度重新考虑一下我们的产品，对于关注产品的所有人都是值得一试的。\">游戏化不是一剂万能灵药，但是至少它让我们用另一种方式去诠释自己的产品。所以拓展思维，从“游戏化”的角度重新考虑一下我们的产品，对于关注产品的所有人都是值得一试的。</h3>"},{"title":"敏捷中的qa会被取代吗？","date":"2013-12-26T13:00:00.000Z","comments":1,"_content":"\n随着业界对敏捷开发的逐步了解，经常有同事和朋友问我，你们现在敏捷里注重测试，所以每个人都在进行测试，甚至以前测试人员所认可的发展方向：自动化测试，都让开发人员参与了很多，那你们QA是不是会被取代呢？\n\n听到这么一说，我真是猛然感觉到危机感，不过细想了一下，如果QA会被取代，就说明他／她的工作不重要或者不必要。既然这样，就还是从QA工作内容开始看看和分析吧：\n\n1. 让我们先从敏捷QA最早涉足的活动，业务需求分析入手。在业务分析阶段，QA可以通过自己的丰富知识，包括测试设计和分析的能力（例如实例化需求）来帮助业务分析人员以及客户发现遗漏的需求，以及从技术层面避免出现依赖等不合理的需求问题。\n2. 在开发过程中，虽然开发人员参与了不少的自动化测试的活动：单元测试和功能性测试等。不过这里需要说明的是：单元测试基本都是由开发人员负责完成的，更多的是侧重于代码中方法调用及模块调用这一层级的。而开发人员参与的功能性测试，更多的是从自动化测试实现方面出发的。究其原因，开发人员的编码技能一般来说都要熟练于QA。但是QA在这些活动中也在提供着自身不可替代的作用：根据单元测试，功能测试的完成度和覆盖率，更有指导性地规划项目中的测试金字塔；而且运用测试设计的能力，设计自动化测试的场景以及用例，以保证在最小最有效的测试场景和用例集中，完成尽可能高的功能场景的覆盖。我相信除非是像QA这样在测试设计方面倾注了很大的心血和时间，不然很难有能力设计这些架构和场景。而且QA也是可以写自动化测试的啊！\n3. 而在手动测试本身，基于自动化测试的覆盖力度，我们做得更多的是探索性的测试，而非基于明确的验收标准或者测试用例的验证性的测试。你也许会问那谁来做验证性测试，答案是开发人员、QA和业务分析人员一起在故事卡开发完成时来做的，而不是推到QA一个人的身上。对于探索性测试，QA采取了更有针对性和目的性的方法：根据对现有系统的理解和分析，归纳和总结出用户行为和功能点，然后以此为依据，开辟一段单独的时间，来对特定的行为和功能进行开放性的测试。这对于我们验收性的测试，是一种非常有效的补充。\n4. 在手动测试结束后，QA很多时候还承担了和客户沟通需求以及演示产品的职责，这样他／她们对于产品的认识有了更全面的了解，以及为什么需要这么做；同时客户对于他／她们的信任程度也提高了，从而更容易接受他／她们提出的建议。正因为这样，QA担任PM和IM也是很常见的。\n\n除此之外，QA一般还会负责性能测试和安全性测试这些非功能性测试，以保证项目在各方面都有品质的保证。\n\n在具体测试当中，QA发挥了关键的作用；在其他方面，QA也发挥了不可取代的作用。\n1. 首先，从项目整体上来说，对于项目部署和运维，QA也是很有发言权的。因为测试的过程中包含了这些部分。对于通过脚本部署产品，通过log分析和定位bug，QA对开发人员甚至运维人员都能提供帮助。\n2. 其次 ，在敏捷里，QA不仅测试的是产品本身，还需要对项目中的一切进行测试，这就包括了项目流程以及各阶段的分析工作。合理和优化的项目流程能帮助团队“更高、更快、更强”地达到目标，而QA有很好的全局观，所以很自然地会更关注于流程的优化。对于分析工作，敏捷的QA不仅仅是测试，更重要的是对现有结果进行分析和估计，有针对性地提出专业性的建议，便于项目组下一阶段目标的制定。\n\n看到以上罗列的这些工作内容，有一个问题自然地会浮现在脑海里：“这么多工作，都是从理论上说的，QA能都做到吗？”答案你我都知道，不可能。实际项目中的QA能做到很大一部分已经很不容易了。但是就像其他角色一样，不可能在同时段时间内能做到所有的方面，但是我们至少知道了自己可以发展的方向，以及我们所特有的优势和技能。\n\n敏捷中的QA因为要关注的方面更多了，所以有些可以代理出去的工作可以让其他角色辅助，而不必事必躬亲；但是我们自身所特有的技能，并不是能代理出去或者其他角色能轻易达到的。\n\n如果下次有人在问我文章开头的问题，我会开心的告诉他：“欢迎你来取代我。”而他／她付出的会是“一万小时“的时间来成为QA方面的专家。到那时候，就不是取代我，而是成为我了。\n","source":"_posts/No_QA_In_Agile.md","raw":"title: 敏捷中的qa会被取代吗？\ndate: 2013-12-27\ncategories:\n- Tester\ntags:\n- Agile\n- QA\n- No QA\n- Replace\ncomments: true\n---\n\n随着业界对敏捷开发的逐步了解，经常有同事和朋友问我，你们现在敏捷里注重测试，所以每个人都在进行测试，甚至以前测试人员所认可的发展方向：自动化测试，都让开发人员参与了很多，那你们QA是不是会被取代呢？\n\n听到这么一说，我真是猛然感觉到危机感，不过细想了一下，如果QA会被取代，就说明他／她的工作不重要或者不必要。既然这样，就还是从QA工作内容开始看看和分析吧：\n\n1. 让我们先从敏捷QA最早涉足的活动，业务需求分析入手。在业务分析阶段，QA可以通过自己的丰富知识，包括测试设计和分析的能力（例如实例化需求）来帮助业务分析人员以及客户发现遗漏的需求，以及从技术层面避免出现依赖等不合理的需求问题。\n2. 在开发过程中，虽然开发人员参与了不少的自动化测试的活动：单元测试和功能性测试等。不过这里需要说明的是：单元测试基本都是由开发人员负责完成的，更多的是侧重于代码中方法调用及模块调用这一层级的。而开发人员参与的功能性测试，更多的是从自动化测试实现方面出发的。究其原因，开发人员的编码技能一般来说都要熟练于QA。但是QA在这些活动中也在提供着自身不可替代的作用：根据单元测试，功能测试的完成度和覆盖率，更有指导性地规划项目中的测试金字塔；而且运用测试设计的能力，设计自动化测试的场景以及用例，以保证在最小最有效的测试场景和用例集中，完成尽可能高的功能场景的覆盖。我相信除非是像QA这样在测试设计方面倾注了很大的心血和时间，不然很难有能力设计这些架构和场景。而且QA也是可以写自动化测试的啊！\n3. 而在手动测试本身，基于自动化测试的覆盖力度，我们做得更多的是探索性的测试，而非基于明确的验收标准或者测试用例的验证性的测试。你也许会问那谁来做验证性测试，答案是开发人员、QA和业务分析人员一起在故事卡开发完成时来做的，而不是推到QA一个人的身上。对于探索性测试，QA采取了更有针对性和目的性的方法：根据对现有系统的理解和分析，归纳和总结出用户行为和功能点，然后以此为依据，开辟一段单独的时间，来对特定的行为和功能进行开放性的测试。这对于我们验收性的测试，是一种非常有效的补充。\n4. 在手动测试结束后，QA很多时候还承担了和客户沟通需求以及演示产品的职责，这样他／她们对于产品的认识有了更全面的了解，以及为什么需要这么做；同时客户对于他／她们的信任程度也提高了，从而更容易接受他／她们提出的建议。正因为这样，QA担任PM和IM也是很常见的。\n\n除此之外，QA一般还会负责性能测试和安全性测试这些非功能性测试，以保证项目在各方面都有品质的保证。\n\n在具体测试当中，QA发挥了关键的作用；在其他方面，QA也发挥了不可取代的作用。\n1. 首先，从项目整体上来说，对于项目部署和运维，QA也是很有发言权的。因为测试的过程中包含了这些部分。对于通过脚本部署产品，通过log分析和定位bug，QA对开发人员甚至运维人员都能提供帮助。\n2. 其次 ，在敏捷里，QA不仅测试的是产品本身，还需要对项目中的一切进行测试，这就包括了项目流程以及各阶段的分析工作。合理和优化的项目流程能帮助团队“更高、更快、更强”地达到目标，而QA有很好的全局观，所以很自然地会更关注于流程的优化。对于分析工作，敏捷的QA不仅仅是测试，更重要的是对现有结果进行分析和估计，有针对性地提出专业性的建议，便于项目组下一阶段目标的制定。\n\n看到以上罗列的这些工作内容，有一个问题自然地会浮现在脑海里：“这么多工作，都是从理论上说的，QA能都做到吗？”答案你我都知道，不可能。实际项目中的QA能做到很大一部分已经很不容易了。但是就像其他角色一样，不可能在同时段时间内能做到所有的方面，但是我们至少知道了自己可以发展的方向，以及我们所特有的优势和技能。\n\n敏捷中的QA因为要关注的方面更多了，所以有些可以代理出去的工作可以让其他角色辅助，而不必事必躬亲；但是我们自身所特有的技能，并不是能代理出去或者其他角色能轻易达到的。\n\n如果下次有人在问我文章开头的问题，我会开心的告诉他：“欢迎你来取代我。”而他／她付出的会是“一万小时“的时间来成为QA方面的专家。到那时候，就不是取代我，而是成为我了。\n","slug":"No_QA_In_Agile","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu5f002ry73nqt0cam5y","layout":"post","photos":[],"link":"","content":"<p>随着业界对敏捷开发的逐步了解，经常有同事和朋友问我，你们现在敏捷里注重测试，所以每个人都在进行测试，甚至以前测试人员所认可的发展方向：自动化测试，都让开发人员参与了很多，那你们QA是不是会被取代呢？</p>\n<p>听到这么一说，我真是猛然感觉到危机感，不过细想了一下，如果QA会被取代，就说明他／她的工作不重要或者不必要。既然这样，就还是从QA工作内容开始看看和分析吧：</p>\n<ol>\n<li>让我们先从敏捷QA最早涉足的活动，业务需求分析入手。在业务分析阶段，QA可以通过自己的丰富知识，包括测试设计和分析的能力（例如实例化需求）来帮助业务分析人员以及客户发现遗漏的需求，以及从技术层面避免出现依赖等不合理的需求问题。</li>\n<li>在开发过程中，虽然开发人员参与了不少的自动化测试的活动：单元测试和功能性测试等。不过这里需要说明的是：单元测试基本都是由开发人员负责完成的，更多的是侧重于代码中方法调用及模块调用这一层级的。而开发人员参与的功能性测试，更多的是从自动化测试实现方面出发的。究其原因，开发人员的编码技能一般来说都要熟练于QA。但是QA在这些活动中也在提供着自身不可替代的作用：根据单元测试，功能测试的完成度和覆盖率，更有指导性地规划项目中的测试金字塔；而且运用测试设计的能力，设计自动化测试的场景以及用例，以保证在最小最有效的测试场景和用例集中，完成尽可能高的功能场景的覆盖。我相信除非是像QA这样在测试设计方面倾注了很大的心血和时间，不然很难有能力设计这些架构和场景。而且QA也是可以写自动化测试的啊！</li>\n<li>而在手动测试本身，基于自动化测试的覆盖力度，我们做得更多的是探索性的测试，而非基于明确的验收标准或者测试用例的验证性的测试。你也许会问那谁来做验证性测试，答案是开发人员、QA和业务分析人员一起在故事卡开发完成时来做的，而不是推到QA一个人的身上。对于探索性测试，QA采取了更有针对性和目的性的方法：根据对现有系统的理解和分析，归纳和总结出用户行为和功能点，然后以此为依据，开辟一段单独的时间，来对特定的行为和功能进行开放性的测试。这对于我们验收性的测试，是一种非常有效的补充。</li>\n<li>在手动测试结束后，QA很多时候还承担了和客户沟通需求以及演示产品的职责，这样他／她们对于产品的认识有了更全面的了解，以及为什么需要这么做；同时客户对于他／她们的信任程度也提高了，从而更容易接受他／她们提出的建议。正因为这样，QA担任PM和IM也是很常见的。</li>\n</ol>\n<p>除此之外，QA一般还会负责性能测试和安全性测试这些非功能性测试，以保证项目在各方面都有品质的保证。</p>\n<p>在具体测试当中，QA发挥了关键的作用；在其他方面，QA也发挥了不可取代的作用。</p>\n<ol>\n<li>首先，从项目整体上来说，对于项目部署和运维，QA也是很有发言权的。因为测试的过程中包含了这些部分。对于通过脚本部署产品，通过log分析和定位bug，QA对开发人员甚至运维人员都能提供帮助。</li>\n<li>其次 ，在敏捷里，QA不仅测试的是产品本身，还需要对项目中的一切进行测试，这就包括了项目流程以及各阶段的分析工作。合理和优化的项目流程能帮助团队“更高、更快、更强”地达到目标，而QA有很好的全局观，所以很自然地会更关注于流程的优化。对于分析工作，敏捷的QA不仅仅是测试，更重要的是对现有结果进行分析和估计，有针对性地提出专业性的建议，便于项目组下一阶段目标的制定。</li>\n</ol>\n<p>看到以上罗列的这些工作内容，有一个问题自然地会浮现在脑海里：“这么多工作，都是从理论上说的，QA能都做到吗？”答案你我都知道，不可能。实际项目中的QA能做到很大一部分已经很不容易了。但是就像其他角色一样，不可能在同时段时间内能做到所有的方面，但是我们至少知道了自己可以发展的方向，以及我们所特有的优势和技能。</p>\n<p>敏捷中的QA因为要关注的方面更多了，所以有些可以代理出去的工作可以让其他角色辅助，而不必事必躬亲；但是我们自身所特有的技能，并不是能代理出去或者其他角色能轻易达到的。</p>\n<p>如果下次有人在问我文章开头的问题，我会开心的告诉他：“欢迎你来取代我。”而他／她付出的会是“一万小时“的时间来成为QA方面的专家。到那时候，就不是取代我，而是成为我了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>随着业界对敏捷开发的逐步了解，经常有同事和朋友问我，你们现在敏捷里注重测试，所以每个人都在进行测试，甚至以前测试人员所认可的发展方向：自动化测试，都让开发人员参与了很多，那你们QA是不是会被取代呢？</p>\n<p>听到这么一说，我真是猛然感觉到危机感，不过细想了一下，如果QA会被取代，就说明他／她的工作不重要或者不必要。既然这样，就还是从QA工作内容开始看看和分析吧：</p>\n<ol>\n<li>让我们先从敏捷QA最早涉足的活动，业务需求分析入手。在业务分析阶段，QA可以通过自己的丰富知识，包括测试设计和分析的能力（例如实例化需求）来帮助业务分析人员以及客户发现遗漏的需求，以及从技术层面避免出现依赖等不合理的需求问题。</li>\n<li>在开发过程中，虽然开发人员参与了不少的自动化测试的活动：单元测试和功能性测试等。不过这里需要说明的是：单元测试基本都是由开发人员负责完成的，更多的是侧重于代码中方法调用及模块调用这一层级的。而开发人员参与的功能性测试，更多的是从自动化测试实现方面出发的。究其原因，开发人员的编码技能一般来说都要熟练于QA。但是QA在这些活动中也在提供着自身不可替代的作用：根据单元测试，功能测试的完成度和覆盖率，更有指导性地规划项目中的测试金字塔；而且运用测试设计的能力，设计自动化测试的场景以及用例，以保证在最小最有效的测试场景和用例集中，完成尽可能高的功能场景的覆盖。我相信除非是像QA这样在测试设计方面倾注了很大的心血和时间，不然很难有能力设计这些架构和场景。而且QA也是可以写自动化测试的啊！</li>\n<li>而在手动测试本身，基于自动化测试的覆盖力度，我们做得更多的是探索性的测试，而非基于明确的验收标准或者测试用例的验证性的测试。你也许会问那谁来做验证性测试，答案是开发人员、QA和业务分析人员一起在故事卡开发完成时来做的，而不是推到QA一个人的身上。对于探索性测试，QA采取了更有针对性和目的性的方法：根据对现有系统的理解和分析，归纳和总结出用户行为和功能点，然后以此为依据，开辟一段单独的时间，来对特定的行为和功能进行开放性的测试。这对于我们验收性的测试，是一种非常有效的补充。</li>\n<li>在手动测试结束后，QA很多时候还承担了和客户沟通需求以及演示产品的职责，这样他／她们对于产品的认识有了更全面的了解，以及为什么需要这么做；同时客户对于他／她们的信任程度也提高了，从而更容易接受他／她们提出的建议。正因为这样，QA担任PM和IM也是很常见的。</li>\n</ol>\n<p>除此之外，QA一般还会负责性能测试和安全性测试这些非功能性测试，以保证项目在各方面都有品质的保证。</p>\n<p>在具体测试当中，QA发挥了关键的作用；在其他方面，QA也发挥了不可取代的作用。</p>\n<ol>\n<li>首先，从项目整体上来说，对于项目部署和运维，QA也是很有发言权的。因为测试的过程中包含了这些部分。对于通过脚本部署产品，通过log分析和定位bug，QA对开发人员甚至运维人员都能提供帮助。</li>\n<li>其次 ，在敏捷里，QA不仅测试的是产品本身，还需要对项目中的一切进行测试，这就包括了项目流程以及各阶段的分析工作。合理和优化的项目流程能帮助团队“更高、更快、更强”地达到目标，而QA有很好的全局观，所以很自然地会更关注于流程的优化。对于分析工作，敏捷的QA不仅仅是测试，更重要的是对现有结果进行分析和估计，有针对性地提出专业性的建议，便于项目组下一阶段目标的制定。</li>\n</ol>\n<p>看到以上罗列的这些工作内容，有一个问题自然地会浮现在脑海里：“这么多工作，都是从理论上说的，QA能都做到吗？”答案你我都知道，不可能。实际项目中的QA能做到很大一部分已经很不容易了。但是就像其他角色一样，不可能在同时段时间内能做到所有的方面，但是我们至少知道了自己可以发展的方向，以及我们所特有的优势和技能。</p>\n<p>敏捷中的QA因为要关注的方面更多了，所以有些可以代理出去的工作可以让其他角色辅助，而不必事必躬亲；但是我们自身所特有的技能，并不是能代理出去或者其他角色能轻易达到的。</p>\n<p>如果下次有人在问我文章开头的问题，我会开心的告诉他：“欢迎你来取代我。”而他／她付出的会是“一万小时“的时间来成为QA方面的专家。到那时候，就不是取代我，而是成为我了。</p>\n"},{"title":"移动app测试的22条军规","date":"2014-09-27T14:00:00.000Z","comments":1,"_content":"\n随着现在智能手机的大规模普及，移动app的使用也越来越广泛，导致了大量公司进入移动app开发领域。这一趋势带来的挑战是产品需要以更高的品质，在更短的时间内投放到市场，并不断得到改进。\n\n移动app可以分为原生app和混合Hybrid app，它相对于传统的桌面应用来说有着诸多不同，工具和方法论的相对缺乏导致移动app的测试给测试人员带来了更多的挑战。笔者经过两年多对电信运营商的移动门户app的测试，总结出以下对于原生app的测试经验和实践（其实对于Hybrid app，这些经验和实践在很大程度上也是通用的）。\n\n## 1. 设备和平台\n\n由于移动设备的碎片化（操作系统，设备硬件，屏幕尺寸，分辨率，像素密度），从资源和投入产出比的考虑出发，测试人员不可能穷尽所有设备和操作系统的版本来进行全覆盖的测试，从而需要根据目标用户的分布来选择需要测试的设备。通常，我们使用Google Analytics或Adobe Omniture来统计目标用户的分布，还需要考虑各种操作系统所占用户的比率，这个可以通过Apple和Google官方发布的版本占有率来了解。https://developer.apple.com/support/appstore/ 和 http://developer.android.com/about/dashboards/index.html 。\n\n## 2. 移动网络切换\n\n由于移动app的特殊性－移动着应用，导致了我们需要更加关注移动网络变化对于app的影响，比如，不同网络（3g，4g，Wi-Fi）之间的使用和切换，无网络和/或Wi-Fi时，开启飞行模式时，对于需要进行网络注册并拿到信令的app会有比较大的影响；同时我们需要对这些情况进行异常处理，比如提供明确而人性化的提示。\n\n## 3. 多任务处理\n\n在智能手机上我们经常会同时执行多个app，这就要求我们对于app切换做处理。其中包括用户从一个app切换到其它的app，甚至是从后台关闭app，需要考虑是否对用户的当前操作进行保存，以及用户再次打开/恢复app的时候，需要进行什么操作。\n\n## 4. 手势操作\n\n当前主流操作系统都支持手势操作，而app的手势有可能会和操作系统的手势冲突。比如iOS7开始支持的屏幕左边缘右滑返回上一级的手势操作，就和之前很多app的抽屉式导航操作起了冲突。细节可以参考http://www.zhihu.com/question/21198233 。\n\n## 5. 用户体验\n\n我们不仅要考虑到横竖屏对app显示的影响，app对辅助功能accessibility的支持程度，还需要在认识到由于iOS和Android不同的设计风格和规范，app需要尽可能在不同设备上保持和操作系统使用习惯的一致性。对于同时需要支持Web和app的产品，在app上通过WebView实现Web功能时，需要考虑app上的显示问题。\n\n## 6. 通知和消息\n\n我们需要关注app运行时在通知栏的显示，以及如何展示app的消息推送(通知栏和app图标上的计数，尤其是后者计数超过99个时如何显示)。除此之外还需要考虑在安装和使用app过程中，app是否明确展示出应用对于数据流量，对使用关乎用户敏感信息的的传感器（如蓝牙和GPS等）进行提示。\n\n## 7. 操作系统特性\n\n对于支持widget的iOS和Android app，在测试时应该把widget当成一项单独而重要的功能进行测试。对于app在Android上的安装和使用，也需要测试其对于Dalvik和ART的支持。对于iOS来说，如果应用支持在设置中对app进行设置，我们也需要对这种设置方式进行测试。\n\n## 8. 不同设备信息同步\n\n如果app同时支持多个设备和操作系统，而且用户数据存放在服务器的时候，我们就需要验证这些信息在一个设备改变，其它设备需要相应地同步这些改变，尤其是当app有信息缓存机制的时候。\n\n## 9. 特定设备\n\n除了操作系统版本和硬件不同之外，不同的设备还可能因设备商定制的用户界面（比如三星的TouchWiz，HTC的Sense，魅族的Flyme和LG的UX等），而产生显示甚至功能的不一致。例如HTC Sense 4.0时，当我们打开多任务界面，app显示的是一个截图，但实际我们点击进入app，会看到不同的页面。此外这些用户界面默认的字体不同很可能会对app的展示产生影响。\n\n## 10. 多文件格式支持\n\n对不同格式的文件，不同设备的展示也可能有很大不同。比如PDF文件，在iOS上默认支持，所以可以直接打开；而在Android上我们就需要考虑需要如何展示了，因为Android没有原生支持PDF。如果app还需要支持其他诸如微软的Office文件，各类图片和视频等，我们就更需要注意在各个平台上，尤其是没有相应的软件处理这些文件时，需要如何处理了。\n\n## 11. 国家和地区支持\n\n由于使用app的用户可以来自任何一个国家和地区，使用任何一种语言，所以在app安装和使用过程中，我们也需要考虑对于主要通用的语言（例如中文，英语，法语），时间和日期格式，尤其是不同输入法的兼容性。\n\n## 12. 高内存占用\n\n由于iOS和Android对于单个app使用的内存大小有限制，所以对于耗费内存的操作，比如处理高分辨率图片、语音和视频时，在开发中都建议单独启动新的进程来处理。因此我们在测试中也需要针对这个特点，对于耗费内存高的操作进行测试。\n\n## 13. 非标准控件\n\n在特定的版本上，我们想要app支持某种特性，可是操作系统并没有提供，我们很可能自己设计控件，或者利用第三方库来实现这个功能。一个例子就是在iOS7原生并不支持通知中心的widget。这种实现方式需要测试人员对于这个控件/库本身进行更多集成测试，确保它的功能以及和其它控件在app中行为的一致性。对于非标准控件，我们需要尽可能少地使用，因为在操作系统升级过程中，这些非标准控件很可能会被标准化，并且采用不同的方式实现，从而影响app的编码和测试。\n\n## 14. App升级管理\n\n绝大多数app都会持续更新，为用户带来新的功能和体验。用户在进行app升级的过程中，通常采用的是增量安装或者覆盖安装的方式，而不会先删除app再全新安装。所以在app升级的过程中，我们需要测试用户信息在升级后是否能正常显示，特别是当app升级涉及到app的数据库结构变化时。相应地，在用户删除app时，我们也需要考虑对app信息的删除。\n\n## 15. App缓存机制\n\n一般app为了减少用户流量的使用，会缓存那些不常变化的数据；对于定期变化的数据，也会周期性地更新。对于这些数据，我们需要确保当它们变化后，app能及时更新和显示这些信息。\n\n## 16. 第三方app集成和调用\n\n对于第三方app集成例如Google Map需要进行集成测试，另外还需要测试app中对于第三方app的调用（比如分享到微信）。\n\n## 17. App依赖\n\n尽量减少app对第三方系统/app和WebService的依赖关系，会有助于项目的准时发布和测试复杂度的简化。而为了确保这些依赖功能的完整性，我们需要对这些依赖进行API和集成测试。\n\n## 18. 自动化测试和探索式测试\n\nApp自动化测试不仅需要在开发过程中进行单元测试，还需要对WebService进行自动化测试。另外，对于界面测试，由于现有自动化测试工具和框架不够成熟，测试人员在利用这些工具自动化测试用户旅程的同时，还需要更多地关注页面跳转和数据在不同页面间的流动，这是因为单元测试可以比较全面地覆盖每个activity和view内部的功能，但是对于页面跳转和不同页面间数据流动和展示等需要涉及到多个页面的流程操作，手动测试尤其是探索式测试就显得尤为重要。值得一提的是，自动化测试中应该尽可能多地使用模拟器来进行测试，这里推荐使用Genymotion做为默认的Android模拟器，而在探索式测试中，我们推荐使用实际设备来做测试。\n\n## 19. 安全测试\n\nApp安全测试包括测试手机上SQLite数据库的加密存储，验证app对发送请求中关于用户信息字段的加密等。可以使用的工具有iPhone Configuration Utility和Android DDMS。我们还可以通过使用这些工具分析log（还有iOS的XCode）， 方便地定位bug。对于app使用到的WebService的安全测试则可以参考桌面应用的安全测试方法。\n\n## 20. 性能测试\n\n移动app也会涉及到性能测试，包括不同网络环境下app的连接速度和操作流畅度，以及使用的WebService的性能。\n\n## 21. 操作系统升级\n\n在操作系统进行早期测试和开发的时候，开发团队会根据新的特性和设计规范，设计并实施app的更新。对于测试人员来说，当操作系统升级时，需要参考操作系统的文档，对于新的特性和设计及时了解，在进行当前操作系统版本app回归测试的同时，进行包含新操作系统版本特性和设计的app适应性测试。\n\n## 22. 持续集成和持续部署\n\n持续集成的目的是通过在模拟器上运行自动化测试有效地发现app的稳定性问题。虽然对于实际设备上app的持续部署我们现在没有办法实现全自动化，但是我们可以通过一些别的办法尽量简化这一过程，比如使用TestFlight来分发iOS app，使用Dropbox来分发Android app等。\n\n<br>\n这些实践和经验不一定能解决你在项目中所遇到的原生应用测试的所有问题，不过希望能起到抛砖引玉的作用，给大家带来更多的思考，继而带来更多的分享。\n\n移动app的兴起经历了从简单到多功能化的发展过程，随着技术的进步和思想的解放，我们拥有了更好更丰富的移动app，而且这一趋势仍旧在持续发展；同样对于移动app的测试，我们也正在经历从摸索到形成如同桌面应用类似的测试模式、方法和实践。对于测试人员来说，这是最坏的时候，这也是最好的时候，这是最该投身到移动app测试的时候。\n\n[这里](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Pro_Mobile_App_Testing_With_22_Rules.pdf)有关于本文演讲内容的PDF可以参考。","source":"_posts/Mobile_App_Testing_With_22_Rules.md","raw":"title: 移动app测试的22条军规\ndate: 2014-09-28\ncategories:\n- Test\ntags:\n- Mobile\n- App Testing\n- Rules\ncomments: true\n---\n\n随着现在智能手机的大规模普及，移动app的使用也越来越广泛，导致了大量公司进入移动app开发领域。这一趋势带来的挑战是产品需要以更高的品质，在更短的时间内投放到市场，并不断得到改进。\n\n移动app可以分为原生app和混合Hybrid app，它相对于传统的桌面应用来说有着诸多不同，工具和方法论的相对缺乏导致移动app的测试给测试人员带来了更多的挑战。笔者经过两年多对电信运营商的移动门户app的测试，总结出以下对于原生app的测试经验和实践（其实对于Hybrid app，这些经验和实践在很大程度上也是通用的）。\n\n## 1. 设备和平台\n\n由于移动设备的碎片化（操作系统，设备硬件，屏幕尺寸，分辨率，像素密度），从资源和投入产出比的考虑出发，测试人员不可能穷尽所有设备和操作系统的版本来进行全覆盖的测试，从而需要根据目标用户的分布来选择需要测试的设备。通常，我们使用Google Analytics或Adobe Omniture来统计目标用户的分布，还需要考虑各种操作系统所占用户的比率，这个可以通过Apple和Google官方发布的版本占有率来了解。https://developer.apple.com/support/appstore/ 和 http://developer.android.com/about/dashboards/index.html 。\n\n## 2. 移动网络切换\n\n由于移动app的特殊性－移动着应用，导致了我们需要更加关注移动网络变化对于app的影响，比如，不同网络（3g，4g，Wi-Fi）之间的使用和切换，无网络和/或Wi-Fi时，开启飞行模式时，对于需要进行网络注册并拿到信令的app会有比较大的影响；同时我们需要对这些情况进行异常处理，比如提供明确而人性化的提示。\n\n## 3. 多任务处理\n\n在智能手机上我们经常会同时执行多个app，这就要求我们对于app切换做处理。其中包括用户从一个app切换到其它的app，甚至是从后台关闭app，需要考虑是否对用户的当前操作进行保存，以及用户再次打开/恢复app的时候，需要进行什么操作。\n\n## 4. 手势操作\n\n当前主流操作系统都支持手势操作，而app的手势有可能会和操作系统的手势冲突。比如iOS7开始支持的屏幕左边缘右滑返回上一级的手势操作，就和之前很多app的抽屉式导航操作起了冲突。细节可以参考http://www.zhihu.com/question/21198233 。\n\n## 5. 用户体验\n\n我们不仅要考虑到横竖屏对app显示的影响，app对辅助功能accessibility的支持程度，还需要在认识到由于iOS和Android不同的设计风格和规范，app需要尽可能在不同设备上保持和操作系统使用习惯的一致性。对于同时需要支持Web和app的产品，在app上通过WebView实现Web功能时，需要考虑app上的显示问题。\n\n## 6. 通知和消息\n\n我们需要关注app运行时在通知栏的显示，以及如何展示app的消息推送(通知栏和app图标上的计数，尤其是后者计数超过99个时如何显示)。除此之外还需要考虑在安装和使用app过程中，app是否明确展示出应用对于数据流量，对使用关乎用户敏感信息的的传感器（如蓝牙和GPS等）进行提示。\n\n## 7. 操作系统特性\n\n对于支持widget的iOS和Android app，在测试时应该把widget当成一项单独而重要的功能进行测试。对于app在Android上的安装和使用，也需要测试其对于Dalvik和ART的支持。对于iOS来说，如果应用支持在设置中对app进行设置，我们也需要对这种设置方式进行测试。\n\n## 8. 不同设备信息同步\n\n如果app同时支持多个设备和操作系统，而且用户数据存放在服务器的时候，我们就需要验证这些信息在一个设备改变，其它设备需要相应地同步这些改变，尤其是当app有信息缓存机制的时候。\n\n## 9. 特定设备\n\n除了操作系统版本和硬件不同之外，不同的设备还可能因设备商定制的用户界面（比如三星的TouchWiz，HTC的Sense，魅族的Flyme和LG的UX等），而产生显示甚至功能的不一致。例如HTC Sense 4.0时，当我们打开多任务界面，app显示的是一个截图，但实际我们点击进入app，会看到不同的页面。此外这些用户界面默认的字体不同很可能会对app的展示产生影响。\n\n## 10. 多文件格式支持\n\n对不同格式的文件，不同设备的展示也可能有很大不同。比如PDF文件，在iOS上默认支持，所以可以直接打开；而在Android上我们就需要考虑需要如何展示了，因为Android没有原生支持PDF。如果app还需要支持其他诸如微软的Office文件，各类图片和视频等，我们就更需要注意在各个平台上，尤其是没有相应的软件处理这些文件时，需要如何处理了。\n\n## 11. 国家和地区支持\n\n由于使用app的用户可以来自任何一个国家和地区，使用任何一种语言，所以在app安装和使用过程中，我们也需要考虑对于主要通用的语言（例如中文，英语，法语），时间和日期格式，尤其是不同输入法的兼容性。\n\n## 12. 高内存占用\n\n由于iOS和Android对于单个app使用的内存大小有限制，所以对于耗费内存的操作，比如处理高分辨率图片、语音和视频时，在开发中都建议单独启动新的进程来处理。因此我们在测试中也需要针对这个特点，对于耗费内存高的操作进行测试。\n\n## 13. 非标准控件\n\n在特定的版本上，我们想要app支持某种特性，可是操作系统并没有提供，我们很可能自己设计控件，或者利用第三方库来实现这个功能。一个例子就是在iOS7原生并不支持通知中心的widget。这种实现方式需要测试人员对于这个控件/库本身进行更多集成测试，确保它的功能以及和其它控件在app中行为的一致性。对于非标准控件，我们需要尽可能少地使用，因为在操作系统升级过程中，这些非标准控件很可能会被标准化，并且采用不同的方式实现，从而影响app的编码和测试。\n\n## 14. App升级管理\n\n绝大多数app都会持续更新，为用户带来新的功能和体验。用户在进行app升级的过程中，通常采用的是增量安装或者覆盖安装的方式，而不会先删除app再全新安装。所以在app升级的过程中，我们需要测试用户信息在升级后是否能正常显示，特别是当app升级涉及到app的数据库结构变化时。相应地，在用户删除app时，我们也需要考虑对app信息的删除。\n\n## 15. App缓存机制\n\n一般app为了减少用户流量的使用，会缓存那些不常变化的数据；对于定期变化的数据，也会周期性地更新。对于这些数据，我们需要确保当它们变化后，app能及时更新和显示这些信息。\n\n## 16. 第三方app集成和调用\n\n对于第三方app集成例如Google Map需要进行集成测试，另外还需要测试app中对于第三方app的调用（比如分享到微信）。\n\n## 17. App依赖\n\n尽量减少app对第三方系统/app和WebService的依赖关系，会有助于项目的准时发布和测试复杂度的简化。而为了确保这些依赖功能的完整性，我们需要对这些依赖进行API和集成测试。\n\n## 18. 自动化测试和探索式测试\n\nApp自动化测试不仅需要在开发过程中进行单元测试，还需要对WebService进行自动化测试。另外，对于界面测试，由于现有自动化测试工具和框架不够成熟，测试人员在利用这些工具自动化测试用户旅程的同时，还需要更多地关注页面跳转和数据在不同页面间的流动，这是因为单元测试可以比较全面地覆盖每个activity和view内部的功能，但是对于页面跳转和不同页面间数据流动和展示等需要涉及到多个页面的流程操作，手动测试尤其是探索式测试就显得尤为重要。值得一提的是，自动化测试中应该尽可能多地使用模拟器来进行测试，这里推荐使用Genymotion做为默认的Android模拟器，而在探索式测试中，我们推荐使用实际设备来做测试。\n\n## 19. 安全测试\n\nApp安全测试包括测试手机上SQLite数据库的加密存储，验证app对发送请求中关于用户信息字段的加密等。可以使用的工具有iPhone Configuration Utility和Android DDMS。我们还可以通过使用这些工具分析log（还有iOS的XCode）， 方便地定位bug。对于app使用到的WebService的安全测试则可以参考桌面应用的安全测试方法。\n\n## 20. 性能测试\n\n移动app也会涉及到性能测试，包括不同网络环境下app的连接速度和操作流畅度，以及使用的WebService的性能。\n\n## 21. 操作系统升级\n\n在操作系统进行早期测试和开发的时候，开发团队会根据新的特性和设计规范，设计并实施app的更新。对于测试人员来说，当操作系统升级时，需要参考操作系统的文档，对于新的特性和设计及时了解，在进行当前操作系统版本app回归测试的同时，进行包含新操作系统版本特性和设计的app适应性测试。\n\n## 22. 持续集成和持续部署\n\n持续集成的目的是通过在模拟器上运行自动化测试有效地发现app的稳定性问题。虽然对于实际设备上app的持续部署我们现在没有办法实现全自动化，但是我们可以通过一些别的办法尽量简化这一过程，比如使用TestFlight来分发iOS app，使用Dropbox来分发Android app等。\n\n<br>\n这些实践和经验不一定能解决你在项目中所遇到的原生应用测试的所有问题，不过希望能起到抛砖引玉的作用，给大家带来更多的思考，继而带来更多的分享。\n\n移动app的兴起经历了从简单到多功能化的发展过程，随着技术的进步和思想的解放，我们拥有了更好更丰富的移动app，而且这一趋势仍旧在持续发展；同样对于移动app的测试，我们也正在经历从摸索到形成如同桌面应用类似的测试模式、方法和实践。对于测试人员来说，这是最坏的时候，这也是最好的时候，这是最该投身到移动app测试的时候。\n\n[这里](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Pro_Mobile_App_Testing_With_22_Rules.pdf)有关于本文演讲内容的PDF可以参考。","slug":"Mobile_App_Testing_With_22_Rules","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu5h0031y73n2r52vs5q","layout":"post","photos":[],"link":"","content":"<p>随着现在智能手机的大规模普及，移动app的使用也越来越广泛，导致了大量公司进入移动app开发领域。这一趋势带来的挑战是产品需要以更高的品质，在更短的时间内投放到市场，并不断得到改进。</p>\n<p>移动app可以分为原生app和混合Hybrid app，它相对于传统的桌面应用来说有着诸多不同，工具和方法论的相对缺乏导致移动app的测试给测试人员带来了更多的挑战。笔者经过两年多对电信运营商的移动门户app的测试，总结出以下对于原生app的测试经验和实践（其实对于Hybrid app，这些经验和实践在很大程度上也是通用的）。</p>\n<h2 id=\"1-_设备和平台\">1. 设备和平台</h2><p>由于移动设备的碎片化（操作系统，设备硬件，屏幕尺寸，分辨率，像素密度），从资源和投入产出比的考虑出发，测试人员不可能穷尽所有设备和操作系统的版本来进行全覆盖的测试，从而需要根据目标用户的分布来选择需要测试的设备。通常，我们使用Google Analytics或Adobe Omniture来统计目标用户的分布，还需要考虑各种操作系统所占用户的比率，这个可以通过Apple和Google官方发布的版本占有率来了解。<a href=\"https://developer.apple.com/support/appstore/\" target=\"_blank\" rel=\"external\">https://developer.apple.com/support/appstore/</a> 和 <a href=\"http://developer.android.com/about/dashboards/index.html\" target=\"_blank\" rel=\"external\">http://developer.android.com/about/dashboards/index.html</a> 。</p>\n<h2 id=\"2-_移动网络切换\">2. 移动网络切换</h2><p>由于移动app的特殊性－移动着应用，导致了我们需要更加关注移动网络变化对于app的影响，比如，不同网络（3g，4g，Wi-Fi）之间的使用和切换，无网络和/或Wi-Fi时，开启飞行模式时，对于需要进行网络注册并拿到信令的app会有比较大的影响；同时我们需要对这些情况进行异常处理，比如提供明确而人性化的提示。</p>\n<h2 id=\"3-_多任务处理\">3. 多任务处理</h2><p>在智能手机上我们经常会同时执行多个app，这就要求我们对于app切换做处理。其中包括用户从一个app切换到其它的app，甚至是从后台关闭app，需要考虑是否对用户的当前操作进行保存，以及用户再次打开/恢复app的时候，需要进行什么操作。</p>\n<h2 id=\"4-_手势操作\">4. 手势操作</h2><p>当前主流操作系统都支持手势操作，而app的手势有可能会和操作系统的手势冲突。比如iOS7开始支持的屏幕左边缘右滑返回上一级的手势操作，就和之前很多app的抽屉式导航操作起了冲突。细节可以参考<a href=\"http://www.zhihu.com/question/21198233\" target=\"_blank\" rel=\"external\">http://www.zhihu.com/question/21198233</a> 。</p>\n<h2 id=\"5-_用户体验\">5. 用户体验</h2><p>我们不仅要考虑到横竖屏对app显示的影响，app对辅助功能accessibility的支持程度，还需要在认识到由于iOS和Android不同的设计风格和规范，app需要尽可能在不同设备上保持和操作系统使用习惯的一致性。对于同时需要支持Web和app的产品，在app上通过WebView实现Web功能时，需要考虑app上的显示问题。</p>\n<h2 id=\"6-_通知和消息\">6. 通知和消息</h2><p>我们需要关注app运行时在通知栏的显示，以及如何展示app的消息推送(通知栏和app图标上的计数，尤其是后者计数超过99个时如何显示)。除此之外还需要考虑在安装和使用app过程中，app是否明确展示出应用对于数据流量，对使用关乎用户敏感信息的的传感器（如蓝牙和GPS等）进行提示。</p>\n<h2 id=\"7-_操作系统特性\">7. 操作系统特性</h2><p>对于支持widget的iOS和Android app，在测试时应该把widget当成一项单独而重要的功能进行测试。对于app在Android上的安装和使用，也需要测试其对于Dalvik和ART的支持。对于iOS来说，如果应用支持在设置中对app进行设置，我们也需要对这种设置方式进行测试。</p>\n<h2 id=\"8-_不同设备信息同步\">8. 不同设备信息同步</h2><p>如果app同时支持多个设备和操作系统，而且用户数据存放在服务器的时候，我们就需要验证这些信息在一个设备改变，其它设备需要相应地同步这些改变，尤其是当app有信息缓存机制的时候。</p>\n<h2 id=\"9-_特定设备\">9. 特定设备</h2><p>除了操作系统版本和硬件不同之外，不同的设备还可能因设备商定制的用户界面（比如三星的TouchWiz，HTC的Sense，魅族的Flyme和LG的UX等），而产生显示甚至功能的不一致。例如HTC Sense 4.0时，当我们打开多任务界面，app显示的是一个截图，但实际我们点击进入app，会看到不同的页面。此外这些用户界面默认的字体不同很可能会对app的展示产生影响。</p>\n<h2 id=\"10-_多文件格式支持\">10. 多文件格式支持</h2><p>对不同格式的文件，不同设备的展示也可能有很大不同。比如PDF文件，在iOS上默认支持，所以可以直接打开；而在Android上我们就需要考虑需要如何展示了，因为Android没有原生支持PDF。如果app还需要支持其他诸如微软的Office文件，各类图片和视频等，我们就更需要注意在各个平台上，尤其是没有相应的软件处理这些文件时，需要如何处理了。</p>\n<h2 id=\"11-_国家和地区支持\">11. 国家和地区支持</h2><p>由于使用app的用户可以来自任何一个国家和地区，使用任何一种语言，所以在app安装和使用过程中，我们也需要考虑对于主要通用的语言（例如中文，英语，法语），时间和日期格式，尤其是不同输入法的兼容性。</p>\n<h2 id=\"12-_高内存占用\">12. 高内存占用</h2><p>由于iOS和Android对于单个app使用的内存大小有限制，所以对于耗费内存的操作，比如处理高分辨率图片、语音和视频时，在开发中都建议单独启动新的进程来处理。因此我们在测试中也需要针对这个特点，对于耗费内存高的操作进行测试。</p>\n<h2 id=\"13-_非标准控件\">13. 非标准控件</h2><p>在特定的版本上，我们想要app支持某种特性，可是操作系统并没有提供，我们很可能自己设计控件，或者利用第三方库来实现这个功能。一个例子就是在iOS7原生并不支持通知中心的widget。这种实现方式需要测试人员对于这个控件/库本身进行更多集成测试，确保它的功能以及和其它控件在app中行为的一致性。对于非标准控件，我们需要尽可能少地使用，因为在操作系统升级过程中，这些非标准控件很可能会被标准化，并且采用不同的方式实现，从而影响app的编码和测试。</p>\n<h2 id=\"14-_App升级管理\">14. App升级管理</h2><p>绝大多数app都会持续更新，为用户带来新的功能和体验。用户在进行app升级的过程中，通常采用的是增量安装或者覆盖安装的方式，而不会先删除app再全新安装。所以在app升级的过程中，我们需要测试用户信息在升级后是否能正常显示，特别是当app升级涉及到app的数据库结构变化时。相应地，在用户删除app时，我们也需要考虑对app信息的删除。</p>\n<h2 id=\"15-_App缓存机制\">15. App缓存机制</h2><p>一般app为了减少用户流量的使用，会缓存那些不常变化的数据；对于定期变化的数据，也会周期性地更新。对于这些数据，我们需要确保当它们变化后，app能及时更新和显示这些信息。</p>\n<h2 id=\"16-_第三方app集成和调用\">16. 第三方app集成和调用</h2><p>对于第三方app集成例如Google Map需要进行集成测试，另外还需要测试app中对于第三方app的调用（比如分享到微信）。</p>\n<h2 id=\"17-_App依赖\">17. App依赖</h2><p>尽量减少app对第三方系统/app和WebService的依赖关系，会有助于项目的准时发布和测试复杂度的简化。而为了确保这些依赖功能的完整性，我们需要对这些依赖进行API和集成测试。</p>\n<h2 id=\"18-_自动化测试和探索式测试\">18. 自动化测试和探索式测试</h2><p>App自动化测试不仅需要在开发过程中进行单元测试，还需要对WebService进行自动化测试。另外，对于界面测试，由于现有自动化测试工具和框架不够成熟，测试人员在利用这些工具自动化测试用户旅程的同时，还需要更多地关注页面跳转和数据在不同页面间的流动，这是因为单元测试可以比较全面地覆盖每个activity和view内部的功能，但是对于页面跳转和不同页面间数据流动和展示等需要涉及到多个页面的流程操作，手动测试尤其是探索式测试就显得尤为重要。值得一提的是，自动化测试中应该尽可能多地使用模拟器来进行测试，这里推荐使用Genymotion做为默认的Android模拟器，而在探索式测试中，我们推荐使用实际设备来做测试。</p>\n<h2 id=\"19-_安全测试\">19. 安全测试</h2><p>App安全测试包括测试手机上SQLite数据库的加密存储，验证app对发送请求中关于用户信息字段的加密等。可以使用的工具有iPhone Configuration Utility和Android DDMS。我们还可以通过使用这些工具分析log（还有iOS的XCode）， 方便地定位bug。对于app使用到的WebService的安全测试则可以参考桌面应用的安全测试方法。</p>\n<h2 id=\"20-_性能测试\">20. 性能测试</h2><p>移动app也会涉及到性能测试，包括不同网络环境下app的连接速度和操作流畅度，以及使用的WebService的性能。</p>\n<h2 id=\"21-_操作系统升级\">21. 操作系统升级</h2><p>在操作系统进行早期测试和开发的时候，开发团队会根据新的特性和设计规范，设计并实施app的更新。对于测试人员来说，当操作系统升级时，需要参考操作系统的文档，对于新的特性和设计及时了解，在进行当前操作系统版本app回归测试的同时，进行包含新操作系统版本特性和设计的app适应性测试。</p>\n<h2 id=\"22-_持续集成和持续部署\">22. 持续集成和持续部署</h2><p>持续集成的目的是通过在模拟器上运行自动化测试有效地发现app的稳定性问题。虽然对于实际设备上app的持续部署我们现在没有办法实现全自动化，但是我们可以通过一些别的办法尽量简化这一过程，比如使用TestFlight来分发iOS app，使用Dropbox来分发Android app等。</p>\n<p><br><br>这些实践和经验不一定能解决你在项目中所遇到的原生应用测试的所有问题，不过希望能起到抛砖引玉的作用，给大家带来更多的思考，继而带来更多的分享。</p>\n<p>移动app的兴起经历了从简单到多功能化的发展过程，随着技术的进步和思想的解放，我们拥有了更好更丰富的移动app，而且这一趋势仍旧在持续发展；同样对于移动app的测试，我们也正在经历从摸索到形成如同桌面应用类似的测试模式、方法和实践。对于测试人员来说，这是最坏的时候，这也是最好的时候，这是最该投身到移动app测试的时候。</p>\n<p><a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Pro_Mobile_App_Testing_With_22_Rules.pdf\" target=\"_blank\" rel=\"external\">这里</a>有关于本文演讲内容的PDF可以参考。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>随着现在智能手机的大规模普及，移动app的使用也越来越广泛，导致了大量公司进入移动app开发领域。这一趋势带来的挑战是产品需要以更高的品质，在更短的时间内投放到市场，并不断得到改进。</p>\n<p>移动app可以分为原生app和混合Hybrid app，它相对于传统的桌面应用来说有着诸多不同，工具和方法论的相对缺乏导致移动app的测试给测试人员带来了更多的挑战。笔者经过两年多对电信运营商的移动门户app的测试，总结出以下对于原生app的测试经验和实践（其实对于Hybrid app，这些经验和实践在很大程度上也是通用的）。</p>\n<h2 id=\"1-_设备和平台\">1. 设备和平台</h2><p>由于移动设备的碎片化（操作系统，设备硬件，屏幕尺寸，分辨率，像素密度），从资源和投入产出比的考虑出发，测试人员不可能穷尽所有设备和操作系统的版本来进行全覆盖的测试，从而需要根据目标用户的分布来选择需要测试的设备。通常，我们使用Google Analytics或Adobe Omniture来统计目标用户的分布，还需要考虑各种操作系统所占用户的比率，这个可以通过Apple和Google官方发布的版本占有率来了解。<a href=\"https://developer.apple.com/support/appstore/\" target=\"_blank\" rel=\"external\">https://developer.apple.com/support/appstore/</a> 和 <a href=\"http://developer.android.com/about/dashboards/index.html\" target=\"_blank\" rel=\"external\">http://developer.android.com/about/dashboards/index.html</a> 。</p>\n<h2 id=\"2-_移动网络切换\">2. 移动网络切换</h2><p>由于移动app的特殊性－移动着应用，导致了我们需要更加关注移动网络变化对于app的影响，比如，不同网络（3g，4g，Wi-Fi）之间的使用和切换，无网络和/或Wi-Fi时，开启飞行模式时，对于需要进行网络注册并拿到信令的app会有比较大的影响；同时我们需要对这些情况进行异常处理，比如提供明确而人性化的提示。</p>\n<h2 id=\"3-_多任务处理\">3. 多任务处理</h2><p>在智能手机上我们经常会同时执行多个app，这就要求我们对于app切换做处理。其中包括用户从一个app切换到其它的app，甚至是从后台关闭app，需要考虑是否对用户的当前操作进行保存，以及用户再次打开/恢复app的时候，需要进行什么操作。</p>\n<h2 id=\"4-_手势操作\">4. 手势操作</h2><p>当前主流操作系统都支持手势操作，而app的手势有可能会和操作系统的手势冲突。比如iOS7开始支持的屏幕左边缘右滑返回上一级的手势操作，就和之前很多app的抽屉式导航操作起了冲突。细节可以参考<a href=\"http://www.zhihu.com/question/21198233\" target=\"_blank\" rel=\"external\">http://www.zhihu.com/question/21198233</a> 。</p>\n<h2 id=\"5-_用户体验\">5. 用户体验</h2><p>我们不仅要考虑到横竖屏对app显示的影响，app对辅助功能accessibility的支持程度，还需要在认识到由于iOS和Android不同的设计风格和规范，app需要尽可能在不同设备上保持和操作系统使用习惯的一致性。对于同时需要支持Web和app的产品，在app上通过WebView实现Web功能时，需要考虑app上的显示问题。</p>\n<h2 id=\"6-_通知和消息\">6. 通知和消息</h2><p>我们需要关注app运行时在通知栏的显示，以及如何展示app的消息推送(通知栏和app图标上的计数，尤其是后者计数超过99个时如何显示)。除此之外还需要考虑在安装和使用app过程中，app是否明确展示出应用对于数据流量，对使用关乎用户敏感信息的的传感器（如蓝牙和GPS等）进行提示。</p>\n<h2 id=\"7-_操作系统特性\">7. 操作系统特性</h2><p>对于支持widget的iOS和Android app，在测试时应该把widget当成一项单独而重要的功能进行测试。对于app在Android上的安装和使用，也需要测试其对于Dalvik和ART的支持。对于iOS来说，如果应用支持在设置中对app进行设置，我们也需要对这种设置方式进行测试。</p>\n<h2 id=\"8-_不同设备信息同步\">8. 不同设备信息同步</h2><p>如果app同时支持多个设备和操作系统，而且用户数据存放在服务器的时候，我们就需要验证这些信息在一个设备改变，其它设备需要相应地同步这些改变，尤其是当app有信息缓存机制的时候。</p>\n<h2 id=\"9-_特定设备\">9. 特定设备</h2><p>除了操作系统版本和硬件不同之外，不同的设备还可能因设备商定制的用户界面（比如三星的TouchWiz，HTC的Sense，魅族的Flyme和LG的UX等），而产生显示甚至功能的不一致。例如HTC Sense 4.0时，当我们打开多任务界面，app显示的是一个截图，但实际我们点击进入app，会看到不同的页面。此外这些用户界面默认的字体不同很可能会对app的展示产生影响。</p>\n<h2 id=\"10-_多文件格式支持\">10. 多文件格式支持</h2><p>对不同格式的文件，不同设备的展示也可能有很大不同。比如PDF文件，在iOS上默认支持，所以可以直接打开；而在Android上我们就需要考虑需要如何展示了，因为Android没有原生支持PDF。如果app还需要支持其他诸如微软的Office文件，各类图片和视频等，我们就更需要注意在各个平台上，尤其是没有相应的软件处理这些文件时，需要如何处理了。</p>\n<h2 id=\"11-_国家和地区支持\">11. 国家和地区支持</h2><p>由于使用app的用户可以来自任何一个国家和地区，使用任何一种语言，所以在app安装和使用过程中，我们也需要考虑对于主要通用的语言（例如中文，英语，法语），时间和日期格式，尤其是不同输入法的兼容性。</p>\n<h2 id=\"12-_高内存占用\">12. 高内存占用</h2><p>由于iOS和Android对于单个app使用的内存大小有限制，所以对于耗费内存的操作，比如处理高分辨率图片、语音和视频时，在开发中都建议单独启动新的进程来处理。因此我们在测试中也需要针对这个特点，对于耗费内存高的操作进行测试。</p>\n<h2 id=\"13-_非标准控件\">13. 非标准控件</h2><p>在特定的版本上，我们想要app支持某种特性，可是操作系统并没有提供，我们很可能自己设计控件，或者利用第三方库来实现这个功能。一个例子就是在iOS7原生并不支持通知中心的widget。这种实现方式需要测试人员对于这个控件/库本身进行更多集成测试，确保它的功能以及和其它控件在app中行为的一致性。对于非标准控件，我们需要尽可能少地使用，因为在操作系统升级过程中，这些非标准控件很可能会被标准化，并且采用不同的方式实现，从而影响app的编码和测试。</p>\n<h2 id=\"14-_App升级管理\">14. App升级管理</h2><p>绝大多数app都会持续更新，为用户带来新的功能和体验。用户在进行app升级的过程中，通常采用的是增量安装或者覆盖安装的方式，而不会先删除app再全新安装。所以在app升级的过程中，我们需要测试用户信息在升级后是否能正常显示，特别是当app升级涉及到app的数据库结构变化时。相应地，在用户删除app时，我们也需要考虑对app信息的删除。</p>\n<h2 id=\"15-_App缓存机制\">15. App缓存机制</h2><p>一般app为了减少用户流量的使用，会缓存那些不常变化的数据；对于定期变化的数据，也会周期性地更新。对于这些数据，我们需要确保当它们变化后，app能及时更新和显示这些信息。</p>\n<h2 id=\"16-_第三方app集成和调用\">16. 第三方app集成和调用</h2><p>对于第三方app集成例如Google Map需要进行集成测试，另外还需要测试app中对于第三方app的调用（比如分享到微信）。</p>\n<h2 id=\"17-_App依赖\">17. App依赖</h2><p>尽量减少app对第三方系统/app和WebService的依赖关系，会有助于项目的准时发布和测试复杂度的简化。而为了确保这些依赖功能的完整性，我们需要对这些依赖进行API和集成测试。</p>\n<h2 id=\"18-_自动化测试和探索式测试\">18. 自动化测试和探索式测试</h2><p>App自动化测试不仅需要在开发过程中进行单元测试，还需要对WebService进行自动化测试。另外，对于界面测试，由于现有自动化测试工具和框架不够成熟，测试人员在利用这些工具自动化测试用户旅程的同时，还需要更多地关注页面跳转和数据在不同页面间的流动，这是因为单元测试可以比较全面地覆盖每个activity和view内部的功能，但是对于页面跳转和不同页面间数据流动和展示等需要涉及到多个页面的流程操作，手动测试尤其是探索式测试就显得尤为重要。值得一提的是，自动化测试中应该尽可能多地使用模拟器来进行测试，这里推荐使用Genymotion做为默认的Android模拟器，而在探索式测试中，我们推荐使用实际设备来做测试。</p>\n<h2 id=\"19-_安全测试\">19. 安全测试</h2><p>App安全测试包括测试手机上SQLite数据库的加密存储，验证app对发送请求中关于用户信息字段的加密等。可以使用的工具有iPhone Configuration Utility和Android DDMS。我们还可以通过使用这些工具分析log（还有iOS的XCode）， 方便地定位bug。对于app使用到的WebService的安全测试则可以参考桌面应用的安全测试方法。</p>\n<h2 id=\"20-_性能测试\">20. 性能测试</h2><p>移动app也会涉及到性能测试，包括不同网络环境下app的连接速度和操作流畅度，以及使用的WebService的性能。</p>\n<h2 id=\"21-_操作系统升级\">21. 操作系统升级</h2><p>在操作系统进行早期测试和开发的时候，开发团队会根据新的特性和设计规范，设计并实施app的更新。对于测试人员来说，当操作系统升级时，需要参考操作系统的文档，对于新的特性和设计及时了解，在进行当前操作系统版本app回归测试的同时，进行包含新操作系统版本特性和设计的app适应性测试。</p>\n<h2 id=\"22-_持续集成和持续部署\">22. 持续集成和持续部署</h2><p>持续集成的目的是通过在模拟器上运行自动化测试有效地发现app的稳定性问题。虽然对于实际设备上app的持续部署我们现在没有办法实现全自动化，但是我们可以通过一些别的办法尽量简化这一过程，比如使用TestFlight来分发iOS app，使用Dropbox来分发Android app等。</p>\n<p><br><br>这些实践和经验不一定能解决你在项目中所遇到的原生应用测试的所有问题，不过希望能起到抛砖引玉的作用，给大家带来更多的思考，继而带来更多的分享。</p>\n<p>移动app的兴起经历了从简单到多功能化的发展过程，随着技术的进步和思想的解放，我们拥有了更好更丰富的移动app，而且这一趋势仍旧在持续发展；同样对于移动app的测试，我们也正在经历从摸索到形成如同桌面应用类似的测试模式、方法和实践。对于测试人员来说，这是最坏的时候，这也是最好的时候，这是最该投身到移动app测试的时候。</p>\n<p><a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Pro_Mobile_App_Testing_With_22_Rules.pdf\" target=\"_blank\" rel=\"external\">这里</a>有关于本文演讲内容的PDF可以参考。</p>\n"},{"title":"如何出一本技术书","date":"2016-01-27T13:00:00.000Z","comments":1,"_content":"\n根据我自己出书的一些经验，给大家一些启发。\n\n### 如何出一本技术书\n----\n####首先，你得有好的内容\n1. 内容的独特性和稀缺性会影响出版社对于销售量的预期，内容的针对性会决定读者的数量，从而一定程度影响出版社的销售预期。\n2. 此外，内容的丰富程度和详实程度，会影响读者对于书的理解，也会影响你通过这本书，对于读者的影响力。\n\n####认识出版社编辑\n1. 认识一个技术类别的出版社编辑，不仅能帮助你调整文章结构，给你专业性的意见和鼓励，也能在你没有想法的时候，给你一些灵感或者方向，从而开始写作或者继续写新作。\n2. 认识编辑不需要去出版社门口蹲守，可以在会议上演讲，也可以通过线下活动的交流，甚至参与会议等机会相识。很多出版社都会派编辑去参加各种活动，无论是出于宣传出版社和新书，亦或是去找演讲者进行书籍出版的沟通。\n\n####确定参与人员\n1. 在开始正式写书之前，需要确定有多少人参与写书。一般来说书籍封面上的著者（或者译者）不超过4人；如果超过4人，其他人只能写在内页上，而且这个人数也一般不超过6人。另一种办法就是著者写成某一组织，但是这对于个人品牌的建立有影响，需要权衡。\n2. 确保著者少而精也有个好处，就是能让决策更快，讨论和执行效率更高。\n\n####分析和明确读者群体\n1. 不同群体的读者对于书籍的要求是不一样的。例如初级读者很可能需要在书中阐述基础知识和理论，而中级读者更多希望得到实践经验以及可以借鉴和启发的内容，高级读者需要技术内容更深入，最好能剖析问题的实质。\n2. 针对不同读者的需求，我们的书写方向和写作形式也会不同。初级读者很可能需要有代入感的故事，中级读者之需要介绍关键细节和可扩展的知识，而高级读者更希望了解问题的技术解决点和核心内容。\n\n####编写大纲\n1. 大纲能帮助我们确定书写的范围，协助我们思考怎样衔接不同的章节，以及如何组织内容。\n2. 大纲的另一个作用就是可以帮助我们检查自己的进度，保证按时交稿。\n3. 大纲完成后也需要和编辑进行确认，保证方向和内容没有偏差。\n\n####撰写样章\n1. 样章的作用在于确保我们书写的风格以及内容是编辑和出版社接受的。\n2. 同时样章可以让我们知道自己哪一方面知识储备需要提高，从而对书写有更明确的目标和估计。这就和我们在项目中对于技术难点进行Spike一样。\n3. 对样章的反馈需要及时调整，确保样章修改达到编辑的期望后再进行后续章节的书写。\n4. 对于样章我们需要更加关注，因为之后的章节基本都会仿照样章的模式进行书写，所以一定要确定样章可以作为后续章节书写的模版。对于多人合著，样章也可以统一大家的风格。\n\n####签订合同\n1. 在完成读者定位，大纲撰写，样章审核之后，一般只要再加上著者的介绍，就可以进行正式的书写阶段了。\n2. 在这个时间段，编辑一般会邀请你到出版社签订正式的出版合同，确定你的出版收益，交稿时间，出版时间等。\n3. 出版收益主要分为一次性版税和版税抽成。如果出版数量比较少，文字量大，可能一次性版税（按照字数付稿酬）比较划算，如果出版数量比较多，或者预期之后还会加印，可以选择版税抽成。\n4. 版税抽成一般在8%～12%，如果是畅销书作者，可能会更高。决定这一比率的因素很多，比如作者知名度，市场上相关书籍的稀缺度，出版社的大小，和编辑的熟悉程度（:P）等。\n5. 版税抽成还分成首次出版抽成以及加印抽成。首次出版时犹豫出版社需要负责宣传和推广，所以基本是在抽成比例中只支付80%。\n6. 合同中还会确定版税抽成的支付时间。\n7. 合同也会明确著者需要多少本样书进行宣传。\n\n####撰写内容\n1. 准备完成后就需要进行书写了。在书写过程中需要不断与编辑进行沟通，并让编辑对写好的章节反馈修改意见。\n2. 在发送给编辑审核之前，最好自己能先看一遍，有条件的话找专人审核与校对，会对文章的质量有不小的提升。\n3. 尽量在文章中提供配图。一是能补充文字不能表述的一些细节和相关内容，以可视化的方式呈现给读者；而是能让读者看书的体验更生动，理解更透彻。\n4. 保留书中所用到的图片资源，以及脚本，程序等各种使用到的资源并存档。后续的出版阶段会用到。\n5. 引用不同书籍和文章的地方，需要指出引用的是哪篇文章，原文是什么等信息。这里由于大家不是专业编辑，可以整理一份参考文献的内容，随书写好一起发送给编辑。\n6. 在书写过程中，尤其是多人合著，需要先确定术语如何翻译，如何使用。例如如果是写给初学者的，采用故事的写法，主人公的一些设定也是需要固定下来的。\n7. 对于章节中的内容，也需要分成不同小结和主题，进行论述。不然读者很容易失去焦点。而且在现在时间碎片化的社会趋势，如果能分成小的主题，而能带给读者一些思考，恐怕对读者的帮助更大。\n\n####邀请名人写序言\n1. 尤其对于第一次出书的人，找名人写序言很重要。找名人写序言不仅能促进书籍的宣传，也能让他们提供意见进行及时的改进。\n2. 这其实也是一个更好的机会认识这一领域的资深人士，为之后更深入广泛的合作打好基础。\n\n####根据反馈进行最后调整\n1. 准备好序言以及书稿之后，需要把这些内容发给编辑进行最后的审核，并更具编辑的意见进行最后的调整。\n2. 由于排版的需要，一般书稿的配图都需要重新调整，这时就需要用到写书稿时保存的这些资源。这些图片资源也是需要发给编辑的。\n3. 最后需要附带自己的一张照片，这也是会印刷在书中的。\n\n####参加各种宣传活动\n1. 书籍印刷出版前后，出版社一般都会组织不少活动进行宣传。作为著者，需要尽可能地参加，帮助宣传。这些宣传活动不仅有线上的，包括主题问答（开源中国的高手问答）等形式；也有线下的，比如各种会议的主题演讲和沙龙，甚至签售。\n2. 也可以自己在各种社交媒体上宣传自己的新书。这对于有不少粉丝的著者来说更有效果。\n\n####关注读者反馈\n1. 随着书籍的销售，我们也会获得读者对于书籍的反馈。利用这些反馈，我们可能会对书籍进行更正，或者对后续书写新的书籍明确方向。\n2. 获取反馈的渠道可以通过出版社，也可以通过网上出售书籍的网站获得用户反馈。","source":"_posts/How_To_Publish_A_Technical_Book.md","raw":"title: 如何出一本技术书\ndate: 2016-01-28\ncategories:\n- Test\ntags:\n- Book\n- Publish\ncomments: true\n---\n\n根据我自己出书的一些经验，给大家一些启发。\n\n### 如何出一本技术书\n----\n####首先，你得有好的内容\n1. 内容的独特性和稀缺性会影响出版社对于销售量的预期，内容的针对性会决定读者的数量，从而一定程度影响出版社的销售预期。\n2. 此外，内容的丰富程度和详实程度，会影响读者对于书的理解，也会影响你通过这本书，对于读者的影响力。\n\n####认识出版社编辑\n1. 认识一个技术类别的出版社编辑，不仅能帮助你调整文章结构，给你专业性的意见和鼓励，也能在你没有想法的时候，给你一些灵感或者方向，从而开始写作或者继续写新作。\n2. 认识编辑不需要去出版社门口蹲守，可以在会议上演讲，也可以通过线下活动的交流，甚至参与会议等机会相识。很多出版社都会派编辑去参加各种活动，无论是出于宣传出版社和新书，亦或是去找演讲者进行书籍出版的沟通。\n\n####确定参与人员\n1. 在开始正式写书之前，需要确定有多少人参与写书。一般来说书籍封面上的著者（或者译者）不超过4人；如果超过4人，其他人只能写在内页上，而且这个人数也一般不超过6人。另一种办法就是著者写成某一组织，但是这对于个人品牌的建立有影响，需要权衡。\n2. 确保著者少而精也有个好处，就是能让决策更快，讨论和执行效率更高。\n\n####分析和明确读者群体\n1. 不同群体的读者对于书籍的要求是不一样的。例如初级读者很可能需要在书中阐述基础知识和理论，而中级读者更多希望得到实践经验以及可以借鉴和启发的内容，高级读者需要技术内容更深入，最好能剖析问题的实质。\n2. 针对不同读者的需求，我们的书写方向和写作形式也会不同。初级读者很可能需要有代入感的故事，中级读者之需要介绍关键细节和可扩展的知识，而高级读者更希望了解问题的技术解决点和核心内容。\n\n####编写大纲\n1. 大纲能帮助我们确定书写的范围，协助我们思考怎样衔接不同的章节，以及如何组织内容。\n2. 大纲的另一个作用就是可以帮助我们检查自己的进度，保证按时交稿。\n3. 大纲完成后也需要和编辑进行确认，保证方向和内容没有偏差。\n\n####撰写样章\n1. 样章的作用在于确保我们书写的风格以及内容是编辑和出版社接受的。\n2. 同时样章可以让我们知道自己哪一方面知识储备需要提高，从而对书写有更明确的目标和估计。这就和我们在项目中对于技术难点进行Spike一样。\n3. 对样章的反馈需要及时调整，确保样章修改达到编辑的期望后再进行后续章节的书写。\n4. 对于样章我们需要更加关注，因为之后的章节基本都会仿照样章的模式进行书写，所以一定要确定样章可以作为后续章节书写的模版。对于多人合著，样章也可以统一大家的风格。\n\n####签订合同\n1. 在完成读者定位，大纲撰写，样章审核之后，一般只要再加上著者的介绍，就可以进行正式的书写阶段了。\n2. 在这个时间段，编辑一般会邀请你到出版社签订正式的出版合同，确定你的出版收益，交稿时间，出版时间等。\n3. 出版收益主要分为一次性版税和版税抽成。如果出版数量比较少，文字量大，可能一次性版税（按照字数付稿酬）比较划算，如果出版数量比较多，或者预期之后还会加印，可以选择版税抽成。\n4. 版税抽成一般在8%～12%，如果是畅销书作者，可能会更高。决定这一比率的因素很多，比如作者知名度，市场上相关书籍的稀缺度，出版社的大小，和编辑的熟悉程度（:P）等。\n5. 版税抽成还分成首次出版抽成以及加印抽成。首次出版时犹豫出版社需要负责宣传和推广，所以基本是在抽成比例中只支付80%。\n6. 合同中还会确定版税抽成的支付时间。\n7. 合同也会明确著者需要多少本样书进行宣传。\n\n####撰写内容\n1. 准备完成后就需要进行书写了。在书写过程中需要不断与编辑进行沟通，并让编辑对写好的章节反馈修改意见。\n2. 在发送给编辑审核之前，最好自己能先看一遍，有条件的话找专人审核与校对，会对文章的质量有不小的提升。\n3. 尽量在文章中提供配图。一是能补充文字不能表述的一些细节和相关内容，以可视化的方式呈现给读者；而是能让读者看书的体验更生动，理解更透彻。\n4. 保留书中所用到的图片资源，以及脚本，程序等各种使用到的资源并存档。后续的出版阶段会用到。\n5. 引用不同书籍和文章的地方，需要指出引用的是哪篇文章，原文是什么等信息。这里由于大家不是专业编辑，可以整理一份参考文献的内容，随书写好一起发送给编辑。\n6. 在书写过程中，尤其是多人合著，需要先确定术语如何翻译，如何使用。例如如果是写给初学者的，采用故事的写法，主人公的一些设定也是需要固定下来的。\n7. 对于章节中的内容，也需要分成不同小结和主题，进行论述。不然读者很容易失去焦点。而且在现在时间碎片化的社会趋势，如果能分成小的主题，而能带给读者一些思考，恐怕对读者的帮助更大。\n\n####邀请名人写序言\n1. 尤其对于第一次出书的人，找名人写序言很重要。找名人写序言不仅能促进书籍的宣传，也能让他们提供意见进行及时的改进。\n2. 这其实也是一个更好的机会认识这一领域的资深人士，为之后更深入广泛的合作打好基础。\n\n####根据反馈进行最后调整\n1. 准备好序言以及书稿之后，需要把这些内容发给编辑进行最后的审核，并更具编辑的意见进行最后的调整。\n2. 由于排版的需要，一般书稿的配图都需要重新调整，这时就需要用到写书稿时保存的这些资源。这些图片资源也是需要发给编辑的。\n3. 最后需要附带自己的一张照片，这也是会印刷在书中的。\n\n####参加各种宣传活动\n1. 书籍印刷出版前后，出版社一般都会组织不少活动进行宣传。作为著者，需要尽可能地参加，帮助宣传。这些宣传活动不仅有线上的，包括主题问答（开源中国的高手问答）等形式；也有线下的，比如各种会议的主题演讲和沙龙，甚至签售。\n2. 也可以自己在各种社交媒体上宣传自己的新书。这对于有不少粉丝的著者来说更有效果。\n\n####关注读者反馈\n1. 随着书籍的销售，我们也会获得读者对于书籍的反馈。利用这些反馈，我们可能会对书籍进行更正，或者对后续书写新的书籍明确方向。\n2. 获取反馈的渠道可以通过出版社，也可以通过网上出售书籍的网站获得用户反馈。","slug":"How_To_Publish_A_Technical_Book","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu5j0038y73n9188jpdi","layout":"post","photos":[],"link":"","content":"<p>根据我自己出书的一些经验，给大家一些启发。</p>\n<h3 id=\"如何出一本技术书\">如何出一本技术书</h3><hr>\n<h4 id=\"首先，你得有好的内容\">首先，你得有好的内容</h4><ol>\n<li>内容的独特性和稀缺性会影响出版社对于销售量的预期，内容的针对性会决定读者的数量，从而一定程度影响出版社的销售预期。</li>\n<li>此外，内容的丰富程度和详实程度，会影响读者对于书的理解，也会影响你通过这本书，对于读者的影响力。</li>\n</ol>\n<h4 id=\"认识出版社编辑\">认识出版社编辑</h4><ol>\n<li>认识一个技术类别的出版社编辑，不仅能帮助你调整文章结构，给你专业性的意见和鼓励，也能在你没有想法的时候，给你一些灵感或者方向，从而开始写作或者继续写新作。</li>\n<li>认识编辑不需要去出版社门口蹲守，可以在会议上演讲，也可以通过线下活动的交流，甚至参与会议等机会相识。很多出版社都会派编辑去参加各种活动，无论是出于宣传出版社和新书，亦或是去找演讲者进行书籍出版的沟通。</li>\n</ol>\n<h4 id=\"确定参与人员\">确定参与人员</h4><ol>\n<li>在开始正式写书之前，需要确定有多少人参与写书。一般来说书籍封面上的著者（或者译者）不超过4人；如果超过4人，其他人只能写在内页上，而且这个人数也一般不超过6人。另一种办法就是著者写成某一组织，但是这对于个人品牌的建立有影响，需要权衡。</li>\n<li>确保著者少而精也有个好处，就是能让决策更快，讨论和执行效率更高。</li>\n</ol>\n<h4 id=\"分析和明确读者群体\">分析和明确读者群体</h4><ol>\n<li>不同群体的读者对于书籍的要求是不一样的。例如初级读者很可能需要在书中阐述基础知识和理论，而中级读者更多希望得到实践经验以及可以借鉴和启发的内容，高级读者需要技术内容更深入，最好能剖析问题的实质。</li>\n<li>针对不同读者的需求，我们的书写方向和写作形式也会不同。初级读者很可能需要有代入感的故事，中级读者之需要介绍关键细节和可扩展的知识，而高级读者更希望了解问题的技术解决点和核心内容。</li>\n</ol>\n<h4 id=\"编写大纲\">编写大纲</h4><ol>\n<li>大纲能帮助我们确定书写的范围，协助我们思考怎样衔接不同的章节，以及如何组织内容。</li>\n<li>大纲的另一个作用就是可以帮助我们检查自己的进度，保证按时交稿。</li>\n<li>大纲完成后也需要和编辑进行确认，保证方向和内容没有偏差。</li>\n</ol>\n<h4 id=\"撰写样章\">撰写样章</h4><ol>\n<li>样章的作用在于确保我们书写的风格以及内容是编辑和出版社接受的。</li>\n<li>同时样章可以让我们知道自己哪一方面知识储备需要提高，从而对书写有更明确的目标和估计。这就和我们在项目中对于技术难点进行Spike一样。</li>\n<li>对样章的反馈需要及时调整，确保样章修改达到编辑的期望后再进行后续章节的书写。</li>\n<li>对于样章我们需要更加关注，因为之后的章节基本都会仿照样章的模式进行书写，所以一定要确定样章可以作为后续章节书写的模版。对于多人合著，样章也可以统一大家的风格。</li>\n</ol>\n<h4 id=\"签订合同\">签订合同</h4><ol>\n<li>在完成读者定位，大纲撰写，样章审核之后，一般只要再加上著者的介绍，就可以进行正式的书写阶段了。</li>\n<li>在这个时间段，编辑一般会邀请你到出版社签订正式的出版合同，确定你的出版收益，交稿时间，出版时间等。</li>\n<li>出版收益主要分为一次性版税和版税抽成。如果出版数量比较少，文字量大，可能一次性版税（按照字数付稿酬）比较划算，如果出版数量比较多，或者预期之后还会加印，可以选择版税抽成。</li>\n<li>版税抽成一般在8%～12%，如果是畅销书作者，可能会更高。决定这一比率的因素很多，比如作者知名度，市场上相关书籍的稀缺度，出版社的大小，和编辑的熟悉程度（:P）等。</li>\n<li>版税抽成还分成首次出版抽成以及加印抽成。首次出版时犹豫出版社需要负责宣传和推广，所以基本是在抽成比例中只支付80%。</li>\n<li>合同中还会确定版税抽成的支付时间。</li>\n<li>合同也会明确著者需要多少本样书进行宣传。</li>\n</ol>\n<h4 id=\"撰写内容\">撰写内容</h4><ol>\n<li>准备完成后就需要进行书写了。在书写过程中需要不断与编辑进行沟通，并让编辑对写好的章节反馈修改意见。</li>\n<li>在发送给编辑审核之前，最好自己能先看一遍，有条件的话找专人审核与校对，会对文章的质量有不小的提升。</li>\n<li>尽量在文章中提供配图。一是能补充文字不能表述的一些细节和相关内容，以可视化的方式呈现给读者；而是能让读者看书的体验更生动，理解更透彻。</li>\n<li>保留书中所用到的图片资源，以及脚本，程序等各种使用到的资源并存档。后续的出版阶段会用到。</li>\n<li>引用不同书籍和文章的地方，需要指出引用的是哪篇文章，原文是什么等信息。这里由于大家不是专业编辑，可以整理一份参考文献的内容，随书写好一起发送给编辑。</li>\n<li>在书写过程中，尤其是多人合著，需要先确定术语如何翻译，如何使用。例如如果是写给初学者的，采用故事的写法，主人公的一些设定也是需要固定下来的。</li>\n<li>对于章节中的内容，也需要分成不同小结和主题，进行论述。不然读者很容易失去焦点。而且在现在时间碎片化的社会趋势，如果能分成小的主题，而能带给读者一些思考，恐怕对读者的帮助更大。</li>\n</ol>\n<h4 id=\"邀请名人写序言\">邀请名人写序言</h4><ol>\n<li>尤其对于第一次出书的人，找名人写序言很重要。找名人写序言不仅能促进书籍的宣传，也能让他们提供意见进行及时的改进。</li>\n<li>这其实也是一个更好的机会认识这一领域的资深人士，为之后更深入广泛的合作打好基础。</li>\n</ol>\n<h4 id=\"根据反馈进行最后调整\">根据反馈进行最后调整</h4><ol>\n<li>准备好序言以及书稿之后，需要把这些内容发给编辑进行最后的审核，并更具编辑的意见进行最后的调整。</li>\n<li>由于排版的需要，一般书稿的配图都需要重新调整，这时就需要用到写书稿时保存的这些资源。这些图片资源也是需要发给编辑的。</li>\n<li>最后需要附带自己的一张照片，这也是会印刷在书中的。</li>\n</ol>\n<h4 id=\"参加各种宣传活动\">参加各种宣传活动</h4><ol>\n<li>书籍印刷出版前后，出版社一般都会组织不少活动进行宣传。作为著者，需要尽可能地参加，帮助宣传。这些宣传活动不仅有线上的，包括主题问答（开源中国的高手问答）等形式；也有线下的，比如各种会议的主题演讲和沙龙，甚至签售。</li>\n<li>也可以自己在各种社交媒体上宣传自己的新书。这对于有不少粉丝的著者来说更有效果。</li>\n</ol>\n<h4 id=\"关注读者反馈\">关注读者反馈</h4><ol>\n<li>随着书籍的销售，我们也会获得读者对于书籍的反馈。利用这些反馈，我们可能会对书籍进行更正，或者对后续书写新的书籍明确方向。</li>\n<li>获取反馈的渠道可以通过出版社，也可以通过网上出售书籍的网站获得用户反馈。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>根据我自己出书的一些经验，给大家一些启发。</p>\n<h3 id=\"如何出一本技术书\">如何出一本技术书</h3><hr>\n<h4 id=\"首先，你得有好的内容\">首先，你得有好的内容</h4><ol>\n<li>内容的独特性和稀缺性会影响出版社对于销售量的预期，内容的针对性会决定读者的数量，从而一定程度影响出版社的销售预期。</li>\n<li>此外，内容的丰富程度和详实程度，会影响读者对于书的理解，也会影响你通过这本书，对于读者的影响力。</li>\n</ol>\n<h4 id=\"认识出版社编辑\">认识出版社编辑</h4><ol>\n<li>认识一个技术类别的出版社编辑，不仅能帮助你调整文章结构，给你专业性的意见和鼓励，也能在你没有想法的时候，给你一些灵感或者方向，从而开始写作或者继续写新作。</li>\n<li>认识编辑不需要去出版社门口蹲守，可以在会议上演讲，也可以通过线下活动的交流，甚至参与会议等机会相识。很多出版社都会派编辑去参加各种活动，无论是出于宣传出版社和新书，亦或是去找演讲者进行书籍出版的沟通。</li>\n</ol>\n<h4 id=\"确定参与人员\">确定参与人员</h4><ol>\n<li>在开始正式写书之前，需要确定有多少人参与写书。一般来说书籍封面上的著者（或者译者）不超过4人；如果超过4人，其他人只能写在内页上，而且这个人数也一般不超过6人。另一种办法就是著者写成某一组织，但是这对于个人品牌的建立有影响，需要权衡。</li>\n<li>确保著者少而精也有个好处，就是能让决策更快，讨论和执行效率更高。</li>\n</ol>\n<h4 id=\"分析和明确读者群体\">分析和明确读者群体</h4><ol>\n<li>不同群体的读者对于书籍的要求是不一样的。例如初级读者很可能需要在书中阐述基础知识和理论，而中级读者更多希望得到实践经验以及可以借鉴和启发的内容，高级读者需要技术内容更深入，最好能剖析问题的实质。</li>\n<li>针对不同读者的需求，我们的书写方向和写作形式也会不同。初级读者很可能需要有代入感的故事，中级读者之需要介绍关键细节和可扩展的知识，而高级读者更希望了解问题的技术解决点和核心内容。</li>\n</ol>\n<h4 id=\"编写大纲\">编写大纲</h4><ol>\n<li>大纲能帮助我们确定书写的范围，协助我们思考怎样衔接不同的章节，以及如何组织内容。</li>\n<li>大纲的另一个作用就是可以帮助我们检查自己的进度，保证按时交稿。</li>\n<li>大纲完成后也需要和编辑进行确认，保证方向和内容没有偏差。</li>\n</ol>\n<h4 id=\"撰写样章\">撰写样章</h4><ol>\n<li>样章的作用在于确保我们书写的风格以及内容是编辑和出版社接受的。</li>\n<li>同时样章可以让我们知道自己哪一方面知识储备需要提高，从而对书写有更明确的目标和估计。这就和我们在项目中对于技术难点进行Spike一样。</li>\n<li>对样章的反馈需要及时调整，确保样章修改达到编辑的期望后再进行后续章节的书写。</li>\n<li>对于样章我们需要更加关注，因为之后的章节基本都会仿照样章的模式进行书写，所以一定要确定样章可以作为后续章节书写的模版。对于多人合著，样章也可以统一大家的风格。</li>\n</ol>\n<h4 id=\"签订合同\">签订合同</h4><ol>\n<li>在完成读者定位，大纲撰写，样章审核之后，一般只要再加上著者的介绍，就可以进行正式的书写阶段了。</li>\n<li>在这个时间段，编辑一般会邀请你到出版社签订正式的出版合同，确定你的出版收益，交稿时间，出版时间等。</li>\n<li>出版收益主要分为一次性版税和版税抽成。如果出版数量比较少，文字量大，可能一次性版税（按照字数付稿酬）比较划算，如果出版数量比较多，或者预期之后还会加印，可以选择版税抽成。</li>\n<li>版税抽成一般在8%～12%，如果是畅销书作者，可能会更高。决定这一比率的因素很多，比如作者知名度，市场上相关书籍的稀缺度，出版社的大小，和编辑的熟悉程度（:P）等。</li>\n<li>版税抽成还分成首次出版抽成以及加印抽成。首次出版时犹豫出版社需要负责宣传和推广，所以基本是在抽成比例中只支付80%。</li>\n<li>合同中还会确定版税抽成的支付时间。</li>\n<li>合同也会明确著者需要多少本样书进行宣传。</li>\n</ol>\n<h4 id=\"撰写内容\">撰写内容</h4><ol>\n<li>准备完成后就需要进行书写了。在书写过程中需要不断与编辑进行沟通，并让编辑对写好的章节反馈修改意见。</li>\n<li>在发送给编辑审核之前，最好自己能先看一遍，有条件的话找专人审核与校对，会对文章的质量有不小的提升。</li>\n<li>尽量在文章中提供配图。一是能补充文字不能表述的一些细节和相关内容，以可视化的方式呈现给读者；而是能让读者看书的体验更生动，理解更透彻。</li>\n<li>保留书中所用到的图片资源，以及脚本，程序等各种使用到的资源并存档。后续的出版阶段会用到。</li>\n<li>引用不同书籍和文章的地方，需要指出引用的是哪篇文章，原文是什么等信息。这里由于大家不是专业编辑，可以整理一份参考文献的内容，随书写好一起发送给编辑。</li>\n<li>在书写过程中，尤其是多人合著，需要先确定术语如何翻译，如何使用。例如如果是写给初学者的，采用故事的写法，主人公的一些设定也是需要固定下来的。</li>\n<li>对于章节中的内容，也需要分成不同小结和主题，进行论述。不然读者很容易失去焦点。而且在现在时间碎片化的社会趋势，如果能分成小的主题，而能带给读者一些思考，恐怕对读者的帮助更大。</li>\n</ol>\n<h4 id=\"邀请名人写序言\">邀请名人写序言</h4><ol>\n<li>尤其对于第一次出书的人，找名人写序言很重要。找名人写序言不仅能促进书籍的宣传，也能让他们提供意见进行及时的改进。</li>\n<li>这其实也是一个更好的机会认识这一领域的资深人士，为之后更深入广泛的合作打好基础。</li>\n</ol>\n<h4 id=\"根据反馈进行最后调整\">根据反馈进行最后调整</h4><ol>\n<li>准备好序言以及书稿之后，需要把这些内容发给编辑进行最后的审核，并更具编辑的意见进行最后的调整。</li>\n<li>由于排版的需要，一般书稿的配图都需要重新调整，这时就需要用到写书稿时保存的这些资源。这些图片资源也是需要发给编辑的。</li>\n<li>最后需要附带自己的一张照片，这也是会印刷在书中的。</li>\n</ol>\n<h4 id=\"参加各种宣传活动\">参加各种宣传活动</h4><ol>\n<li>书籍印刷出版前后，出版社一般都会组织不少活动进行宣传。作为著者，需要尽可能地参加，帮助宣传。这些宣传活动不仅有线上的，包括主题问答（开源中国的高手问答）等形式；也有线下的，比如各种会议的主题演讲和沙龙，甚至签售。</li>\n<li>也可以自己在各种社交媒体上宣传自己的新书。这对于有不少粉丝的著者来说更有效果。</li>\n</ol>\n<h4 id=\"关注读者反馈\">关注读者反馈</h4><ol>\n<li>随着书籍的销售，我们也会获得读者对于书籍的反馈。利用这些反馈，我们可能会对书籍进行更正，或者对后续书写新的书籍明确方向。</li>\n<li>获取反馈的渠道可以通过出版社，也可以通过网上出售书籍的网站获得用户反馈。</li>\n</ol>\n"},{"title":"How Google Test Software","date":"2012-06-28T14:00:00.000Z","comments":1,"_content":"读《Google软件测试之道》后把一些重要的内容记录下来。\n\n### 1.质量不等同于测试\n* 质量是通过融合开发和测试，直至两者融为不能区分彼此的同一个体而达到的。\n* 测试是开发不可分割的一部分，开发和测试的结合会产生质量。\n* 把测试当做软件的feature。软件工程所交付的不是code，不是test，而是product，所以得让code和test集成在一起。\n\n### 2.测试环境\n* 小型测试（mock/fake环境）\n* 中型测试（mock/fake或真实环境）\n* 大型测试（真实环境）\n* 在小型和中型测试上强调自动化测试覆盖率，但在端到端测试时并不强调，避免投入过多，并且和特定功能设计绑定\n* 大、中、小型测试比例为1:2:7\n\n### 3.测试类型\n* 小型测试：测试代码单元的行为\n* 中型测试：测试一个或多个代码单元之间的交互\n* 大型测试：测试整个系统的工作\n* 小型测试保证代码质量，中型和大型测试保证产品质量\n\n### 4.测试认证级别\n* 5个级别：1～5，5级为最高\n* 分级依据\n     - 测试覆盖率\n     - 分层测试情况\n     - 持续集成\n     - 缺陷和测试用例的关系\n\n### 5.详细测试认证级别\n* 第1级\n     - 添加测试覆盖率的bundle\n     - 搭建持续集成环境\n     - 按照大、中、小型测试来区分测试\n     - 识别具有不确定性的测试\n     - 创建冒烟测试集\n* 第5级：\n     - 为每一个非关键的bug添加测试\n     - 主动使用各类分析工具\n     - 总的测试覆盖率超过60%\n\n### 6.文档\n* 所有Google项目都有设计文档\n* 设计文档是一个动态的文档（活文档，Living Document），随着项目的演化也在不断地保持更新\n\n### 7.测试人员分类\n* 测试开发工程师（SET）\n* 测试工程师（TE）\n* 测试工程经理\n\n### 8.测试人员职责\n* SET主要负责mock/fake、API测试、测试工具、CI工具，更偏向于代码开发。\n* TE是面向用户的测试，具备测试代码开发和用户为中心测试的双重能力。 \n* TE完成测试整个过程，风险评估、测试计划、测试设计、测试执行、探索式测试、用户反馈。 \n* 测试工程经理，把TE和SET联系起来，需要足够的技术能力，需要足够了解产品，也需要知人善用的能力。\n\n### 9.测试人员的未来\n* 测试开发工程师将变成开发人员，而测试开发工程师所具备的测试技能将被平均地分散到各个层级的开发工程师身上。 \n* 测试工程师会转型成为测试设计师。测试工程师可以成为如安全工程师这样的专家型角色，或者作为测试活动的管理者。 \n* 技术型测试主管，更多地成为资深工程师，同时作为思想领袖和协调者存在。测试活动由具体工作在产品上的人们负责。 \n* 测试开发工程师，测试工程师和测试经理分散到各个项目团队中去，更少关注测试流程，更多关注产品本身。\n\n### 10.测试的未来\n* 测试基础设施会最终整体迁移到云端。\n* 测试用例库，测试代码的编辑、录制和执行都将在一个网站或通过浏览器插件完成。\n* 测试编写、执行和调试需要使用与被测的应用程序本身相同的语言和环境才最为高效。 \n\n### 11.Google测试的原则和秘方\n* Google测试的原则：Ship early and often；Fail fast \n* Google测试的秘方：技能、稀缺、自动化、迭代集成","source":"_posts/How_Google_Test_Software.md","raw":"title: How Google Test Software\ndate: 2012-06-29\ncategories:\n- Test\n- Tester\ntags:\n- Google\n- Methodology\n- Theory\ncomments: true\n---\n读《Google软件测试之道》后把一些重要的内容记录下来。\n\n### 1.质量不等同于测试\n* 质量是通过融合开发和测试，直至两者融为不能区分彼此的同一个体而达到的。\n* 测试是开发不可分割的一部分，开发和测试的结合会产生质量。\n* 把测试当做软件的feature。软件工程所交付的不是code，不是test，而是product，所以得让code和test集成在一起。\n\n### 2.测试环境\n* 小型测试（mock/fake环境）\n* 中型测试（mock/fake或真实环境）\n* 大型测试（真实环境）\n* 在小型和中型测试上强调自动化测试覆盖率，但在端到端测试时并不强调，避免投入过多，并且和特定功能设计绑定\n* 大、中、小型测试比例为1:2:7\n\n### 3.测试类型\n* 小型测试：测试代码单元的行为\n* 中型测试：测试一个或多个代码单元之间的交互\n* 大型测试：测试整个系统的工作\n* 小型测试保证代码质量，中型和大型测试保证产品质量\n\n### 4.测试认证级别\n* 5个级别：1～5，5级为最高\n* 分级依据\n     - 测试覆盖率\n     - 分层测试情况\n     - 持续集成\n     - 缺陷和测试用例的关系\n\n### 5.详细测试认证级别\n* 第1级\n     - 添加测试覆盖率的bundle\n     - 搭建持续集成环境\n     - 按照大、中、小型测试来区分测试\n     - 识别具有不确定性的测试\n     - 创建冒烟测试集\n* 第5级：\n     - 为每一个非关键的bug添加测试\n     - 主动使用各类分析工具\n     - 总的测试覆盖率超过60%\n\n### 6.文档\n* 所有Google项目都有设计文档\n* 设计文档是一个动态的文档（活文档，Living Document），随着项目的演化也在不断地保持更新\n\n### 7.测试人员分类\n* 测试开发工程师（SET）\n* 测试工程师（TE）\n* 测试工程经理\n\n### 8.测试人员职责\n* SET主要负责mock/fake、API测试、测试工具、CI工具，更偏向于代码开发。\n* TE是面向用户的测试，具备测试代码开发和用户为中心测试的双重能力。 \n* TE完成测试整个过程，风险评估、测试计划、测试设计、测试执行、探索式测试、用户反馈。 \n* 测试工程经理，把TE和SET联系起来，需要足够的技术能力，需要足够了解产品，也需要知人善用的能力。\n\n### 9.测试人员的未来\n* 测试开发工程师将变成开发人员，而测试开发工程师所具备的测试技能将被平均地分散到各个层级的开发工程师身上。 \n* 测试工程师会转型成为测试设计师。测试工程师可以成为如安全工程师这样的专家型角色，或者作为测试活动的管理者。 \n* 技术型测试主管，更多地成为资深工程师，同时作为思想领袖和协调者存在。测试活动由具体工作在产品上的人们负责。 \n* 测试开发工程师，测试工程师和测试经理分散到各个项目团队中去，更少关注测试流程，更多关注产品本身。\n\n### 10.测试的未来\n* 测试基础设施会最终整体迁移到云端。\n* 测试用例库，测试代码的编辑、录制和执行都将在一个网站或通过浏览器插件完成。\n* 测试编写、执行和调试需要使用与被测的应用程序本身相同的语言和环境才最为高效。 \n\n### 11.Google测试的原则和秘方\n* Google测试的原则：Ship early and often；Fail fast \n* Google测试的秘方：技能、稀缺、自动化、迭代集成","slug":"How_Google_Test_Software","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu5l003ey73n56srzlrl","layout":"post","photos":[],"link":"","content":"<p>读《Google软件测试之道》后把一些重要的内容记录下来。</p>\n<h3 id=\"1-质量不等同于测试\">1.质量不等同于测试</h3><ul>\n<li>质量是通过融合开发和测试，直至两者融为不能区分彼此的同一个体而达到的。</li>\n<li>测试是开发不可分割的一部分，开发和测试的结合会产生质量。</li>\n<li>把测试当做软件的feature。软件工程所交付的不是code，不是test，而是product，所以得让code和test集成在一起。</li>\n</ul>\n<h3 id=\"2-测试环境\">2.测试环境</h3><ul>\n<li>小型测试（mock/fake环境）</li>\n<li>中型测试（mock/fake或真实环境）</li>\n<li>大型测试（真实环境）</li>\n<li>在小型和中型测试上强调自动化测试覆盖率，但在端到端测试时并不强调，避免投入过多，并且和特定功能设计绑定</li>\n<li>大、中、小型测试比例为1:2:7</li>\n</ul>\n<h3 id=\"3-测试类型\">3.测试类型</h3><ul>\n<li>小型测试：测试代码单元的行为</li>\n<li>中型测试：测试一个或多个代码单元之间的交互</li>\n<li>大型测试：测试整个系统的工作</li>\n<li>小型测试保证代码质量，中型和大型测试保证产品质量</li>\n</ul>\n<h3 id=\"4-测试认证级别\">4.测试认证级别</h3><ul>\n<li>5个级别：1～5，5级为最高</li>\n<li>分级依据<ul>\n<li>测试覆盖率</li>\n<li>分层测试情况</li>\n<li>持续集成</li>\n<li>缺陷和测试用例的关系</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-详细测试认证级别\">5.详细测试认证级别</h3><ul>\n<li>第1级<ul>\n<li>添加测试覆盖率的bundle</li>\n<li>搭建持续集成环境</li>\n<li>按照大、中、小型测试来区分测试</li>\n<li>识别具有不确定性的测试</li>\n<li>创建冒烟测试集</li>\n</ul>\n</li>\n<li>第5级：<ul>\n<li>为每一个非关键的bug添加测试</li>\n<li>主动使用各类分析工具</li>\n<li>总的测试覆盖率超过60%</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-文档\">6.文档</h3><ul>\n<li>所有Google项目都有设计文档</li>\n<li>设计文档是一个动态的文档（活文档，Living Document），随着项目的演化也在不断地保持更新</li>\n</ul>\n<h3 id=\"7-测试人员分类\">7.测试人员分类</h3><ul>\n<li>测试开发工程师（SET）</li>\n<li>测试工程师（TE）</li>\n<li>测试工程经理</li>\n</ul>\n<h3 id=\"8-测试人员职责\">8.测试人员职责</h3><ul>\n<li>SET主要负责mock/fake、API测试、测试工具、CI工具，更偏向于代码开发。</li>\n<li>TE是面向用户的测试，具备测试代码开发和用户为中心测试的双重能力。 </li>\n<li>TE完成测试整个过程，风险评估、测试计划、测试设计、测试执行、探索式测试、用户反馈。 </li>\n<li>测试工程经理，把TE和SET联系起来，需要足够的技术能力，需要足够了解产品，也需要知人善用的能力。</li>\n</ul>\n<h3 id=\"9-测试人员的未来\">9.测试人员的未来</h3><ul>\n<li>测试开发工程师将变成开发人员，而测试开发工程师所具备的测试技能将被平均地分散到各个层级的开发工程师身上。 </li>\n<li>测试工程师会转型成为测试设计师。测试工程师可以成为如安全工程师这样的专家型角色，或者作为测试活动的管理者。 </li>\n<li>技术型测试主管，更多地成为资深工程师，同时作为思想领袖和协调者存在。测试活动由具体工作在产品上的人们负责。 </li>\n<li>测试开发工程师，测试工程师和测试经理分散到各个项目团队中去，更少关注测试流程，更多关注产品本身。</li>\n</ul>\n<h3 id=\"10-测试的未来\">10.测试的未来</h3><ul>\n<li>测试基础设施会最终整体迁移到云端。</li>\n<li>测试用例库，测试代码的编辑、录制和执行都将在一个网站或通过浏览器插件完成。</li>\n<li>测试编写、执行和调试需要使用与被测的应用程序本身相同的语言和环境才最为高效。 </li>\n</ul>\n<h3 id=\"11-Google测试的原则和秘方\">11.Google测试的原则和秘方</h3><ul>\n<li>Google测试的原则：Ship early and often；Fail fast </li>\n<li>Google测试的秘方：技能、稀缺、自动化、迭代集成</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>读《Google软件测试之道》后把一些重要的内容记录下来。</p>\n<h3 id=\"1-质量不等同于测试\">1.质量不等同于测试</h3><ul>\n<li>质量是通过融合开发和测试，直至两者融为不能区分彼此的同一个体而达到的。</li>\n<li>测试是开发不可分割的一部分，开发和测试的结合会产生质量。</li>\n<li>把测试当做软件的feature。软件工程所交付的不是code，不是test，而是product，所以得让code和test集成在一起。</li>\n</ul>\n<h3 id=\"2-测试环境\">2.测试环境</h3><ul>\n<li>小型测试（mock/fake环境）</li>\n<li>中型测试（mock/fake或真实环境）</li>\n<li>大型测试（真实环境）</li>\n<li>在小型和中型测试上强调自动化测试覆盖率，但在端到端测试时并不强调，避免投入过多，并且和特定功能设计绑定</li>\n<li>大、中、小型测试比例为1:2:7</li>\n</ul>\n<h3 id=\"3-测试类型\">3.测试类型</h3><ul>\n<li>小型测试：测试代码单元的行为</li>\n<li>中型测试：测试一个或多个代码单元之间的交互</li>\n<li>大型测试：测试整个系统的工作</li>\n<li>小型测试保证代码质量，中型和大型测试保证产品质量</li>\n</ul>\n<h3 id=\"4-测试认证级别\">4.测试认证级别</h3><ul>\n<li>5个级别：1～5，5级为最高</li>\n<li>分级依据<ul>\n<li>测试覆盖率</li>\n<li>分层测试情况</li>\n<li>持续集成</li>\n<li>缺陷和测试用例的关系</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-详细测试认证级别\">5.详细测试认证级别</h3><ul>\n<li>第1级<ul>\n<li>添加测试覆盖率的bundle</li>\n<li>搭建持续集成环境</li>\n<li>按照大、中、小型测试来区分测试</li>\n<li>识别具有不确定性的测试</li>\n<li>创建冒烟测试集</li>\n</ul>\n</li>\n<li>第5级：<ul>\n<li>为每一个非关键的bug添加测试</li>\n<li>主动使用各类分析工具</li>\n<li>总的测试覆盖率超过60%</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-文档\">6.文档</h3><ul>\n<li>所有Google项目都有设计文档</li>\n<li>设计文档是一个动态的文档（活文档，Living Document），随着项目的演化也在不断地保持更新</li>\n</ul>\n<h3 id=\"7-测试人员分类\">7.测试人员分类</h3><ul>\n<li>测试开发工程师（SET）</li>\n<li>测试工程师（TE）</li>\n<li>测试工程经理</li>\n</ul>\n<h3 id=\"8-测试人员职责\">8.测试人员职责</h3><ul>\n<li>SET主要负责mock/fake、API测试、测试工具、CI工具，更偏向于代码开发。</li>\n<li>TE是面向用户的测试，具备测试代码开发和用户为中心测试的双重能力。 </li>\n<li>TE完成测试整个过程，风险评估、测试计划、测试设计、测试执行、探索式测试、用户反馈。 </li>\n<li>测试工程经理，把TE和SET联系起来，需要足够的技术能力，需要足够了解产品，也需要知人善用的能力。</li>\n</ul>\n<h3 id=\"9-测试人员的未来\">9.测试人员的未来</h3><ul>\n<li>测试开发工程师将变成开发人员，而测试开发工程师所具备的测试技能将被平均地分散到各个层级的开发工程师身上。 </li>\n<li>测试工程师会转型成为测试设计师。测试工程师可以成为如安全工程师这样的专家型角色，或者作为测试活动的管理者。 </li>\n<li>技术型测试主管，更多地成为资深工程师，同时作为思想领袖和协调者存在。测试活动由具体工作在产品上的人们负责。 </li>\n<li>测试开发工程师，测试工程师和测试经理分散到各个项目团队中去，更少关注测试流程，更多关注产品本身。</li>\n</ul>\n<h3 id=\"10-测试的未来\">10.测试的未来</h3><ul>\n<li>测试基础设施会最终整体迁移到云端。</li>\n<li>测试用例库，测试代码的编辑、录制和执行都将在一个网站或通过浏览器插件完成。</li>\n<li>测试编写、执行和调试需要使用与被测的应用程序本身相同的语言和环境才最为高效。 </li>\n</ul>\n<h3 id=\"11-Google测试的原则和秘方\">11.Google测试的原则和秘方</h3><ul>\n<li>Google测试的原则：Ship early and often；Fail fast </li>\n<li>Google测试的秘方：技能、稀缺、自动化、迭代集成</li>\n</ul>\n"},{"title":"游戏：棉花糖挑战","date":"2011-08-30T14:00:00.000Z","comments":1,"_content":"\n### 目的：\n鼓励团队在实践中体验合作和创新。\n\n### 人数：\n20～30人，4~5组\n\n### 时长：\n45~60分钟。5分钟（规则说明和准备）+20分钟（进行游戏）+20分钟（分享体会）\n\n### 道具：\n* 20根意面x10；\n* 1捆线绳x5；\n* 1个棉花糖x10；\n* 1卷胶带x5；\n* 1把剪刀x5；\n* 笔纸若干x5；\n* 1把长直尺；\n* 1个计时器。\n\n### 规则：\n1. 创造一个尽可能高的、独立式的结构：尽可能高是指支撑结构的高度；支撑结构需要独立，不能依靠其他的物体。需要支撑棉花糖至少30秒\n2. 整个棉花糖需要在支撑结构的顶部：不能切分或穿透棉花糖\n3. 使用尽可能少的材料：只能使用提供的材料进行构建；胶带只能用于连接材料，不能用于将材料粘在桌子上\n4. 材料可以被切割分开：意面可以被折断，20根足够使用，不用担心；线绳、胶带可以被剪开\n5. 游戏时长20分钟，在最后5分钟会有提示\n6. 开始游戏前请确保了解游戏规则\n\n### 游戏提示:\n\n#### 游戏中\n1. 需要注意各组的开发状况，同时注意各组采用的创新的形式\n2. 注意提醒各组剩余时间，不用太过频繁，剩余10分钟、5分钟、1分钟各提醒一次，最后倒数10秒钟计时\n3. 让各组都了解到其他组的进度：鼓励创新并增加组内信心，允许各组相互参考和借鉴\n4. 提示各组支撑结构有可能不能支撑棉花糖，支撑结构需要结实和稳定\n5. 每组需要有一个观察员协助澄清规则，在尝试总是失败的时候提出一点建议，做小的辅助\n\n#### 游戏结束\n1. 让参与者相互参观各组成果，测量并记录各组高度，公布结果\n2. 让参与者表达自己对游戏的感受和体会\n\n**游戏参考：**\nhttp://www.marshmallowchallenge.com\n","source":"_posts/Game_The_Marshmallow_Challenge.md","raw":"title: 游戏：棉花糖挑战\ndate: 2011-08-31\ncategories:\n- Test\ntags:\n- Game\n- Marshmallow Challenge\ncomments: true\n---\n\n### 目的：\n鼓励团队在实践中体验合作和创新。\n\n### 人数：\n20～30人，4~5组\n\n### 时长：\n45~60分钟。5分钟（规则说明和准备）+20分钟（进行游戏）+20分钟（分享体会）\n\n### 道具：\n* 20根意面x10；\n* 1捆线绳x5；\n* 1个棉花糖x10；\n* 1卷胶带x5；\n* 1把剪刀x5；\n* 笔纸若干x5；\n* 1把长直尺；\n* 1个计时器。\n\n### 规则：\n1. 创造一个尽可能高的、独立式的结构：尽可能高是指支撑结构的高度；支撑结构需要独立，不能依靠其他的物体。需要支撑棉花糖至少30秒\n2. 整个棉花糖需要在支撑结构的顶部：不能切分或穿透棉花糖\n3. 使用尽可能少的材料：只能使用提供的材料进行构建；胶带只能用于连接材料，不能用于将材料粘在桌子上\n4. 材料可以被切割分开：意面可以被折断，20根足够使用，不用担心；线绳、胶带可以被剪开\n5. 游戏时长20分钟，在最后5分钟会有提示\n6. 开始游戏前请确保了解游戏规则\n\n### 游戏提示:\n\n#### 游戏中\n1. 需要注意各组的开发状况，同时注意各组采用的创新的形式\n2. 注意提醒各组剩余时间，不用太过频繁，剩余10分钟、5分钟、1分钟各提醒一次，最后倒数10秒钟计时\n3. 让各组都了解到其他组的进度：鼓励创新并增加组内信心，允许各组相互参考和借鉴\n4. 提示各组支撑结构有可能不能支撑棉花糖，支撑结构需要结实和稳定\n5. 每组需要有一个观察员协助澄清规则，在尝试总是失败的时候提出一点建议，做小的辅助\n\n#### 游戏结束\n1. 让参与者相互参观各组成果，测量并记录各组高度，公布结果\n2. 让参与者表达自己对游戏的感受和体会\n\n**游戏参考：**\nhttp://www.marshmallowchallenge.com\n","slug":"Game_The_Marshmallow_Challenge","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu5o003oy73njk2w2mrz","layout":"post","photos":[],"link":"","content":"<h3 id=\"目的：\">目的：</h3><p>鼓励团队在实践中体验合作和创新。</p>\n<h3 id=\"人数：\">人数：</h3><p>20～30人，4~5组</p>\n<h3 id=\"时长：\">时长：</h3><p>45~60分钟。5分钟（规则说明和准备）+20分钟（进行游戏）+20分钟（分享体会）</p>\n<h3 id=\"道具：\">道具：</h3><ul>\n<li>20根意面x10；</li>\n<li>1捆线绳x5；</li>\n<li>1个棉花糖x10；</li>\n<li>1卷胶带x5；</li>\n<li>1把剪刀x5；</li>\n<li>笔纸若干x5；</li>\n<li>1把长直尺；</li>\n<li>1个计时器。</li>\n</ul>\n<h3 id=\"规则：\">规则：</h3><ol>\n<li>创造一个尽可能高的、独立式的结构：尽可能高是指支撑结构的高度；支撑结构需要独立，不能依靠其他的物体。需要支撑棉花糖至少30秒</li>\n<li>整个棉花糖需要在支撑结构的顶部：不能切分或穿透棉花糖</li>\n<li>使用尽可能少的材料：只能使用提供的材料进行构建；胶带只能用于连接材料，不能用于将材料粘在桌子上</li>\n<li>材料可以被切割分开：意面可以被折断，20根足够使用，不用担心；线绳、胶带可以被剪开</li>\n<li>游戏时长20分钟，在最后5分钟会有提示</li>\n<li>开始游戏前请确保了解游戏规则</li>\n</ol>\n<h3 id=\"游戏提示:\">游戏提示:</h3><h4 id=\"游戏中\">游戏中</h4><ol>\n<li>需要注意各组的开发状况，同时注意各组采用的创新的形式</li>\n<li>注意提醒各组剩余时间，不用太过频繁，剩余10分钟、5分钟、1分钟各提醒一次，最后倒数10秒钟计时</li>\n<li>让各组都了解到其他组的进度：鼓励创新并增加组内信心，允许各组相互参考和借鉴</li>\n<li>提示各组支撑结构有可能不能支撑棉花糖，支撑结构需要结实和稳定</li>\n<li>每组需要有一个观察员协助澄清规则，在尝试总是失败的时候提出一点建议，做小的辅助</li>\n</ol>\n<h4 id=\"游戏结束\">游戏结束</h4><ol>\n<li>让参与者相互参观各组成果，测量并记录各组高度，公布结果</li>\n<li>让参与者表达自己对游戏的感受和体会</li>\n</ol>\n<p><strong>游戏参考：</strong><br><a href=\"http://www.marshmallowchallenge.com\" target=\"_blank\" rel=\"external\">http://www.marshmallowchallenge.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"目的：\">目的：</h3><p>鼓励团队在实践中体验合作和创新。</p>\n<h3 id=\"人数：\">人数：</h3><p>20～30人，4~5组</p>\n<h3 id=\"时长：\">时长：</h3><p>45~60分钟。5分钟（规则说明和准备）+20分钟（进行游戏）+20分钟（分享体会）</p>\n<h3 id=\"道具：\">道具：</h3><ul>\n<li>20根意面x10；</li>\n<li>1捆线绳x5；</li>\n<li>1个棉花糖x10；</li>\n<li>1卷胶带x5；</li>\n<li>1把剪刀x5；</li>\n<li>笔纸若干x5；</li>\n<li>1把长直尺；</li>\n<li>1个计时器。</li>\n</ul>\n<h3 id=\"规则：\">规则：</h3><ol>\n<li>创造一个尽可能高的、独立式的结构：尽可能高是指支撑结构的高度；支撑结构需要独立，不能依靠其他的物体。需要支撑棉花糖至少30秒</li>\n<li>整个棉花糖需要在支撑结构的顶部：不能切分或穿透棉花糖</li>\n<li>使用尽可能少的材料：只能使用提供的材料进行构建；胶带只能用于连接材料，不能用于将材料粘在桌子上</li>\n<li>材料可以被切割分开：意面可以被折断，20根足够使用，不用担心；线绳、胶带可以被剪开</li>\n<li>游戏时长20分钟，在最后5分钟会有提示</li>\n<li>开始游戏前请确保了解游戏规则</li>\n</ol>\n<h3 id=\"游戏提示:\">游戏提示:</h3><h4 id=\"游戏中\">游戏中</h4><ol>\n<li>需要注意各组的开发状况，同时注意各组采用的创新的形式</li>\n<li>注意提醒各组剩余时间，不用太过频繁，剩余10分钟、5分钟、1分钟各提醒一次，最后倒数10秒钟计时</li>\n<li>让各组都了解到其他组的进度：鼓励创新并增加组内信心，允许各组相互参考和借鉴</li>\n<li>提示各组支撑结构有可能不能支撑棉花糖，支撑结构需要结实和稳定</li>\n<li>每组需要有一个观察员协助澄清规则，在尝试总是失败的时候提出一点建议，做小的辅助</li>\n</ol>\n<h4 id=\"游戏结束\">游戏结束</h4><ol>\n<li>让参与者相互参观各组成果，测量并记录各组高度，公布结果</li>\n<li>让参与者表达自己对游戏的感受和体会</li>\n</ol>\n<p><strong>游戏参考：</strong><br><a href=\"http://www.marshmallowchallenge.com\" target=\"_blank\" rel=\"external\">http://www.marshmallowchallenge.com</a></p>\n"},{"title":"Android下的探索性测试","date":"2012-04-17T14:00:00.000Z","comments":1,"_content":"\n根据Android的特点，我们可以想到一些进行探索性测试时需要注意的地方:\n\n### 1. 对于用户输入:\n* 使用实体键盘或者虚拟键盘？\n* 触摸点击输入还是手写输入？针对老年人的产品，比较好的方式是采用的是手写输入，易于让用户适应\n* 如何定位到输入字符串中的某个位置？手指粗，或者屏幕小，很难精确定位到特定位置\n\n### 2. 对于软件状态的考虑:\n* 程序运行中接电话，是否会造成死机，或者程序锁死？\n* 中断后能否回复以前的状态？\n* 比如播放歌曲时接电话，歌曲能否自动暂停，挂机后能否继续播放？\n\n### 3. 基于场景考虑:\n* 用户在使用程序时是否会同时使用别的程序？\n* 在用程序得到结果时，是否还需要用到别的程序？\n* 比如计算完财务状况，可能需要发邮件向银行确认错误的账单？\n\n### 4.对于系统SDK的API和程序使用类库之间冲突的考虑:\n* 当前Android还处于高速的发展和改变的时期，很多功能甚至API还不完善很稳定，一些工具和类库的接口有时会和SDK的API不一致，例如Robotium\n\n### 5.对于程序并行运行的考虑:\n* 是否允许多个程序进程同时执行？\n* 如果可以，资源：硬件和用户数据是否会死锁，是否会有竞争？\n* 是否允许本程序和其他应用程序一起运行？\n* 如何保证数据的安全性？\n\n### 6.对于程序兼容性的考虑:\n* 对不同大小分辨率的兼容？不止是外观的改动，手机和平板的使用习惯也会有不同。手机大部分是简直是来快速的获取重要的内容，要点要突出明确，而平板大部分时间会用来获取详细的内容和报告；\n* 对不同的系统版本的支持？尤其是Android几个月就对版本进行升级的策略的应对；\n* 程序是否可以升级？\n* 如何保持向下兼容性？\n\n### 7.对其他程序提供的接口的调用:\n* 不同与传统软件和系统，Android允许程序调用其他程序暴露、或者说提供的接口，来进行调用，如何处理这些调用，以及这些调用带来的稳定性和安全性问题？\nAndroid使用自己的Dalvik虚拟机，而Dalvik是基于沙盒的，每个程序都单独存在于自己的虚拟机之中，如何进行有效的数据交换和授权？\n\n### 8.内存管理:\n* Android系统为每个应用分配的内存上限为24M。\n\n**很重要的一点，**就是不能太依赖于模拟器进行测试:由于模拟器的限制，有很多测试（比如多点触摸和重力感应等传感器相关的）没有办法实现.\n\n**而更重要的一点:**就是只有用实际的测试机器，真正地在生活中使用它们，才能更好地从用户的角度出发，达到进行探索性测试的目的。","source":"_posts/Exploratory_Testing_For_Android.md","raw":"title: Android下的探索性测试\ndate: 2012-04-18\ncategories:\n- Test\ntags:\n- Mobile\n- Android\n- Exploratory Testing\ncomments: true\n---\n\n根据Android的特点，我们可以想到一些进行探索性测试时需要注意的地方:\n\n### 1. 对于用户输入:\n* 使用实体键盘或者虚拟键盘？\n* 触摸点击输入还是手写输入？针对老年人的产品，比较好的方式是采用的是手写输入，易于让用户适应\n* 如何定位到输入字符串中的某个位置？手指粗，或者屏幕小，很难精确定位到特定位置\n\n### 2. 对于软件状态的考虑:\n* 程序运行中接电话，是否会造成死机，或者程序锁死？\n* 中断后能否回复以前的状态？\n* 比如播放歌曲时接电话，歌曲能否自动暂停，挂机后能否继续播放？\n\n### 3. 基于场景考虑:\n* 用户在使用程序时是否会同时使用别的程序？\n* 在用程序得到结果时，是否还需要用到别的程序？\n* 比如计算完财务状况，可能需要发邮件向银行确认错误的账单？\n\n### 4.对于系统SDK的API和程序使用类库之间冲突的考虑:\n* 当前Android还处于高速的发展和改变的时期，很多功能甚至API还不完善很稳定，一些工具和类库的接口有时会和SDK的API不一致，例如Robotium\n\n### 5.对于程序并行运行的考虑:\n* 是否允许多个程序进程同时执行？\n* 如果可以，资源：硬件和用户数据是否会死锁，是否会有竞争？\n* 是否允许本程序和其他应用程序一起运行？\n* 如何保证数据的安全性？\n\n### 6.对于程序兼容性的考虑:\n* 对不同大小分辨率的兼容？不止是外观的改动，手机和平板的使用习惯也会有不同。手机大部分是简直是来快速的获取重要的内容，要点要突出明确，而平板大部分时间会用来获取详细的内容和报告；\n* 对不同的系统版本的支持？尤其是Android几个月就对版本进行升级的策略的应对；\n* 程序是否可以升级？\n* 如何保持向下兼容性？\n\n### 7.对其他程序提供的接口的调用:\n* 不同与传统软件和系统，Android允许程序调用其他程序暴露、或者说提供的接口，来进行调用，如何处理这些调用，以及这些调用带来的稳定性和安全性问题？\nAndroid使用自己的Dalvik虚拟机，而Dalvik是基于沙盒的，每个程序都单独存在于自己的虚拟机之中，如何进行有效的数据交换和授权？\n\n### 8.内存管理:\n* Android系统为每个应用分配的内存上限为24M。\n\n**很重要的一点，**就是不能太依赖于模拟器进行测试:由于模拟器的限制，有很多测试（比如多点触摸和重力感应等传感器相关的）没有办法实现.\n\n**而更重要的一点:**就是只有用实际的测试机器，真正地在生活中使用它们，才能更好地从用户的角度出发，达到进行探索性测试的目的。","slug":"Exploratory_Testing_For_Android","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu5r003uy73n2qa0p6ze","layout":"post","photos":[],"link":"","content":"<p>根据Android的特点，我们可以想到一些进行探索性测试时需要注意的地方:</p>\n<h3 id=\"1-_对于用户输入:\">1. 对于用户输入:</h3><ul>\n<li>使用实体键盘或者虚拟键盘？</li>\n<li>触摸点击输入还是手写输入？针对老年人的产品，比较好的方式是采用的是手写输入，易于让用户适应</li>\n<li>如何定位到输入字符串中的某个位置？手指粗，或者屏幕小，很难精确定位到特定位置</li>\n</ul>\n<h3 id=\"2-_对于软件状态的考虑:\">2. 对于软件状态的考虑:</h3><ul>\n<li>程序运行中接电话，是否会造成死机，或者程序锁死？</li>\n<li>中断后能否回复以前的状态？</li>\n<li>比如播放歌曲时接电话，歌曲能否自动暂停，挂机后能否继续播放？</li>\n</ul>\n<h3 id=\"3-_基于场景考虑:\">3. 基于场景考虑:</h3><ul>\n<li>用户在使用程序时是否会同时使用别的程序？</li>\n<li>在用程序得到结果时，是否还需要用到别的程序？</li>\n<li>比如计算完财务状况，可能需要发邮件向银行确认错误的账单？</li>\n</ul>\n<h3 id=\"4-对于系统SDK的API和程序使用类库之间冲突的考虑:\">4.对于系统SDK的API和程序使用类库之间冲突的考虑:</h3><ul>\n<li>当前Android还处于高速的发展和改变的时期，很多功能甚至API还不完善很稳定，一些工具和类库的接口有时会和SDK的API不一致，例如Robotium</li>\n</ul>\n<h3 id=\"5-对于程序并行运行的考虑:\">5.对于程序并行运行的考虑:</h3><ul>\n<li>是否允许多个程序进程同时执行？</li>\n<li>如果可以，资源：硬件和用户数据是否会死锁，是否会有竞争？</li>\n<li>是否允许本程序和其他应用程序一起运行？</li>\n<li>如何保证数据的安全性？</li>\n</ul>\n<h3 id=\"6-对于程序兼容性的考虑:\">6.对于程序兼容性的考虑:</h3><ul>\n<li>对不同大小分辨率的兼容？不止是外观的改动，手机和平板的使用习惯也会有不同。手机大部分是简直是来快速的获取重要的内容，要点要突出明确，而平板大部分时间会用来获取详细的内容和报告；</li>\n<li>对不同的系统版本的支持？尤其是Android几个月就对版本进行升级的策略的应对；</li>\n<li>程序是否可以升级？</li>\n<li>如何保持向下兼容性？</li>\n</ul>\n<h3 id=\"7-对其他程序提供的接口的调用:\">7.对其他程序提供的接口的调用:</h3><ul>\n<li>不同与传统软件和系统，Android允许程序调用其他程序暴露、或者说提供的接口，来进行调用，如何处理这些调用，以及这些调用带来的稳定性和安全性问题？<br>Android使用自己的Dalvik虚拟机，而Dalvik是基于沙盒的，每个程序都单独存在于自己的虚拟机之中，如何进行有效的数据交换和授权？</li>\n</ul>\n<h3 id=\"8-内存管理:\">8.内存管理:</h3><ul>\n<li>Android系统为每个应用分配的内存上限为24M。</li>\n</ul>\n<p><strong>很重要的一点，</strong>就是不能太依赖于模拟器进行测试:由于模拟器的限制，有很多测试（比如多点触摸和重力感应等传感器相关的）没有办法实现.</p>\n<p><strong>而更重要的一点:</strong>就是只有用实际的测试机器，真正地在生活中使用它们，才能更好地从用户的角度出发，达到进行探索性测试的目的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>根据Android的特点，我们可以想到一些进行探索性测试时需要注意的地方:</p>\n<h3 id=\"1-_对于用户输入:\">1. 对于用户输入:</h3><ul>\n<li>使用实体键盘或者虚拟键盘？</li>\n<li>触摸点击输入还是手写输入？针对老年人的产品，比较好的方式是采用的是手写输入，易于让用户适应</li>\n<li>如何定位到输入字符串中的某个位置？手指粗，或者屏幕小，很难精确定位到特定位置</li>\n</ul>\n<h3 id=\"2-_对于软件状态的考虑:\">2. 对于软件状态的考虑:</h3><ul>\n<li>程序运行中接电话，是否会造成死机，或者程序锁死？</li>\n<li>中断后能否回复以前的状态？</li>\n<li>比如播放歌曲时接电话，歌曲能否自动暂停，挂机后能否继续播放？</li>\n</ul>\n<h3 id=\"3-_基于场景考虑:\">3. 基于场景考虑:</h3><ul>\n<li>用户在使用程序时是否会同时使用别的程序？</li>\n<li>在用程序得到结果时，是否还需要用到别的程序？</li>\n<li>比如计算完财务状况，可能需要发邮件向银行确认错误的账单？</li>\n</ul>\n<h3 id=\"4-对于系统SDK的API和程序使用类库之间冲突的考虑:\">4.对于系统SDK的API和程序使用类库之间冲突的考虑:</h3><ul>\n<li>当前Android还处于高速的发展和改变的时期，很多功能甚至API还不完善很稳定，一些工具和类库的接口有时会和SDK的API不一致，例如Robotium</li>\n</ul>\n<h3 id=\"5-对于程序并行运行的考虑:\">5.对于程序并行运行的考虑:</h3><ul>\n<li>是否允许多个程序进程同时执行？</li>\n<li>如果可以，资源：硬件和用户数据是否会死锁，是否会有竞争？</li>\n<li>是否允许本程序和其他应用程序一起运行？</li>\n<li>如何保证数据的安全性？</li>\n</ul>\n<h3 id=\"6-对于程序兼容性的考虑:\">6.对于程序兼容性的考虑:</h3><ul>\n<li>对不同大小分辨率的兼容？不止是外观的改动，手机和平板的使用习惯也会有不同。手机大部分是简直是来快速的获取重要的内容，要点要突出明确，而平板大部分时间会用来获取详细的内容和报告；</li>\n<li>对不同的系统版本的支持？尤其是Android几个月就对版本进行升级的策略的应对；</li>\n<li>程序是否可以升级？</li>\n<li>如何保持向下兼容性？</li>\n</ul>\n<h3 id=\"7-对其他程序提供的接口的调用:\">7.对其他程序提供的接口的调用:</h3><ul>\n<li>不同与传统软件和系统，Android允许程序调用其他程序暴露、或者说提供的接口，来进行调用，如何处理这些调用，以及这些调用带来的稳定性和安全性问题？<br>Android使用自己的Dalvik虚拟机，而Dalvik是基于沙盒的，每个程序都单独存在于自己的虚拟机之中，如何进行有效的数据交换和授权？</li>\n</ul>\n<h3 id=\"8-内存管理:\">8.内存管理:</h3><ul>\n<li>Android系统为每个应用分配的内存上限为24M。</li>\n</ul>\n<p><strong>很重要的一点，</strong>就是不能太依赖于模拟器进行测试:由于模拟器的限制，有很多测试（比如多点触摸和重力感应等传感器相关的）没有办法实现.</p>\n<p><strong>而更重要的一点:</strong>就是只有用实际的测试机器，真正地在生活中使用它们，才能更好地从用户的角度出发，达到进行探索性测试的目的。</p>\n"},{"title":"Book references","date":"2015-07-13T14:00:00.000Z","comments":1,"_content":"在写《移动app测试的22条军规》时，参考和总结了一些移动app测试的资料。\n\n本来是作为书的最后一部分“参考资源和文献”发布出来的，但是出版社的编辑不知道出于什么原因，没有收录在书里。\n\n在这里我把这些资料发布出来，希望对大家有帮助。\n\nFor the references of my book <Pro Mobile App Testing With 22 Rules>, please refer to [参考资源和文献/References](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Pro_Mobile_App_Testing_With_22_Rules_references.pdf) for more details.","source":"_posts/Book_References.md","raw":"title: Book references\ndate: 2015-07-14\ncategories:\n- Test\ntags:\n- Mobile\n- App Testing\n- Rules\ncomments: true\n---\n在写《移动app测试的22条军规》时，参考和总结了一些移动app测试的资料。\n\n本来是作为书的最后一部分“参考资源和文献”发布出来的，但是出版社的编辑不知道出于什么原因，没有收录在书里。\n\n在这里我把这些资料发布出来，希望对大家有帮助。\n\nFor the references of my book <Pro Mobile App Testing With 22 Rules>, please refer to [参考资源和文献/References](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Pro_Mobile_App_Testing_With_22_Rules_references.pdf) for more details.","slug":"Book_References","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu5t0041y73nalccq94r","layout":"post","photos":[],"link":"","content":"<p>在写《移动app测试的22条军规》时，参考和总结了一些移动app测试的资料。</p>\n<p>本来是作为书的最后一部分“参考资源和文献”发布出来的，但是出版社的编辑不知道出于什么原因，没有收录在书里。</p>\n<p>在这里我把这些资料发布出来，希望对大家有帮助。</p>\n<p>For the references of my book <pro 22=\"\" mobile=\"\" app=\"\" testing=\"\" with=\"\" rules=\"\">, please refer to <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Pro_Mobile_App_Testing_With_22_Rules_references.pdf\" target=\"_blank\" rel=\"external\">参考资源和文献/References</a> for more details.</pro></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在写《移动app测试的22条军规》时，参考和总结了一些移动app测试的资料。</p>\n<p>本来是作为书的最后一部分“参考资源和文献”发布出来的，但是出版社的编辑不知道出于什么原因，没有收录在书里。</p>\n<p>在这里我把这些资料发布出来，希望对大家有帮助。</p>\n<p>For the references of my book <pro 22=\"\" mobile=\"\" app=\"\" testing=\"\" with=\"\" rules=\"\">, please refer to <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Pro_Mobile_App_Testing_With_22_Rules_references.pdf\" target=\"_blank\" rel=\"external\">参考资源和文献/References</a> for more details.</pro></p>\n"},{"title":"Android Automation - Robotium","date":"2012-05-17T14:00:00.000Z","comments":1,"_content":"\n**For installation**, please reference to [Installing the SDK | Android Developers](http://developer.android.com/sdk/installing.html). The easiest way is to download Eclipse first, then install the Android Development Tools (ADT) as Plugin in Eclipse.\n\n### How to use the attached project zip file:\n\n1. Unzip it first then copy them to you workspace;\n\n2. Open Eclipse, and select \"File -> New -> Other...\";\n\n3. Select \"Android -> Android Project\", and \"Next\";\n\n4. Select \"Create project from existing source\", and input folder path of \"AndroidCalculator\" project into \"Location\", and change \"Project Name\" to \"AndroidCalculator\";\n\n5. \"Next\" and select \"Build Target\" as \"Android 2.3.3\", then \"Finish\".\n\n```\nNote:\n\nPlease do the same to \"AndroidCalculatorTest, but change the project folder path and change \"Project Name\" to \"AndroidCalculatorTest\".*\n\nFor running RobotiumTests_DataDriven.java, you need to import TestData.csv to emulator first:\n\n1. Open DDMS;\n\n2. Open File Explorer;\n\n3. Import the TestData.csv file in attached test project folder, into /data/data/com/calculator/files.\n\n4. Run the data driven test.\n```\n\n### How to run the application we test against:\n\n1. Create a AVD of Android 2.3.3 in Android Virtual Device Manager (AVD Manager) under \"Window -> AVD Manager\" in Eclipse;\n\n2. Select project \"AndroidCalculator\", and \"Run As\" \"Android Application\".\n\n### How to run tests against the application:\n\n1. Create a AVD of Android 2.3.3 in Android Virtual Device Manager (AVD Manager) under \"Window -> AVD Manager\" in Eclipse;\n\n2. Open \"AndroidCalculatorTest -> src -> com.calculator.test\";\n\n3. Select any of the java file and \"Run As\" \"Android JUnit Test\".\n\n```\nNote: please only select one file to run, because all of them have a main() method, so they will conflict with each other when run them all together.\n```\n\n### Features included in \"AndroidCalculatorTest\":\n\n1. \"InstrumentationTests.java\" is implemented by Instrumentation in Android SDK itself;\n\n2. \"RobotiumTests_APK.java\" demonstrate how to test an Android APK file when only get the APK file itself, its \"Package_ID\" and \"Main_Activity\";\n\n3. \"RobotiumTests_DataDriven.java\" shows how to read a group of test data from a csv file, run series of tests, then export the results to another file;\n\n4. \"RobotiumTests_Whitebox.java\" shows how to use Robotium in UT level, more from code coverage perspective;\n\n5. \"RobotiumTests.java\" give you a brief knowledge of writing a basic Robotium test and take screenshot in the test. (please check the screenshot under \"/mnt/sdcard\" in DDMS).\n\n### Library Configuration Tip:\n\n1. To run the Robotium tests, we need to select all in \"Properties -> Java Build Path -> Order and Export\";\n\n2. Move the robotium up to top and move Android and Android Dependencies just below robotium (but still above any project).\n\n### Issues encountered when writing Robotium tests:\n\n1. Unable to take ScreenShot (saving the file to emulator):  [Unable to take screenshot on android using robotium and private method](http://stackoverflow.com/questions/7550201/unable-to-take-screenshot-on-android-using-robotium-and-private-method)\n\n2. \"Null pointer exception\" or \"Array out of boundary\" when reading a csv file: please check the format of csv whether it's compatible with jxl.\n\n### Some materials for Android - Robotium framework:\n\n1. [Android Developers](http://developer.android.com/)\n\n2. [robotium -  It's like Selenium, but for Android™ - Google Project Hosting](http://code.google.com/p/robotium/)\n\n3. [Controling Quality: Design Data Driven Framework around Robotium](http://controlingquality.blogspot.com/2011/02/design-data-driven-framework-around.html)\n\n4. [Robotium_Black_Box_Testing_For_Android](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Robotium_Black_Box_Testing_For_Android_Chinese.pdf) *in Chinese*\n\n### Attachments:\n\n[Robotium.zip](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Robotium.zip)","source":"_posts/Android_Automation_Robotium.md","raw":"title: Android Automation - Robotium\ndate: 2012-05-18\ncategories:\n- Testing\ntags:\n- Mobile\n- Android\n- Automation\n- Framework\n- Robotium\ncomments: true\n---\n\n**For installation**, please reference to [Installing the SDK | Android Developers](http://developer.android.com/sdk/installing.html). The easiest way is to download Eclipse first, then install the Android Development Tools (ADT) as Plugin in Eclipse.\n\n### How to use the attached project zip file:\n\n1. Unzip it first then copy them to you workspace;\n\n2. Open Eclipse, and select \"File -> New -> Other...\";\n\n3. Select \"Android -> Android Project\", and \"Next\";\n\n4. Select \"Create project from existing source\", and input folder path of \"AndroidCalculator\" project into \"Location\", and change \"Project Name\" to \"AndroidCalculator\";\n\n5. \"Next\" and select \"Build Target\" as \"Android 2.3.3\", then \"Finish\".\n\n```\nNote:\n\nPlease do the same to \"AndroidCalculatorTest, but change the project folder path and change \"Project Name\" to \"AndroidCalculatorTest\".*\n\nFor running RobotiumTests_DataDriven.java, you need to import TestData.csv to emulator first:\n\n1. Open DDMS;\n\n2. Open File Explorer;\n\n3. Import the TestData.csv file in attached test project folder, into /data/data/com/calculator/files.\n\n4. Run the data driven test.\n```\n\n### How to run the application we test against:\n\n1. Create a AVD of Android 2.3.3 in Android Virtual Device Manager (AVD Manager) under \"Window -> AVD Manager\" in Eclipse;\n\n2. Select project \"AndroidCalculator\", and \"Run As\" \"Android Application\".\n\n### How to run tests against the application:\n\n1. Create a AVD of Android 2.3.3 in Android Virtual Device Manager (AVD Manager) under \"Window -> AVD Manager\" in Eclipse;\n\n2. Open \"AndroidCalculatorTest -> src -> com.calculator.test\";\n\n3. Select any of the java file and \"Run As\" \"Android JUnit Test\".\n\n```\nNote: please only select one file to run, because all of them have a main() method, so they will conflict with each other when run them all together.\n```\n\n### Features included in \"AndroidCalculatorTest\":\n\n1. \"InstrumentationTests.java\" is implemented by Instrumentation in Android SDK itself;\n\n2. \"RobotiumTests_APK.java\" demonstrate how to test an Android APK file when only get the APK file itself, its \"Package_ID\" and \"Main_Activity\";\n\n3. \"RobotiumTests_DataDriven.java\" shows how to read a group of test data from a csv file, run series of tests, then export the results to another file;\n\n4. \"RobotiumTests_Whitebox.java\" shows how to use Robotium in UT level, more from code coverage perspective;\n\n5. \"RobotiumTests.java\" give you a brief knowledge of writing a basic Robotium test and take screenshot in the test. (please check the screenshot under \"/mnt/sdcard\" in DDMS).\n\n### Library Configuration Tip:\n\n1. To run the Robotium tests, we need to select all in \"Properties -> Java Build Path -> Order and Export\";\n\n2. Move the robotium up to top and move Android and Android Dependencies just below robotium (but still above any project).\n\n### Issues encountered when writing Robotium tests:\n\n1. Unable to take ScreenShot (saving the file to emulator):  [Unable to take screenshot on android using robotium and private method](http://stackoverflow.com/questions/7550201/unable-to-take-screenshot-on-android-using-robotium-and-private-method)\n\n2. \"Null pointer exception\" or \"Array out of boundary\" when reading a csv file: please check the format of csv whether it's compatible with jxl.\n\n### Some materials for Android - Robotium framework:\n\n1. [Android Developers](http://developer.android.com/)\n\n2. [robotium -  It's like Selenium, but for Android™ - Google Project Hosting](http://code.google.com/p/robotium/)\n\n3. [Controling Quality: Design Data Driven Framework around Robotium](http://controlingquality.blogspot.com/2011/02/design-data-driven-framework-around.html)\n\n4. [Robotium_Black_Box_Testing_For_Android](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Robotium_Black_Box_Testing_For_Android_Chinese.pdf) *in Chinese*\n\n### Attachments:\n\n[Robotium.zip](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Robotium.zip)","slug":"Android_Automation_Robotium","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu5v0046y73n4h9qzoit","layout":"post","photos":[],"link":"","content":"<p><strong>For installation</strong>, please reference to <a href=\"http://developer.android.com/sdk/installing.html\" target=\"_blank\" rel=\"external\">Installing the SDK | Android Developers</a>. The easiest way is to download Eclipse first, then install the Android Development Tools (ADT) as Plugin in Eclipse.</p>\n<h3 id=\"How_to_use_the_attached_project_zip_file:\">How to use the attached project zip file:</h3><ol>\n<li><p>Unzip it first then copy them to you workspace;</p>\n</li>\n<li><p>Open Eclipse, and select “File -&gt; New -&gt; Other…”;</p>\n</li>\n<li><p>Select “Android -&gt; Android Project”, and “Next”;</p>\n</li>\n<li><p>Select “Create project from existing source”, and input folder path of “AndroidCalculator” project into “Location”, and change “Project Name” to “AndroidCalculator”;</p>\n</li>\n<li><p>“Next” and select “Build Target” as “Android 2.3.3”, then “Finish”.</p>\n</li>\n</ol>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Note</span>:</div><div class=\"line\"></div><div class=\"line\">Please <span class=\"keyword\">do</span> the same to <span class=\"string\">\"AndroidCalculatorTest, but change the project folder path and change \"</span>Project Name<span class=\"string\">\" to \"</span>AndroidCalculatorTest\".*</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">For</span> running RobotiumTests_DataDriven.java, you need to import TestData.csv to emulator first:</div><div class=\"line\"></div><div class=\"line\">1. <span class=\"keyword\">Open</span> DDMS;</div><div class=\"line\"></div><div class=\"line\">2. <span class=\"keyword\">Open</span> <span class=\"keyword\">File</span> Explorer;</div><div class=\"line\"></div><div class=\"line\">3. Import the TestData.csv <span class=\"keyword\">file</span> <span class=\"keyword\">in</span> attached <span class=\"keyword\">test</span> project folder, into /data/data/com/calculator/files.</div><div class=\"line\"></div><div class=\"line\">4. <span class=\"keyword\">Run</span> the data driven <span class=\"keyword\">test</span>.</div></pre></td></tr></table></figure>\n<h3 id=\"How_to_run_the_application_we_test_against:\">How to run the application we test against:</h3><ol>\n<li><p>Create a AVD of Android 2.3.3 in Android Virtual Device Manager (AVD Manager) under “Window -&gt; AVD Manager” in Eclipse;</p>\n</li>\n<li><p>Select project “AndroidCalculator”, and “Run As” “Android Application”.</p>\n</li>\n</ol>\n<h3 id=\"How_to_run_tests_against_the_application:\">How to run tests against the application:</h3><ol>\n<li><p>Create a AVD of Android 2.3.3 in Android Virtual Device Manager (AVD Manager) under “Window -&gt; AVD Manager” in Eclipse;</p>\n</li>\n<li><p>Open “AndroidCalculatorTest -&gt; src -&gt; com.calculator.test”;</p>\n</li>\n<li><p>Select any of the java file and “Run As” “Android JUnit Test”.</p>\n</li>\n</ol>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Note: please only <span class=\"keyword\">select</span> one file <span class=\"keyword\">to</span> run, because all <span class=\"keyword\">of</span> them have a main() <span class=\"function\"><span class=\"keyword\">method</span>, <span class=\"title\">so</span> <span class=\"title\">they</span> <span class=\"title\">will</span> <span class=\"title\">conflict</span> <span class=\"title\">with</span> <span class=\"title\">each</span> <span class=\"title\">other</span> <span class=\"title\">when</span> <span class=\"title\">run</span> <span class=\"title\">them</span> <span class=\"title\">all</span> <span class=\"title\">together</span>.</span></div></pre></td></tr></table></figure>\n<h3 id=\"Features_included_in_“AndroidCalculatorTest”:\">Features included in “AndroidCalculatorTest”:</h3><ol>\n<li><p>“InstrumentationTests.java” is implemented by Instrumentation in Android SDK itself;</p>\n</li>\n<li><p>“RobotiumTests_APK.java” demonstrate how to test an Android APK file when only get the APK file itself, its “Package_ID” and “Main_Activity”;</p>\n</li>\n<li><p>“RobotiumTests_DataDriven.java” shows how to read a group of test data from a csv file, run series of tests, then export the results to another file;</p>\n</li>\n<li><p>“RobotiumTests_Whitebox.java” shows how to use Robotium in UT level, more from code coverage perspective;</p>\n</li>\n<li><p>“RobotiumTests.java” give you a brief knowledge of writing a basic Robotium test and take screenshot in the test. (please check the screenshot under “/mnt/sdcard” in DDMS).</p>\n</li>\n</ol>\n<h3 id=\"Library_Configuration_Tip:\">Library Configuration Tip:</h3><ol>\n<li><p>To run the Robotium tests, we need to select all in “Properties -&gt; Java Build Path -&gt; Order and Export”;</p>\n</li>\n<li><p>Move the robotium up to top and move Android and Android Dependencies just below robotium (but still above any project).</p>\n</li>\n</ol>\n<h3 id=\"Issues_encountered_when_writing_Robotium_tests:\">Issues encountered when writing Robotium tests:</h3><ol>\n<li><p>Unable to take ScreenShot (saving the file to emulator):  <a href=\"http://stackoverflow.com/questions/7550201/unable-to-take-screenshot-on-android-using-robotium-and-private-method\" target=\"_blank\" rel=\"external\">Unable to take screenshot on android using robotium and private method</a></p>\n</li>\n<li><p>“Null pointer exception” or “Array out of boundary” when reading a csv file: please check the format of csv whether it’s compatible with jxl.</p>\n</li>\n</ol>\n<h3 id=\"Some_materials_for_Android_-_Robotium_framework:\">Some materials for Android - Robotium framework:</h3><ol>\n<li><p><a href=\"http://developer.android.com/\" target=\"_blank\" rel=\"external\">Android Developers</a></p>\n</li>\n<li><p><a href=\"http://code.google.com/p/robotium/\" target=\"_blank\" rel=\"external\">robotium -  It’s like Selenium, but for Android™ - Google Project Hosting</a></p>\n</li>\n<li><p><a href=\"http://controlingquality.blogspot.com/2011/02/design-data-driven-framework-around.html\" target=\"_blank\" rel=\"external\">Controling Quality: Design Data Driven Framework around Robotium</a></p>\n</li>\n<li><p><a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Robotium_Black_Box_Testing_For_Android_Chinese.pdf\" target=\"_blank\" rel=\"external\">Robotium_Black_Box_Testing_For_Android</a> <em>in Chinese</em></p>\n</li>\n</ol>\n<h3 id=\"Attachments:\">Attachments:</h3><p><a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Robotium.zip\" target=\"_blank\" rel=\"external\">Robotium.zip</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>For installation</strong>, please reference to <a href=\"http://developer.android.com/sdk/installing.html\" target=\"_blank\" rel=\"external\">Installing the SDK | Android Developers</a>. The easiest way is to download Eclipse first, then install the Android Development Tools (ADT) as Plugin in Eclipse.</p>\n<h3 id=\"How_to_use_the_attached_project_zip_file:\">How to use the attached project zip file:</h3><ol>\n<li><p>Unzip it first then copy them to you workspace;</p>\n</li>\n<li><p>Open Eclipse, and select “File -&gt; New -&gt; Other…”;</p>\n</li>\n<li><p>Select “Android -&gt; Android Project”, and “Next”;</p>\n</li>\n<li><p>Select “Create project from existing source”, and input folder path of “AndroidCalculator” project into “Location”, and change “Project Name” to “AndroidCalculator”;</p>\n</li>\n<li><p>“Next” and select “Build Target” as “Android 2.3.3”, then “Finish”.</p>\n</li>\n</ol>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Note</span>:</div><div class=\"line\"></div><div class=\"line\">Please <span class=\"keyword\">do</span> the same to <span class=\"string\">\"AndroidCalculatorTest, but change the project folder path and change \"</span>Project Name<span class=\"string\">\" to \"</span>AndroidCalculatorTest\".*</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">For</span> running RobotiumTests_DataDriven.java, you need to import TestData.csv to emulator first:</div><div class=\"line\"></div><div class=\"line\">1. <span class=\"keyword\">Open</span> DDMS;</div><div class=\"line\"></div><div class=\"line\">2. <span class=\"keyword\">Open</span> <span class=\"keyword\">File</span> Explorer;</div><div class=\"line\"></div><div class=\"line\">3. Import the TestData.csv <span class=\"keyword\">file</span> <span class=\"keyword\">in</span> attached <span class=\"keyword\">test</span> project folder, into /data/data/com/calculator/files.</div><div class=\"line\"></div><div class=\"line\">4. <span class=\"keyword\">Run</span> the data driven <span class=\"keyword\">test</span>.</div></pre></td></tr></table></figure>\n<h3 id=\"How_to_run_the_application_we_test_against:\">How to run the application we test against:</h3><ol>\n<li><p>Create a AVD of Android 2.3.3 in Android Virtual Device Manager (AVD Manager) under “Window -&gt; AVD Manager” in Eclipse;</p>\n</li>\n<li><p>Select project “AndroidCalculator”, and “Run As” “Android Application”.</p>\n</li>\n</ol>\n<h3 id=\"How_to_run_tests_against_the_application:\">How to run tests against the application:</h3><ol>\n<li><p>Create a AVD of Android 2.3.3 in Android Virtual Device Manager (AVD Manager) under “Window -&gt; AVD Manager” in Eclipse;</p>\n</li>\n<li><p>Open “AndroidCalculatorTest -&gt; src -&gt; com.calculator.test”;</p>\n</li>\n<li><p>Select any of the java file and “Run As” “Android JUnit Test”.</p>\n</li>\n</ol>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Note: please only <span class=\"keyword\">select</span> one file <span class=\"keyword\">to</span> run, because all <span class=\"keyword\">of</span> them have a main() <span class=\"function\"><span class=\"keyword\">method</span>, <span class=\"title\">so</span> <span class=\"title\">they</span> <span class=\"title\">will</span> <span class=\"title\">conflict</span> <span class=\"title\">with</span> <span class=\"title\">each</span> <span class=\"title\">other</span> <span class=\"title\">when</span> <span class=\"title\">run</span> <span class=\"title\">them</span> <span class=\"title\">all</span> <span class=\"title\">together</span>.</span></div></pre></td></tr></table></figure>\n<h3 id=\"Features_included_in_“AndroidCalculatorTest”:\">Features included in “AndroidCalculatorTest”:</h3><ol>\n<li><p>“InstrumentationTests.java” is implemented by Instrumentation in Android SDK itself;</p>\n</li>\n<li><p>“RobotiumTests_APK.java” demonstrate how to test an Android APK file when only get the APK file itself, its “Package_ID” and “Main_Activity”;</p>\n</li>\n<li><p>“RobotiumTests_DataDriven.java” shows how to read a group of test data from a csv file, run series of tests, then export the results to another file;</p>\n</li>\n<li><p>“RobotiumTests_Whitebox.java” shows how to use Robotium in UT level, more from code coverage perspective;</p>\n</li>\n<li><p>“RobotiumTests.java” give you a brief knowledge of writing a basic Robotium test and take screenshot in the test. (please check the screenshot under “/mnt/sdcard” in DDMS).</p>\n</li>\n</ol>\n<h3 id=\"Library_Configuration_Tip:\">Library Configuration Tip:</h3><ol>\n<li><p>To run the Robotium tests, we need to select all in “Properties -&gt; Java Build Path -&gt; Order and Export”;</p>\n</li>\n<li><p>Move the robotium up to top and move Android and Android Dependencies just below robotium (but still above any project).</p>\n</li>\n</ol>\n<h3 id=\"Issues_encountered_when_writing_Robotium_tests:\">Issues encountered when writing Robotium tests:</h3><ol>\n<li><p>Unable to take ScreenShot (saving the file to emulator):  <a href=\"http://stackoverflow.com/questions/7550201/unable-to-take-screenshot-on-android-using-robotium-and-private-method\" target=\"_blank\" rel=\"external\">Unable to take screenshot on android using robotium and private method</a></p>\n</li>\n<li><p>“Null pointer exception” or “Array out of boundary” when reading a csv file: please check the format of csv whether it’s compatible with jxl.</p>\n</li>\n</ol>\n<h3 id=\"Some_materials_for_Android_-_Robotium_framework:\">Some materials for Android - Robotium framework:</h3><ol>\n<li><p><a href=\"http://developer.android.com/\" target=\"_blank\" rel=\"external\">Android Developers</a></p>\n</li>\n<li><p><a href=\"http://code.google.com/p/robotium/\" target=\"_blank\" rel=\"external\">robotium -  It’s like Selenium, but for Android™ - Google Project Hosting</a></p>\n</li>\n<li><p><a href=\"http://controlingquality.blogspot.com/2011/02/design-data-driven-framework-around.html\" target=\"_blank\" rel=\"external\">Controling Quality: Design Data Driven Framework around Robotium</a></p>\n</li>\n<li><p><a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Robotium_Black_Box_Testing_For_Android_Chinese.pdf\" target=\"_blank\" rel=\"external\">Robotium_Black_Box_Testing_For_Android</a> <em>in Chinese</em></p>\n</li>\n</ol>\n<h3 id=\"Attachments:\">Attachments:</h3><p><a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Robotium.zip\" target=\"_blank\" rel=\"external\">Robotium.zip</a></p>\n"},{"title":"Android Automation - NativeDriver","date":"2012-05-08T14:00:00.000Z","comments":1,"_content":"\n**Library Configuration Tip:**\n1. To run the Robotium tests, we need to select all in \"Properties -> Java Build Path -> Order and Export\";\n2. Move the robotium up to top and move Android and Android Dependencies just below robotium (but still above any project).\n\n**Tips:**\n1. Create the tests as JUnit tests;\n2. Under application folder, run `$Android-SDK-Prefix/platform-tools/adb shell am instrument com.calculator/com.google.android.testing.nativedriver.server.ServerInstrumentation`; then run `$Android-SDK-Prefix/platform-tools/adb forward tcp:54129 tcp:54129`\n3. Connection and port forward are easily broken, need to check them when tests fail, especially once the tests fail or code is changed.\n4. If the element, especially textfield, is not focused, you can't input anything in it; unless you `click()` it before `sendKeys()`\n5. After input into textfield, you need to navigate back to disable keyboard, using `driver.navigate().back()`\n6. No api about `wait()`, just use `Thread.sleep()`\n7. Using the take screenshot method, you can only use full path\n\n**References:**\n1. [NativeDriver](http://code.google.com/p/nativedriver)\n2. [NativeDriver Wiki](http://code.google.com/p/nativedriver/w/list)\n3. [NativeDriver Source](https://code.google.com/p/nativedriver/source/browse/trunk/android/test/com/google/android/testing/nativedriver/)\n4. [NativeDriver Google Groups](https://groups.google.com/forum/#!forum/nativedriver-users)\n5. [TestNG + NativeDriver实现android的UI自动化测试](http://kongqingyun123.blog.163.com/blog/static/63772835201172935833719/)\n6. [How to Screen Capture On Error](https://groups.google.com/forum/#!msg/nativedriver-users/1eZRMu3KbPA/FMn9R6upuDwJ)\n7. [Windows下NativeDriver截屏功能](http://kongqingyun123.blog.163.com/blog/static/63772835201182932332956/)\n\n### Attachments:\n\n[NativeDriverAndroidTests.zip](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/NativeDriverAndroidTests.zip)","source":"_posts/Android_Automation_NativeDriver.md","raw":"title: Android Automation - NativeDriver\ndate: 2012-05-09\ncategories:\n- Testing\ntags:\n- Mobile\n- Android\n- Automation\n- Framework\n- NativeDriver\ncomments: true\n---\n\n**Library Configuration Tip:**\n1. To run the Robotium tests, we need to select all in \"Properties -> Java Build Path -> Order and Export\";\n2. Move the robotium up to top and move Android and Android Dependencies just below robotium (but still above any project).\n\n**Tips:**\n1. Create the tests as JUnit tests;\n2. Under application folder, run `$Android-SDK-Prefix/platform-tools/adb shell am instrument com.calculator/com.google.android.testing.nativedriver.server.ServerInstrumentation`; then run `$Android-SDK-Prefix/platform-tools/adb forward tcp:54129 tcp:54129`\n3. Connection and port forward are easily broken, need to check them when tests fail, especially once the tests fail or code is changed.\n4. If the element, especially textfield, is not focused, you can't input anything in it; unless you `click()` it before `sendKeys()`\n5. After input into textfield, you need to navigate back to disable keyboard, using `driver.navigate().back()`\n6. No api about `wait()`, just use `Thread.sleep()`\n7. Using the take screenshot method, you can only use full path\n\n**References:**\n1. [NativeDriver](http://code.google.com/p/nativedriver)\n2. [NativeDriver Wiki](http://code.google.com/p/nativedriver/w/list)\n3. [NativeDriver Source](https://code.google.com/p/nativedriver/source/browse/trunk/android/test/com/google/android/testing/nativedriver/)\n4. [NativeDriver Google Groups](https://groups.google.com/forum/#!forum/nativedriver-users)\n5. [TestNG + NativeDriver实现android的UI自动化测试](http://kongqingyun123.blog.163.com/blog/static/63772835201172935833719/)\n6. [How to Screen Capture On Error](https://groups.google.com/forum/#!msg/nativedriver-users/1eZRMu3KbPA/FMn9R6upuDwJ)\n7. [Windows下NativeDriver截屏功能](http://kongqingyun123.blog.163.com/blog/static/63772835201182932332956/)\n\n### Attachments:\n\n[NativeDriverAndroidTests.zip](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/NativeDriverAndroidTests.zip)","slug":"Android_Automation_NativeDriver","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu5y004ey73nvx05dqkk","layout":"post","photos":[],"link":"","content":"<p><strong>Library Configuration Tip:</strong></p>\n<ol>\n<li>To run the Robotium tests, we need to select all in “Properties -&gt; Java Build Path -&gt; Order and Export”;</li>\n<li>Move the robotium up to top and move Android and Android Dependencies just below robotium (but still above any project).</li>\n</ol>\n<p><strong>Tips:</strong></p>\n<ol>\n<li>Create the tests as JUnit tests;</li>\n<li>Under application folder, run <code>$Android-SDK-Prefix/platform-tools/adb shell am instrument com.calculator/com.google.android.testing.nativedriver.server.ServerInstrumentation</code>; then run <code>$Android-SDK-Prefix/platform-tools/adb forward tcp:54129 tcp:54129</code></li>\n<li>Connection and port forward are easily broken, need to check them when tests fail, especially once the tests fail or code is changed.</li>\n<li>If the element, especially textfield, is not focused, you can’t input anything in it; unless you <code>click()</code> it before <code>sendKeys()</code></li>\n<li>After input into textfield, you need to navigate back to disable keyboard, using <code>driver.navigate().back()</code></li>\n<li>No api about <code>wait()</code>, just use <code>Thread.sleep()</code></li>\n<li>Using the take screenshot method, you can only use full path</li>\n</ol>\n<p><strong>References:</strong></p>\n<ol>\n<li><a href=\"http://code.google.com/p/nativedriver\" target=\"_blank\" rel=\"external\">NativeDriver</a></li>\n<li><a href=\"http://code.google.com/p/nativedriver/w/list\" target=\"_blank\" rel=\"external\">NativeDriver Wiki</a></li>\n<li><a href=\"https://code.google.com/p/nativedriver/source/browse/trunk/android/test/com/google/android/testing/nativedriver/\" target=\"_blank\" rel=\"external\">NativeDriver Source</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/nativedriver-users\" target=\"_blank\" rel=\"external\">NativeDriver Google Groups</a></li>\n<li><a href=\"http://kongqingyun123.blog.163.com/blog/static/63772835201172935833719/\" target=\"_blank\" rel=\"external\">TestNG + NativeDriver实现android的UI自动化测试</a></li>\n<li><a href=\"https://groups.google.com/forum/#!msg/nativedriver-users/1eZRMu3KbPA/FMn9R6upuDwJ\" target=\"_blank\" rel=\"external\">How to Screen Capture On Error</a></li>\n<li><a href=\"http://kongqingyun123.blog.163.com/blog/static/63772835201182932332956/\" target=\"_blank\" rel=\"external\">Windows下NativeDriver截屏功能</a></li>\n</ol>\n<h3 id=\"Attachments:\">Attachments:</h3><p><a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/NativeDriverAndroidTests.zip\" target=\"_blank\" rel=\"external\">NativeDriverAndroidTests.zip</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Library Configuration Tip:</strong></p>\n<ol>\n<li>To run the Robotium tests, we need to select all in “Properties -&gt; Java Build Path -&gt; Order and Export”;</li>\n<li>Move the robotium up to top and move Android and Android Dependencies just below robotium (but still above any project).</li>\n</ol>\n<p><strong>Tips:</strong></p>\n<ol>\n<li>Create the tests as JUnit tests;</li>\n<li>Under application folder, run <code>$Android-SDK-Prefix/platform-tools/adb shell am instrument com.calculator/com.google.android.testing.nativedriver.server.ServerInstrumentation</code>; then run <code>$Android-SDK-Prefix/platform-tools/adb forward tcp:54129 tcp:54129</code></li>\n<li>Connection and port forward are easily broken, need to check them when tests fail, especially once the tests fail or code is changed.</li>\n<li>If the element, especially textfield, is not focused, you can’t input anything in it; unless you <code>click()</code> it before <code>sendKeys()</code></li>\n<li>After input into textfield, you need to navigate back to disable keyboard, using <code>driver.navigate().back()</code></li>\n<li>No api about <code>wait()</code>, just use <code>Thread.sleep()</code></li>\n<li>Using the take screenshot method, you can only use full path</li>\n</ol>\n<p><strong>References:</strong></p>\n<ol>\n<li><a href=\"http://code.google.com/p/nativedriver\" target=\"_blank\" rel=\"external\">NativeDriver</a></li>\n<li><a href=\"http://code.google.com/p/nativedriver/w/list\" target=\"_blank\" rel=\"external\">NativeDriver Wiki</a></li>\n<li><a href=\"https://code.google.com/p/nativedriver/source/browse/trunk/android/test/com/google/android/testing/nativedriver/\" target=\"_blank\" rel=\"external\">NativeDriver Source</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/nativedriver-users\" target=\"_blank\" rel=\"external\">NativeDriver Google Groups</a></li>\n<li><a href=\"http://kongqingyun123.blog.163.com/blog/static/63772835201172935833719/\" target=\"_blank\" rel=\"external\">TestNG + NativeDriver实现android的UI自动化测试</a></li>\n<li><a href=\"https://groups.google.com/forum/#!msg/nativedriver-users/1eZRMu3KbPA/FMn9R6upuDwJ\" target=\"_blank\" rel=\"external\">How to Screen Capture On Error</a></li>\n<li><a href=\"http://kongqingyun123.blog.163.com/blog/static/63772835201182932332956/\" target=\"_blank\" rel=\"external\">Windows下NativeDriver截屏功能</a></li>\n</ol>\n<h3 id=\"Attachments:\">Attachments:</h3><p><a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/NativeDriverAndroidTests.zip\" target=\"_blank\" rel=\"external\">NativeDriverAndroidTests.zip</a></p>\n"},{"title":"Agile Test Plan","date":"2011-09-06T14:00:00.000Z","comments":1,"_content":"“”\nSummarized my thoughts about Test Plan in Agile, please refer to [representation](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Agile_Test_Plan.pdf) and [Sample](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Test_Plan_For_I37_To_I39.pdf) for more details.","source":"_posts/Agile_Test_Plan.md","raw":"title: Agile Test Plan\ndate: 2011-09-07\ncategories:\n- Test\ntags:\n- Agile\n- Test Plan\ncomments: true\n---\n“”\nSummarized my thoughts about Test Plan in Agile, please refer to [representation](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Agile_Test_Plan.pdf) and [Sample](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Test_Plan_For_I37_To_I39.pdf) for more details.","slug":"Agile_Test_Plan","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijxylu61004ly73n5vw5lcc0","layout":"post","photos":[],"link":"","content":"<p>“”<br>Summarized my thoughts about Test Plan in Agile, please refer to <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Agile_Test_Plan.pdf\" target=\"_blank\" rel=\"external\">representation</a> and <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Test_Plan_For_I37_To_I39.pdf\" target=\"_blank\" rel=\"external\">Sample</a> for more details.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>“”<br>Summarized my thoughts about Test Plan in Agile, please refer to <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Agile_Test_Plan.pdf\" target=\"_blank\" rel=\"external\">representation</a> and <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/Test_Plan_For_I37_To_I39.pdf\" target=\"_blank\" rel=\"external\">Sample</a> for more details.</p>\n"},{"title":"出差实用小技巧","date":"2015-12-29T13:00:00.000Z","comments":1,"_content":"由于我去国外出差比在国内出差的经验要多一些，所以本文以去国外出差为主，讲述个人经历中那些必不可少的checklist。\n\n### 如何出一本技术书\n----\n####国外出差\n\n#####出差前你通常需要准备的：\n\n1. **护照**\n\n    不用说，一定要保管好。也只有在机场才会用到。\n    \n2. **插线板**\n\n    无论去哪里出差，带个插线板是必不可少的，可谓居家旅行的必备。哪怕是去英国这样的地方，也只用带一个转换器即可让手机啦，电脑啦之类的设备保持电力充沛。\n\n3. **国际漫游**\n\n    出国出差前开通国际漫游，一个是为了紧急情况能接打电话（才不告诉你是因为到机场没司机没电话没外币才觉得国际漫游是必要的），另一个是为了方便接收短信。\n\n4. **拖鞋**\n\n    飞机场和国外公寓一般都不提供拖鞋，为了让自己长途飞行轻松一些，拖鞋也是必要的。\n\n5. **耳塞**\n\n    和上面一样，能抵御飞机上小朋友不间断的哭闹以及别的乘客的鼾声。\n\n6. **Kindle，iPad或者书**\n\n    能缓解你等飞机，等车，等anything时的焦虑。\n\n7. **伞**\n\n    这个看个人习惯了，有人习惯不带，等有雨了再买，我习惯去哪里都带着，也许是第一次出差养成的习惯。\n\n8. **男士－剃须刀，女士－不知道**\n\n    出差一般都是去客户现场，那去了可不能太随意，一定要注意自己的仪表，剃须刀就派上了大用处。\n    \n9. **一双合适的鞋子**\n\n    有着好的空气和环境，再不去锻炼可就太亏了。\n\n10. **一张以上的储蓄卡，一张以上的信用卡**\n\n    储蓄卡和信用卡最好是visa的，虽然银联的也都通用，但是有些地方银联的ATM不见得那么多。推荐一张以上是因为笔者遇到过银行卡消磁的sui事。。。储蓄卡推荐大家办华夏银行的，每日第一笔境外取现免费，办理也容易。\n    \n11. **少量的外币现金**\n\n    基于上面银行卡的建议，大家可以少带现金，毕竟国内兑换汇率不划算。但是也别不带，不然出现任何意外（atm不支持银联，机场打车没现金等），欲哭无泪啊。\n    \n12. **查好公寓地址以及机场到公寓的交通方式**\n\n    这是以防万一的一招，避免司机没接到你的情况，可以自己到公寓。最好能打印出来，或者存在手机上面。最好把国外办公室发给你的出差邮件打印出来。上面都有紧急情况联系当地公寓供应商的联系方式。\n\n13. **查好客户办公室的地址和交通方式**\n\n    和上面一样，这是避免你没拿到公司给你的手机和无线网卡的情况。还可以根据交通方式，办理最适合的交通卡之类的。\n\n14. **了解出差地点当地的天气和温度**\n\n    这决定了你要带什么衣服，拿几个箱子，怎么搭配。\n\n15. **了解哪些同事也在同一时间段出差**\n\n    可以一起约着玩，在异乡也有个伴。\n    \n16. **翻译过的驾照**\n\n    在澳洲租车自驾还是很方便的，但是前提是要有翻译过的驾照。\n\n17. **出差计划**\n\n    提前和客户沟通出差的目标，以及需要配合的人等，事先为出差做好准备。\n\n18. **了解客户的dressing code**\n\n    虽然公司对于着装没有要求，但是客户有的时候有，所以给予客户尊重，做合适的穿衣搭配。\n\n19. **别忘记给客户带一些小礼物**\n\n    一般客户对中国文化都比较感兴趣，礼物无论大小都会拉近距离。\n\n20. **最后得带个大箱子**\n\n    估计不少同事朋友都得让帮着带东西，小了放不下。:P\n    \n#####出差期间，你可能还需要注意这些：\n\n1. **制订每一天的计划**\n\n    根据总的出差计划，制订每一天需要完成的目标。在每天结束时，查看进展，从而调整第二天的计划。\n\n2. **流程化解决每天早中饭，晚上再用特色美食犒劳自己**\n\n    老外一般对于早中饭都比较随意，更注重工作的效率，咱们也可以按照他们的习惯来；晚饭的话利用的是自己的时间，就可以按照自己的喜好来了。不过不推荐大家吃中餐，普遍都不怎么好。\n3. **配置网络，找到座位**\n\n    到客户那里，最先要解决的就是如何上网和在哪里工作的问题，一般都可以通过客户的team lead来协调。\n\n4. **和客户building**\n\n    形式有很多，例如上班时间喝杯咖啡，下班后喝酒、吃饭，或者周末一起出行；如果碰到客户的Friday drink和年会等活动，更是拉近关系的好机会。需要注意的是在这些活动中要学会请客，不要什么都请，也不要什么都不请，度要拿捏合适。\n5. **给客户做session**\n\n    记住你的title包含着consultant，到客户现场，需要把好的实践，工作方式和工具，介绍给客户，让客户了解咱们的技术实力。\n\n6. **有机会多和客户pair**\n\n    和上一条一样，好不容易有了一起工作和合作的机会，咱们需要通过pair的方式，要让他们认识到咱们不光能说，还能从技术上实现。\n\n7. **观察客户的座位**\n\n    这是之前一个资深的BA告诉我的，咱们可以通过客户的作为，找到最合适帮忙的人，例如谁和业务人员坐得近，可以从他那里得到更多的业务相关信息等。\n\n8. **观察客户的工作模式和习惯**\n\n    这样可以协调我们的工作来相互配合，例如中午饭一般客户都什么时间吃，会持续多久，换成北京时间，我们什么时候找客户会比较合适。\n\n9. **参加客户的showcase**\n\n    最好能自己主动负责一次showcase，尤其是有客户大老板参与的showcase。这样会加深客户对我们的印象，加强双方的合作。\n\n10. **在Facebook，Twitter，Linkedin上关注客户，时不时地互动**\n\n    最好在和客户关系拉近之后再这么做。\n\n11. **观察团队的表现，并及时反馈给团队**\n\n    观察自己的问题始终是很难的，而客户一般也不会直接告诉你有什么问题，这就需要在客户现场的我们发现可以提高沟通效率的方式，做出改变。\n    \n12. **及时告知团队可能缺失的信息**\n\n    在客户现场开会和讨论时，时常会发现客户会提到一些团队不了解的内容，我们需要及时告知团队，也使得客户也意识到存在信息不均等的问题，从而在以后的开会和讨论中更多的给相关上下文。\n\n13. **问客户要反馈**\n\n    可以是对个人的反馈，也可以是对团队的反馈，还可以是对session或者会议的反馈。这比从邮件或者客户manager得到的反馈要准确和真实的多。\n\n14. **充分利用闲聊**\n\n    在闲聊中介绍团队的情况和每个人的特点，让客户熟悉团队中的“人”，而不只是作为工作的伙伴。\n\n15. **每天换衣服**\n\n    西方人认为你两天穿同一件衣服，是代表第一天没回家。所以可以充分利用公寓的洗衣机和烘干机，方便多换几套衣服。\n\n16. **参加当地办公室周五的Friday lunch**\n\n    听别的办公室的发展和大家的想法，了解和熟悉更多的外国同事，说不定还能碰到熟人或者仰慕的大牛呢。\n\n17. **参加当地的社区活动**\n\n    如果能刚好赶上当地的agile conference或者各类专题讲座就太好了，能了解到和国内的不同，也可以学习到不少实践，Copy to China。：）\n\n18. **多到处走走，熟悉当地的情况**\n\n    这样的话在客户说一些本地的情况时，和客户有更多的共同语言，聊得更深入。\n\n19. **给大家带小吃**\n\n    这个就不用多说啦。\n\n#####当回到办公室之后，你可能还需要做这些事情：\n\n1. **总结出差收获**\n\n    给团队分享客户的情况和每个人的特点，让双方都相互了解得更多。\n在社交网络上保持和客户的联系。如果能让客户用微信就更好了。\n\n2. **利用和客户面对面交流过的优势**\n\n    在standup时先就各种新闻或者客户社交网络的更新闲聊两句，让双方更有一个团队的感觉。\n\n3. **填写报销**\n\n    一定要及时填写，超过3个月可就不能报销了。\n\n####国内出差\n\n1. **选对机场**\n\n    很不愿意回想起培训地点在上海虹桥机场附近，结果买票买到了浦东机场的经历。。。\n\n2. **随身无线路由器**\n\n    解决住酒店时只有有线网络的情况。\n\n3. **4g无线路由器**\n\n    有些客户是不提供非员工的上网的，所以当我们要连外网进行演示时，最好能有一个稳定的接入方式。\n\n4. **了解培训受众**\n\n    知己知彼，百战不殆。我们需要根据手中的不同，调整培训的内容和重点。\n\n5. **和负责客户的同事聊一聊**\n\n    有些培训是作为咨询的一部分交付的。所以需要配合咨询的同事，不仅从受众那里确定需求，还需要辅助咨询的项目开展工作。\n","source":"_posts/Business_Travel.md","raw":"title: 出差实用小技巧\ndate: 2015-12-30\ncategories:\n- Test\ntags:\n- Business Travel\n- Tips\ncomments: true\n---\n由于我去国外出差比在国内出差的经验要多一些，所以本文以去国外出差为主，讲述个人经历中那些必不可少的checklist。\n\n### 如何出一本技术书\n----\n####国外出差\n\n#####出差前你通常需要准备的：\n\n1. **护照**\n\n    不用说，一定要保管好。也只有在机场才会用到。\n    \n2. **插线板**\n\n    无论去哪里出差，带个插线板是必不可少的，可谓居家旅行的必备。哪怕是去英国这样的地方，也只用带一个转换器即可让手机啦，电脑啦之类的设备保持电力充沛。\n\n3. **国际漫游**\n\n    出国出差前开通国际漫游，一个是为了紧急情况能接打电话（才不告诉你是因为到机场没司机没电话没外币才觉得国际漫游是必要的），另一个是为了方便接收短信。\n\n4. **拖鞋**\n\n    飞机场和国外公寓一般都不提供拖鞋，为了让自己长途飞行轻松一些，拖鞋也是必要的。\n\n5. **耳塞**\n\n    和上面一样，能抵御飞机上小朋友不间断的哭闹以及别的乘客的鼾声。\n\n6. **Kindle，iPad或者书**\n\n    能缓解你等飞机，等车，等anything时的焦虑。\n\n7. **伞**\n\n    这个看个人习惯了，有人习惯不带，等有雨了再买，我习惯去哪里都带着，也许是第一次出差养成的习惯。\n\n8. **男士－剃须刀，女士－不知道**\n\n    出差一般都是去客户现场，那去了可不能太随意，一定要注意自己的仪表，剃须刀就派上了大用处。\n    \n9. **一双合适的鞋子**\n\n    有着好的空气和环境，再不去锻炼可就太亏了。\n\n10. **一张以上的储蓄卡，一张以上的信用卡**\n\n    储蓄卡和信用卡最好是visa的，虽然银联的也都通用，但是有些地方银联的ATM不见得那么多。推荐一张以上是因为笔者遇到过银行卡消磁的sui事。。。储蓄卡推荐大家办华夏银行的，每日第一笔境外取现免费，办理也容易。\n    \n11. **少量的外币现金**\n\n    基于上面银行卡的建议，大家可以少带现金，毕竟国内兑换汇率不划算。但是也别不带，不然出现任何意外（atm不支持银联，机场打车没现金等），欲哭无泪啊。\n    \n12. **查好公寓地址以及机场到公寓的交通方式**\n\n    这是以防万一的一招，避免司机没接到你的情况，可以自己到公寓。最好能打印出来，或者存在手机上面。最好把国外办公室发给你的出差邮件打印出来。上面都有紧急情况联系当地公寓供应商的联系方式。\n\n13. **查好客户办公室的地址和交通方式**\n\n    和上面一样，这是避免你没拿到公司给你的手机和无线网卡的情况。还可以根据交通方式，办理最适合的交通卡之类的。\n\n14. **了解出差地点当地的天气和温度**\n\n    这决定了你要带什么衣服，拿几个箱子，怎么搭配。\n\n15. **了解哪些同事也在同一时间段出差**\n\n    可以一起约着玩，在异乡也有个伴。\n    \n16. **翻译过的驾照**\n\n    在澳洲租车自驾还是很方便的，但是前提是要有翻译过的驾照。\n\n17. **出差计划**\n\n    提前和客户沟通出差的目标，以及需要配合的人等，事先为出差做好准备。\n\n18. **了解客户的dressing code**\n\n    虽然公司对于着装没有要求，但是客户有的时候有，所以给予客户尊重，做合适的穿衣搭配。\n\n19. **别忘记给客户带一些小礼物**\n\n    一般客户对中国文化都比较感兴趣，礼物无论大小都会拉近距离。\n\n20. **最后得带个大箱子**\n\n    估计不少同事朋友都得让帮着带东西，小了放不下。:P\n    \n#####出差期间，你可能还需要注意这些：\n\n1. **制订每一天的计划**\n\n    根据总的出差计划，制订每一天需要完成的目标。在每天结束时，查看进展，从而调整第二天的计划。\n\n2. **流程化解决每天早中饭，晚上再用特色美食犒劳自己**\n\n    老外一般对于早中饭都比较随意，更注重工作的效率，咱们也可以按照他们的习惯来；晚饭的话利用的是自己的时间，就可以按照自己的喜好来了。不过不推荐大家吃中餐，普遍都不怎么好。\n3. **配置网络，找到座位**\n\n    到客户那里，最先要解决的就是如何上网和在哪里工作的问题，一般都可以通过客户的team lead来协调。\n\n4. **和客户building**\n\n    形式有很多，例如上班时间喝杯咖啡，下班后喝酒、吃饭，或者周末一起出行；如果碰到客户的Friday drink和年会等活动，更是拉近关系的好机会。需要注意的是在这些活动中要学会请客，不要什么都请，也不要什么都不请，度要拿捏合适。\n5. **给客户做session**\n\n    记住你的title包含着consultant，到客户现场，需要把好的实践，工作方式和工具，介绍给客户，让客户了解咱们的技术实力。\n\n6. **有机会多和客户pair**\n\n    和上一条一样，好不容易有了一起工作和合作的机会，咱们需要通过pair的方式，要让他们认识到咱们不光能说，还能从技术上实现。\n\n7. **观察客户的座位**\n\n    这是之前一个资深的BA告诉我的，咱们可以通过客户的作为，找到最合适帮忙的人，例如谁和业务人员坐得近，可以从他那里得到更多的业务相关信息等。\n\n8. **观察客户的工作模式和习惯**\n\n    这样可以协调我们的工作来相互配合，例如中午饭一般客户都什么时间吃，会持续多久，换成北京时间，我们什么时候找客户会比较合适。\n\n9. **参加客户的showcase**\n\n    最好能自己主动负责一次showcase，尤其是有客户大老板参与的showcase。这样会加深客户对我们的印象，加强双方的合作。\n\n10. **在Facebook，Twitter，Linkedin上关注客户，时不时地互动**\n\n    最好在和客户关系拉近之后再这么做。\n\n11. **观察团队的表现，并及时反馈给团队**\n\n    观察自己的问题始终是很难的，而客户一般也不会直接告诉你有什么问题，这就需要在客户现场的我们发现可以提高沟通效率的方式，做出改变。\n    \n12. **及时告知团队可能缺失的信息**\n\n    在客户现场开会和讨论时，时常会发现客户会提到一些团队不了解的内容，我们需要及时告知团队，也使得客户也意识到存在信息不均等的问题，从而在以后的开会和讨论中更多的给相关上下文。\n\n13. **问客户要反馈**\n\n    可以是对个人的反馈，也可以是对团队的反馈，还可以是对session或者会议的反馈。这比从邮件或者客户manager得到的反馈要准确和真实的多。\n\n14. **充分利用闲聊**\n\n    在闲聊中介绍团队的情况和每个人的特点，让客户熟悉团队中的“人”，而不只是作为工作的伙伴。\n\n15. **每天换衣服**\n\n    西方人认为你两天穿同一件衣服，是代表第一天没回家。所以可以充分利用公寓的洗衣机和烘干机，方便多换几套衣服。\n\n16. **参加当地办公室周五的Friday lunch**\n\n    听别的办公室的发展和大家的想法，了解和熟悉更多的外国同事，说不定还能碰到熟人或者仰慕的大牛呢。\n\n17. **参加当地的社区活动**\n\n    如果能刚好赶上当地的agile conference或者各类专题讲座就太好了，能了解到和国内的不同，也可以学习到不少实践，Copy to China。：）\n\n18. **多到处走走，熟悉当地的情况**\n\n    这样的话在客户说一些本地的情况时，和客户有更多的共同语言，聊得更深入。\n\n19. **给大家带小吃**\n\n    这个就不用多说啦。\n\n#####当回到办公室之后，你可能还需要做这些事情：\n\n1. **总结出差收获**\n\n    给团队分享客户的情况和每个人的特点，让双方都相互了解得更多。\n在社交网络上保持和客户的联系。如果能让客户用微信就更好了。\n\n2. **利用和客户面对面交流过的优势**\n\n    在standup时先就各种新闻或者客户社交网络的更新闲聊两句，让双方更有一个团队的感觉。\n\n3. **填写报销**\n\n    一定要及时填写，超过3个月可就不能报销了。\n\n####国内出差\n\n1. **选对机场**\n\n    很不愿意回想起培训地点在上海虹桥机场附近，结果买票买到了浦东机场的经历。。。\n\n2. **随身无线路由器**\n\n    解决住酒店时只有有线网络的情况。\n\n3. **4g无线路由器**\n\n    有些客户是不提供非员工的上网的，所以当我们要连外网进行演示时，最好能有一个稳定的接入方式。\n\n4. **了解培训受众**\n\n    知己知彼，百战不殆。我们需要根据手中的不同，调整培训的内容和重点。\n\n5. **和负责客户的同事聊一聊**\n\n    有些培训是作为咨询的一部分交付的。所以需要配合咨询的同事，不仅从受众那里确定需求，还需要辅助咨询的项目开展工作。\n","slug":"Business_Travel","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cijy1zjee0000hu3ntlyqjdjw","layout":"post","photos":[],"link":"","content":"<p>由于我去国外出差比在国内出差的经验要多一些，所以本文以去国外出差为主，讲述个人经历中那些必不可少的checklist。</p>\n<h3 id=\"如何出一本技术书\">如何出一本技术书</h3><hr>\n<h4 id=\"国外出差\">国外出差</h4><h5 id=\"出差前你通常需要准备的：\">出差前你通常需要准备的：</h5><ol>\n<li><p><strong>护照</strong></p>\n<p> 不用说，一定要保管好。也只有在机场才会用到。</p>\n</li>\n<li><p><strong>插线板</strong></p>\n<p> 无论去哪里出差，带个插线板是必不可少的，可谓居家旅行的必备。哪怕是去英国这样的地方，也只用带一个转换器即可让手机啦，电脑啦之类的设备保持电力充沛。</p>\n</li>\n<li><p><strong>国际漫游</strong></p>\n<p> 出国出差前开通国际漫游，一个是为了紧急情况能接打电话（才不告诉你是因为到机场没司机没电话没外币才觉得国际漫游是必要的），另一个是为了方便接收短信。</p>\n</li>\n<li><p><strong>拖鞋</strong></p>\n<p> 飞机场和国外公寓一般都不提供拖鞋，为了让自己长途飞行轻松一些，拖鞋也是必要的。</p>\n</li>\n<li><p><strong>耳塞</strong></p>\n<p> 和上面一样，能抵御飞机上小朋友不间断的哭闹以及别的乘客的鼾声。</p>\n</li>\n<li><p><strong>Kindle，iPad或者书</strong></p>\n<p> 能缓解你等飞机，等车，等anything时的焦虑。</p>\n</li>\n<li><p><strong>伞</strong></p>\n<p> 这个看个人习惯了，有人习惯不带，等有雨了再买，我习惯去哪里都带着，也许是第一次出差养成的习惯。</p>\n</li>\n<li><p><strong>男士－剃须刀，女士－不知道</strong></p>\n<p> 出差一般都是去客户现场，那去了可不能太随意，一定要注意自己的仪表，剃须刀就派上了大用处。</p>\n</li>\n<li><p><strong>一双合适的鞋子</strong></p>\n<p> 有着好的空气和环境，再不去锻炼可就太亏了。</p>\n</li>\n<li><p><strong>一张以上的储蓄卡，一张以上的信用卡</strong></p>\n<p>储蓄卡和信用卡最好是visa的，虽然银联的也都通用，但是有些地方银联的ATM不见得那么多。推荐一张以上是因为笔者遇到过银行卡消磁的sui事。。。储蓄卡推荐大家办华夏银行的，每日第一笔境外取现免费，办理也容易。</p>\n</li>\n<li><p><strong>少量的外币现金</strong></p>\n<p>基于上面银行卡的建议，大家可以少带现金，毕竟国内兑换汇率不划算。但是也别不带，不然出现任何意外（atm不支持银联，机场打车没现金等），欲哭无泪啊。</p>\n</li>\n<li><p><strong>查好公寓地址以及机场到公寓的交通方式</strong></p>\n<p>这是以防万一的一招，避免司机没接到你的情况，可以自己到公寓。最好能打印出来，或者存在手机上面。最好把国外办公室发给你的出差邮件打印出来。上面都有紧急情况联系当地公寓供应商的联系方式。</p>\n</li>\n<li><p><strong>查好客户办公室的地址和交通方式</strong></p>\n<p>和上面一样，这是避免你没拿到公司给你的手机和无线网卡的情况。还可以根据交通方式，办理最适合的交通卡之类的。</p>\n</li>\n<li><p><strong>了解出差地点当地的天气和温度</strong></p>\n<p>这决定了你要带什么衣服，拿几个箱子，怎么搭配。</p>\n</li>\n<li><p><strong>了解哪些同事也在同一时间段出差</strong></p>\n<p>可以一起约着玩，在异乡也有个伴。</p>\n</li>\n<li><p><strong>翻译过的驾照</strong></p>\n<p>在澳洲租车自驾还是很方便的，但是前提是要有翻译过的驾照。</p>\n</li>\n<li><p><strong>出差计划</strong></p>\n<p>提前和客户沟通出差的目标，以及需要配合的人等，事先为出差做好准备。</p>\n</li>\n<li><p><strong>了解客户的dressing code</strong></p>\n<p>虽然公司对于着装没有要求，但是客户有的时候有，所以给予客户尊重，做合适的穿衣搭配。</p>\n</li>\n<li><p><strong>别忘记给客户带一些小礼物</strong></p>\n<p>一般客户对中国文化都比较感兴趣，礼物无论大小都会拉近距离。</p>\n</li>\n<li><p><strong>最后得带个大箱子</strong></p>\n<p>估计不少同事朋友都得让帮着带东西，小了放不下。:P</p>\n</li>\n</ol>\n<h5 id=\"出差期间，你可能还需要注意这些：\">出差期间，你可能还需要注意这些：</h5><ol>\n<li><p><strong>制订每一天的计划</strong></p>\n<p> 根据总的出差计划，制订每一天需要完成的目标。在每天结束时，查看进展，从而调整第二天的计划。</p>\n</li>\n<li><p><strong>流程化解决每天早中饭，晚上再用特色美食犒劳自己</strong></p>\n<p> 老外一般对于早中饭都比较随意，更注重工作的效率，咱们也可以按照他们的习惯来；晚饭的话利用的是自己的时间，就可以按照自己的喜好来了。不过不推荐大家吃中餐，普遍都不怎么好。</p>\n</li>\n<li><p><strong>配置网络，找到座位</strong></p>\n<p> 到客户那里，最先要解决的就是如何上网和在哪里工作的问题，一般都可以通过客户的team lead来协调。</p>\n</li>\n<li><p><strong>和客户building</strong></p>\n<p> 形式有很多，例如上班时间喝杯咖啡，下班后喝酒、吃饭，或者周末一起出行；如果碰到客户的Friday drink和年会等活动，更是拉近关系的好机会。需要注意的是在这些活动中要学会请客，不要什么都请，也不要什么都不请，度要拿捏合适。</p>\n</li>\n<li><p><strong>给客户做session</strong></p>\n<p> 记住你的title包含着consultant，到客户现场，需要把好的实践，工作方式和工具，介绍给客户，让客户了解咱们的技术实力。</p>\n</li>\n<li><p><strong>有机会多和客户pair</strong></p>\n<p> 和上一条一样，好不容易有了一起工作和合作的机会，咱们需要通过pair的方式，要让他们认识到咱们不光能说，还能从技术上实现。</p>\n</li>\n<li><p><strong>观察客户的座位</strong></p>\n<p> 这是之前一个资深的BA告诉我的，咱们可以通过客户的作为，找到最合适帮忙的人，例如谁和业务人员坐得近，可以从他那里得到更多的业务相关信息等。</p>\n</li>\n<li><p><strong>观察客户的工作模式和习惯</strong></p>\n<p> 这样可以协调我们的工作来相互配合，例如中午饭一般客户都什么时间吃，会持续多久，换成北京时间，我们什么时候找客户会比较合适。</p>\n</li>\n<li><p><strong>参加客户的showcase</strong></p>\n<p> 最好能自己主动负责一次showcase，尤其是有客户大老板参与的showcase。这样会加深客户对我们的印象，加强双方的合作。</p>\n</li>\n<li><p><strong>在Facebook，Twitter，Linkedin上关注客户，时不时地互动</strong></p>\n<p>最好在和客户关系拉近之后再这么做。</p>\n</li>\n<li><p><strong>观察团队的表现，并及时反馈给团队</strong></p>\n<p>观察自己的问题始终是很难的，而客户一般也不会直接告诉你有什么问题，这就需要在客户现场的我们发现可以提高沟通效率的方式，做出改变。</p>\n</li>\n<li><p><strong>及时告知团队可能缺失的信息</strong></p>\n<p>在客户现场开会和讨论时，时常会发现客户会提到一些团队不了解的内容，我们需要及时告知团队，也使得客户也意识到存在信息不均等的问题，从而在以后的开会和讨论中更多的给相关上下文。</p>\n</li>\n<li><p><strong>问客户要反馈</strong></p>\n<p>可以是对个人的反馈，也可以是对团队的反馈，还可以是对session或者会议的反馈。这比从邮件或者客户manager得到的反馈要准确和真实的多。</p>\n</li>\n<li><p><strong>充分利用闲聊</strong></p>\n<p>在闲聊中介绍团队的情况和每个人的特点，让客户熟悉团队中的“人”，而不只是作为工作的伙伴。</p>\n</li>\n<li><p><strong>每天换衣服</strong></p>\n<p>西方人认为你两天穿同一件衣服，是代表第一天没回家。所以可以充分利用公寓的洗衣机和烘干机，方便多换几套衣服。</p>\n</li>\n<li><p><strong>参加当地办公室周五的Friday lunch</strong></p>\n<p>听别的办公室的发展和大家的想法，了解和熟悉更多的外国同事，说不定还能碰到熟人或者仰慕的大牛呢。</p>\n</li>\n<li><p><strong>参加当地的社区活动</strong></p>\n<p>如果能刚好赶上当地的agile conference或者各类专题讲座就太好了，能了解到和国内的不同，也可以学习到不少实践，Copy to China。：）</p>\n</li>\n<li><p><strong>多到处走走，熟悉当地的情况</strong></p>\n<p>这样的话在客户说一些本地的情况时，和客户有更多的共同语言，聊得更深入。</p>\n</li>\n<li><p><strong>给大家带小吃</strong></p>\n<p>这个就不用多说啦。</p>\n</li>\n</ol>\n<h5 id=\"当回到办公室之后，你可能还需要做这些事情：\">当回到办公室之后，你可能还需要做这些事情：</h5><ol>\n<li><p><strong>总结出差收获</strong></p>\n<p> 给团队分享客户的情况和每个人的特点，让双方都相互了解得更多。<br>在社交网络上保持和客户的联系。如果能让客户用微信就更好了。</p>\n</li>\n<li><p><strong>利用和客户面对面交流过的优势</strong></p>\n<p> 在standup时先就各种新闻或者客户社交网络的更新闲聊两句，让双方更有一个团队的感觉。</p>\n</li>\n<li><p><strong>填写报销</strong></p>\n<p> 一定要及时填写，超过3个月可就不能报销了。</p>\n</li>\n</ol>\n<h4 id=\"国内出差\">国内出差</h4><ol>\n<li><p><strong>选对机场</strong></p>\n<p> 很不愿意回想起培训地点在上海虹桥机场附近，结果买票买到了浦东机场的经历。。。</p>\n</li>\n<li><p><strong>随身无线路由器</strong></p>\n<p> 解决住酒店时只有有线网络的情况。</p>\n</li>\n<li><p><strong>4g无线路由器</strong></p>\n<p> 有些客户是不提供非员工的上网的，所以当我们要连外网进行演示时，最好能有一个稳定的接入方式。</p>\n</li>\n<li><p><strong>了解培训受众</strong></p>\n<p> 知己知彼，百战不殆。我们需要根据手中的不同，调整培训的内容和重点。</p>\n</li>\n<li><p><strong>和负责客户的同事聊一聊</strong></p>\n<p> 有些培训是作为咨询的一部分交付的。所以需要配合咨询的同事，不仅从受众那里确定需求，还需要辅助咨询的项目开展工作。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>由于我去国外出差比在国内出差的经验要多一些，所以本文以去国外出差为主，讲述个人经历中那些必不可少的checklist。</p>\n<h3 id=\"如何出一本技术书\">如何出一本技术书</h3><hr>\n<h4 id=\"国外出差\">国外出差</h4><h5 id=\"出差前你通常需要准备的：\">出差前你通常需要准备的：</h5><ol>\n<li><p><strong>护照</strong></p>\n<p> 不用说，一定要保管好。也只有在机场才会用到。</p>\n</li>\n<li><p><strong>插线板</strong></p>\n<p> 无论去哪里出差，带个插线板是必不可少的，可谓居家旅行的必备。哪怕是去英国这样的地方，也只用带一个转换器即可让手机啦，电脑啦之类的设备保持电力充沛。</p>\n</li>\n<li><p><strong>国际漫游</strong></p>\n<p> 出国出差前开通国际漫游，一个是为了紧急情况能接打电话（才不告诉你是因为到机场没司机没电话没外币才觉得国际漫游是必要的），另一个是为了方便接收短信。</p>\n</li>\n<li><p><strong>拖鞋</strong></p>\n<p> 飞机场和国外公寓一般都不提供拖鞋，为了让自己长途飞行轻松一些，拖鞋也是必要的。</p>\n</li>\n<li><p><strong>耳塞</strong></p>\n<p> 和上面一样，能抵御飞机上小朋友不间断的哭闹以及别的乘客的鼾声。</p>\n</li>\n<li><p><strong>Kindle，iPad或者书</strong></p>\n<p> 能缓解你等飞机，等车，等anything时的焦虑。</p>\n</li>\n<li><p><strong>伞</strong></p>\n<p> 这个看个人习惯了，有人习惯不带，等有雨了再买，我习惯去哪里都带着，也许是第一次出差养成的习惯。</p>\n</li>\n<li><p><strong>男士－剃须刀，女士－不知道</strong></p>\n<p> 出差一般都是去客户现场，那去了可不能太随意，一定要注意自己的仪表，剃须刀就派上了大用处。</p>\n</li>\n<li><p><strong>一双合适的鞋子</strong></p>\n<p> 有着好的空气和环境，再不去锻炼可就太亏了。</p>\n</li>\n<li><p><strong>一张以上的储蓄卡，一张以上的信用卡</strong></p>\n<p>储蓄卡和信用卡最好是visa的，虽然银联的也都通用，但是有些地方银联的ATM不见得那么多。推荐一张以上是因为笔者遇到过银行卡消磁的sui事。。。储蓄卡推荐大家办华夏银行的，每日第一笔境外取现免费，办理也容易。</p>\n</li>\n<li><p><strong>少量的外币现金</strong></p>\n<p>基于上面银行卡的建议，大家可以少带现金，毕竟国内兑换汇率不划算。但是也别不带，不然出现任何意外（atm不支持银联，机场打车没现金等），欲哭无泪啊。</p>\n</li>\n<li><p><strong>查好公寓地址以及机场到公寓的交通方式</strong></p>\n<p>这是以防万一的一招，避免司机没接到你的情况，可以自己到公寓。最好能打印出来，或者存在手机上面。最好把国外办公室发给你的出差邮件打印出来。上面都有紧急情况联系当地公寓供应商的联系方式。</p>\n</li>\n<li><p><strong>查好客户办公室的地址和交通方式</strong></p>\n<p>和上面一样，这是避免你没拿到公司给你的手机和无线网卡的情况。还可以根据交通方式，办理最适合的交通卡之类的。</p>\n</li>\n<li><p><strong>了解出差地点当地的天气和温度</strong></p>\n<p>这决定了你要带什么衣服，拿几个箱子，怎么搭配。</p>\n</li>\n<li><p><strong>了解哪些同事也在同一时间段出差</strong></p>\n<p>可以一起约着玩，在异乡也有个伴。</p>\n</li>\n<li><p><strong>翻译过的驾照</strong></p>\n<p>在澳洲租车自驾还是很方便的，但是前提是要有翻译过的驾照。</p>\n</li>\n<li><p><strong>出差计划</strong></p>\n<p>提前和客户沟通出差的目标，以及需要配合的人等，事先为出差做好准备。</p>\n</li>\n<li><p><strong>了解客户的dressing code</strong></p>\n<p>虽然公司对于着装没有要求，但是客户有的时候有，所以给予客户尊重，做合适的穿衣搭配。</p>\n</li>\n<li><p><strong>别忘记给客户带一些小礼物</strong></p>\n<p>一般客户对中国文化都比较感兴趣，礼物无论大小都会拉近距离。</p>\n</li>\n<li><p><strong>最后得带个大箱子</strong></p>\n<p>估计不少同事朋友都得让帮着带东西，小了放不下。:P</p>\n</li>\n</ol>\n<h5 id=\"出差期间，你可能还需要注意这些：\">出差期间，你可能还需要注意这些：</h5><ol>\n<li><p><strong>制订每一天的计划</strong></p>\n<p> 根据总的出差计划，制订每一天需要完成的目标。在每天结束时，查看进展，从而调整第二天的计划。</p>\n</li>\n<li><p><strong>流程化解决每天早中饭，晚上再用特色美食犒劳自己</strong></p>\n<p> 老外一般对于早中饭都比较随意，更注重工作的效率，咱们也可以按照他们的习惯来；晚饭的话利用的是自己的时间，就可以按照自己的喜好来了。不过不推荐大家吃中餐，普遍都不怎么好。</p>\n</li>\n<li><p><strong>配置网络，找到座位</strong></p>\n<p> 到客户那里，最先要解决的就是如何上网和在哪里工作的问题，一般都可以通过客户的team lead来协调。</p>\n</li>\n<li><p><strong>和客户building</strong></p>\n<p> 形式有很多，例如上班时间喝杯咖啡，下班后喝酒、吃饭，或者周末一起出行；如果碰到客户的Friday drink和年会等活动，更是拉近关系的好机会。需要注意的是在这些活动中要学会请客，不要什么都请，也不要什么都不请，度要拿捏合适。</p>\n</li>\n<li><p><strong>给客户做session</strong></p>\n<p> 记住你的title包含着consultant，到客户现场，需要把好的实践，工作方式和工具，介绍给客户，让客户了解咱们的技术实力。</p>\n</li>\n<li><p><strong>有机会多和客户pair</strong></p>\n<p> 和上一条一样，好不容易有了一起工作和合作的机会，咱们需要通过pair的方式，要让他们认识到咱们不光能说，还能从技术上实现。</p>\n</li>\n<li><p><strong>观察客户的座位</strong></p>\n<p> 这是之前一个资深的BA告诉我的，咱们可以通过客户的作为，找到最合适帮忙的人，例如谁和业务人员坐得近，可以从他那里得到更多的业务相关信息等。</p>\n</li>\n<li><p><strong>观察客户的工作模式和习惯</strong></p>\n<p> 这样可以协调我们的工作来相互配合，例如中午饭一般客户都什么时间吃，会持续多久，换成北京时间，我们什么时候找客户会比较合适。</p>\n</li>\n<li><p><strong>参加客户的showcase</strong></p>\n<p> 最好能自己主动负责一次showcase，尤其是有客户大老板参与的showcase。这样会加深客户对我们的印象，加强双方的合作。</p>\n</li>\n<li><p><strong>在Facebook，Twitter，Linkedin上关注客户，时不时地互动</strong></p>\n<p>最好在和客户关系拉近之后再这么做。</p>\n</li>\n<li><p><strong>观察团队的表现，并及时反馈给团队</strong></p>\n<p>观察自己的问题始终是很难的，而客户一般也不会直接告诉你有什么问题，这就需要在客户现场的我们发现可以提高沟通效率的方式，做出改变。</p>\n</li>\n<li><p><strong>及时告知团队可能缺失的信息</strong></p>\n<p>在客户现场开会和讨论时，时常会发现客户会提到一些团队不了解的内容，我们需要及时告知团队，也使得客户也意识到存在信息不均等的问题，从而在以后的开会和讨论中更多的给相关上下文。</p>\n</li>\n<li><p><strong>问客户要反馈</strong></p>\n<p>可以是对个人的反馈，也可以是对团队的反馈，还可以是对session或者会议的反馈。这比从邮件或者客户manager得到的反馈要准确和真实的多。</p>\n</li>\n<li><p><strong>充分利用闲聊</strong></p>\n<p>在闲聊中介绍团队的情况和每个人的特点，让客户熟悉团队中的“人”，而不只是作为工作的伙伴。</p>\n</li>\n<li><p><strong>每天换衣服</strong></p>\n<p>西方人认为你两天穿同一件衣服，是代表第一天没回家。所以可以充分利用公寓的洗衣机和烘干机，方便多换几套衣服。</p>\n</li>\n<li><p><strong>参加当地办公室周五的Friday lunch</strong></p>\n<p>听别的办公室的发展和大家的想法，了解和熟悉更多的外国同事，说不定还能碰到熟人或者仰慕的大牛呢。</p>\n</li>\n<li><p><strong>参加当地的社区活动</strong></p>\n<p>如果能刚好赶上当地的agile conference或者各类专题讲座就太好了，能了解到和国内的不同，也可以学习到不少实践，Copy to China。：）</p>\n</li>\n<li><p><strong>多到处走走，熟悉当地的情况</strong></p>\n<p>这样的话在客户说一些本地的情况时，和客户有更多的共同语言，聊得更深入。</p>\n</li>\n<li><p><strong>给大家带小吃</strong></p>\n<p>这个就不用多说啦。</p>\n</li>\n</ol>\n<h5 id=\"当回到办公室之后，你可能还需要做这些事情：\">当回到办公室之后，你可能还需要做这些事情：</h5><ol>\n<li><p><strong>总结出差收获</strong></p>\n<p> 给团队分享客户的情况和每个人的特点，让双方都相互了解得更多。<br>在社交网络上保持和客户的联系。如果能让客户用微信就更好了。</p>\n</li>\n<li><p><strong>利用和客户面对面交流过的优势</strong></p>\n<p> 在standup时先就各种新闻或者客户社交网络的更新闲聊两句，让双方更有一个团队的感觉。</p>\n</li>\n<li><p><strong>填写报销</strong></p>\n<p> 一定要及时填写，超过3个月可就不能报销了。</p>\n</li>\n</ol>\n<h4 id=\"国内出差\">国内出差</h4><ol>\n<li><p><strong>选对机场</strong></p>\n<p> 很不愿意回想起培训地点在上海虹桥机场附近，结果买票买到了浦东机场的经历。。。</p>\n</li>\n<li><p><strong>随身无线路由器</strong></p>\n<p> 解决住酒店时只有有线网络的情况。</p>\n</li>\n<li><p><strong>4g无线路由器</strong></p>\n<p> 有些客户是不提供非员工的上网的，所以当我们要连外网进行演示时，最好能有一个稳定的接入方式。</p>\n</li>\n<li><p><strong>了解培训受众</strong></p>\n<p> 知己知彼，百战不殆。我们需要根据手中的不同，调整培训的内容和重点。</p>\n</li>\n<li><p><strong>和负责客户的同事聊一聊</strong></p>\n<p> 有些培训是作为咨询的一部分交付的。所以需要配合咨询的同事，不仅从受众那里确定需求，还需要辅助咨询的项目开展工作。</p>\n</li>\n</ol>\n"},{"title":"Bug集锦 －安全应该是全面的","date":"2016-01-26T13:00:00.000Z","comments":1,"_content":"\n写Bug集锦的目的在于分享从业这些年来遇到的这些有趣的问题，希望在读这些小故事的同时，能带给大家一些思考。\n\n### 安全应该是全面的\n\n小蔡被分配到测试工资系统，这个系统不仅公司内部会使用，而且还会有面向其他大客户的定制版。\n\n由于工资系统的特殊性，不仅要求其在使用时的功能性，系统安全性也是一个很重要的指标。\n\n为了让系统更安全，业务分析人员在项目初始时就为系统设计了动态短信密码和随机键盘的功能（图5.1），使得系统在用户登录时就能验证用户的身份。只有在系统内部注册过手机号，并在登录时通过手机获取动态短信密码，并使用随机键盘输入自己设定的登陆密码之后，用户才能访问工资系统。\n\n在用户登录这部分，小蔡设计了不少安全性的测试用例，例如SQL注入等，但是都被系统防范住了。小蔡本以为安全测试做的很全面了，但是当测试功能点时，由于URL是www.xyz.com/user/123456的模式，她好奇地通过篡改URL最后的用户ID，期望系统能告知她无访问权限。可是没想到却查看到了另一个用户的信息。要知道企业内部的工号都是连续的，只要有人有耐心，这个缺陷可以让所有人的工资信息都曝光。\n\n小蔡意识到不仅是篡改用户ID会有问题，而且系统的URL模式也可能会有更大的问题。因为普通用户的URL是www.xyz.com/user/123456，而系统管理员的URL是www.xyz.com/admin/654321，最后几位也是工号。要知道管理员是可以看所有人的工资信息的！要是有人使用www.xyz.com/admin/123456，会被认为是管理员吗？\n\n小蔡带着这个问题进行了尝试，果真作为普通用户也被当成管理员，从而可以查看所有人的工资了。\n\n看来系统只是在登录时作了严格的安全性检测，但是对于登录之后的用户权限，却丝毫没有考虑。\n\n小蔡马上把这一发现通知项目经理，并确定这个缺陷为高优先级和高风险。整个开发团队在第一时间就修复了这个严重的缺陷。\n\n好奇心没有杀死猫，反而帮助小蔡在测试中发现了一个隐藏的重大安全性缺陷。小蔡也意识到，一个系统的安全性，并不单纯来自于防范系统外部的入侵，还需要严格审视系统内部的安全性漏洞。系统内外部的安全性是一体的，需要全面的设计。\n\n#####【扩展知识】\n动态短信\n随机键盘\nSQL注入\nOWASP Top 10\nURL pattern\nURL篡改","source":"_posts/Bug_Series_Secutiry_In_All_Perspects.md","raw":"title: Bug集锦 －安全应该是全面的\ndate: 2016-01-27\ncategories:\n- Test\ntags:\n- Bug\n- Web\n- Practice\n- Series\n- Bug集锦\ncomments: true\n---\n\n写Bug集锦的目的在于分享从业这些年来遇到的这些有趣的问题，希望在读这些小故事的同时，能带给大家一些思考。\n\n### 安全应该是全面的\n\n小蔡被分配到测试工资系统，这个系统不仅公司内部会使用，而且还会有面向其他大客户的定制版。\n\n由于工资系统的特殊性，不仅要求其在使用时的功能性，系统安全性也是一个很重要的指标。\n\n为了让系统更安全，业务分析人员在项目初始时就为系统设计了动态短信密码和随机键盘的功能（图5.1），使得系统在用户登录时就能验证用户的身份。只有在系统内部注册过手机号，并在登录时通过手机获取动态短信密码，并使用随机键盘输入自己设定的登陆密码之后，用户才能访问工资系统。\n\n在用户登录这部分，小蔡设计了不少安全性的测试用例，例如SQL注入等，但是都被系统防范住了。小蔡本以为安全测试做的很全面了，但是当测试功能点时，由于URL是www.xyz.com/user/123456的模式，她好奇地通过篡改URL最后的用户ID，期望系统能告知她无访问权限。可是没想到却查看到了另一个用户的信息。要知道企业内部的工号都是连续的，只要有人有耐心，这个缺陷可以让所有人的工资信息都曝光。\n\n小蔡意识到不仅是篡改用户ID会有问题，而且系统的URL模式也可能会有更大的问题。因为普通用户的URL是www.xyz.com/user/123456，而系统管理员的URL是www.xyz.com/admin/654321，最后几位也是工号。要知道管理员是可以看所有人的工资信息的！要是有人使用www.xyz.com/admin/123456，会被认为是管理员吗？\n\n小蔡带着这个问题进行了尝试，果真作为普通用户也被当成管理员，从而可以查看所有人的工资了。\n\n看来系统只是在登录时作了严格的安全性检测，但是对于登录之后的用户权限，却丝毫没有考虑。\n\n小蔡马上把这一发现通知项目经理，并确定这个缺陷为高优先级和高风险。整个开发团队在第一时间就修复了这个严重的缺陷。\n\n好奇心没有杀死猫，反而帮助小蔡在测试中发现了一个隐藏的重大安全性缺陷。小蔡也意识到，一个系统的安全性，并不单纯来自于防范系统外部的入侵，还需要严格审视系统内部的安全性漏洞。系统内外部的安全性是一体的，需要全面的设计。\n\n#####【扩展知识】\n动态短信\n随机键盘\nSQL注入\nOWASP Top 10\nURL pattern\nURL篡改","slug":"Bug_Series_Secutiry_In_All_Perspects","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cinsjb5a10000il3ntu79ckwv","layout":"post","photos":[],"link":"","content":"<p>写Bug集锦的目的在于分享从业这些年来遇到的这些有趣的问题，希望在读这些小故事的同时，能带给大家一些思考。</p>\n<h3 id=\"安全应该是全面的\">安全应该是全面的</h3><p>小蔡被分配到测试工资系统，这个系统不仅公司内部会使用，而且还会有面向其他大客户的定制版。</p>\n<p>由于工资系统的特殊性，不仅要求其在使用时的功能性，系统安全性也是一个很重要的指标。</p>\n<p>为了让系统更安全，业务分析人员在项目初始时就为系统设计了动态短信密码和随机键盘的功能（图5.1），使得系统在用户登录时就能验证用户的身份。只有在系统内部注册过手机号，并在登录时通过手机获取动态短信密码，并使用随机键盘输入自己设定的登陆密码之后，用户才能访问工资系统。</p>\n<p>在用户登录这部分，小蔡设计了不少安全性的测试用例，例如SQL注入等，但是都被系统防范住了。小蔡本以为安全测试做的很全面了，但是当测试功能点时，由于URL是www.xyz.com/user/123456的模式，她好奇地通过篡改URL最后的用户ID，期望系统能告知她无访问权限。可是没想到却查看到了另一个用户的信息。要知道企业内部的工号都是连续的，只要有人有耐心，这个缺陷可以让所有人的工资信息都曝光。</p>\n<p>小蔡意识到不仅是篡改用户ID会有问题，而且系统的URL模式也可能会有更大的问题。因为普通用户的URL是www.xyz.com/user/123456，而系统管理员的URL是www.xyz.com/admin/654321，最后几位也是工号。要知道管理员是可以看所有人的工资信息的！要是有人使用www.xyz.com/admin/123456，会被认为是管理员吗？</p>\n<p>小蔡带着这个问题进行了尝试，果真作为普通用户也被当成管理员，从而可以查看所有人的工资了。</p>\n<p>看来系统只是在登录时作了严格的安全性检测，但是对于登录之后的用户权限，却丝毫没有考虑。</p>\n<p>小蔡马上把这一发现通知项目经理，并确定这个缺陷为高优先级和高风险。整个开发团队在第一时间就修复了这个严重的缺陷。</p>\n<p>好奇心没有杀死猫，反而帮助小蔡在测试中发现了一个隐藏的重大安全性缺陷。小蔡也意识到，一个系统的安全性，并不单纯来自于防范系统外部的入侵，还需要严格审视系统内部的安全性漏洞。系统内外部的安全性是一体的，需要全面的设计。</p>\n<h5 id=\"【扩展知识】\">【扩展知识】</h5><p>动态短信<br>随机键盘<br>SQL注入<br>OWASP Top 10<br>URL pattern<br>URL篡改</p>\n","site":{"data":{}},"excerpt":"","more":"<p>写Bug集锦的目的在于分享从业这些年来遇到的这些有趣的问题，希望在读这些小故事的同时，能带给大家一些思考。</p>\n<h3 id=\"安全应该是全面的\">安全应该是全面的</h3><p>小蔡被分配到测试工资系统，这个系统不仅公司内部会使用，而且还会有面向其他大客户的定制版。</p>\n<p>由于工资系统的特殊性，不仅要求其在使用时的功能性，系统安全性也是一个很重要的指标。</p>\n<p>为了让系统更安全，业务分析人员在项目初始时就为系统设计了动态短信密码和随机键盘的功能（图5.1），使得系统在用户登录时就能验证用户的身份。只有在系统内部注册过手机号，并在登录时通过手机获取动态短信密码，并使用随机键盘输入自己设定的登陆密码之后，用户才能访问工资系统。</p>\n<p>在用户登录这部分，小蔡设计了不少安全性的测试用例，例如SQL注入等，但是都被系统防范住了。小蔡本以为安全测试做的很全面了，但是当测试功能点时，由于URL是www.xyz.com/user/123456的模式，她好奇地通过篡改URL最后的用户ID，期望系统能告知她无访问权限。可是没想到却查看到了另一个用户的信息。要知道企业内部的工号都是连续的，只要有人有耐心，这个缺陷可以让所有人的工资信息都曝光。</p>\n<p>小蔡意识到不仅是篡改用户ID会有问题，而且系统的URL模式也可能会有更大的问题。因为普通用户的URL是www.xyz.com/user/123456，而系统管理员的URL是www.xyz.com/admin/654321，最后几位也是工号。要知道管理员是可以看所有人的工资信息的！要是有人使用www.xyz.com/admin/123456，会被认为是管理员吗？</p>\n<p>小蔡带着这个问题进行了尝试，果真作为普通用户也被当成管理员，从而可以查看所有人的工资了。</p>\n<p>看来系统只是在登录时作了严格的安全性检测，但是对于登录之后的用户权限，却丝毫没有考虑。</p>\n<p>小蔡马上把这一发现通知项目经理，并确定这个缺陷为高优先级和高风险。整个开发团队在第一时间就修复了这个严重的缺陷。</p>\n<p>好奇心没有杀死猫，反而帮助小蔡在测试中发现了一个隐藏的重大安全性缺陷。小蔡也意识到，一个系统的安全性，并不单纯来自于防范系统外部的入侵，还需要严格审视系统内部的安全性漏洞。系统内外部的安全性是一体的，需要全面的设计。</p>\n<h5 id=\"【扩展知识】\">【扩展知识】</h5><p>动态短信<br>随机键盘<br>SQL注入<br>OWASP Top 10<br>URL pattern<br>URL篡改</p>\n"},{"title":"Bug集锦 －理论与现实这么近","date":"2016-01-26T13:00:00.000Z","comments":1,"_content":"\n写Bug集锦的目的在于分享从业这些年来遇到的这些有趣的问题，希望在读这些小故事的同时，能带给大家一些思考。\n\n### 理论与现实这么近\n\n作为计算机系毕业生的小蔡，一直觉得学校里学的理论知识，和现在的测试工作差距太大，在实际的工作中也没有什么作用。直到有一天她碰到这么一个有趣的问题。\n\n小蔡负责测试的是一个Web产品，基于不同的搜索条件，会显示大量的结果。由于搜索结果太多被分成了很多页，为了方便用户快捷跳转到特定的页面，开发人员特意设计了一个页面快速跳转的功能。\n\n\n![搜索结果页面快速跳转](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Bug_Series_1.1.png)\n\n\n图 1.1 － 搜索结果页面快速跳转\n\n在设计测试用例的时候小蔡就留心了，因为很多测试理论的书籍都描述过，对于输入框可以进行的验证点很多，比如说特殊字符、超长字符、负值、0值和null值，以及很大的数值等。对于大部分的测试用例，开发人员都处理得很好，没有发现缺陷，小蔡也松了口气。\n\n当测试到输入很大数值的用例时，由于不确定多大的数值会出错，也不能拿到代码，小蔡就自己选了一个数值：9999999999（10个9）。输入10个9、点击确定，突然，页面崩溃了！100以内的小数值，以及输入小于等于搜索结果页面数的数值等情况，小蔡在测试中都选取过，测试结果都很正常，那到底数值大到什么程度的时候页面会崩溃呢？一时想不到更好的办法，小菜只好硬着头皮使用尝试法开始确定出错的数值范围。\n\n10个9，出错；9个9，正常跳转到最后一页。突然小蔡想到，数据结构课程不是学过很多查找法吗！二分法就这么出现在了眼前，对，二分查找法！，5000000000（9个0），出错；2500000000（8个0），正常。没有线索，就这么一点一点查找。花了3个小时，小蔡终于定位到出错的数值：4294967295。小蔡很纳闷，怎么是这么一个奇怪的数值呢？有零有整的。计算机专业的背景给了小蔡一个提示，不会是2的多少次幂吧？果真，4294967295是2的32次方－1。和开发人员一沟通，才发现由于开发人员设想页面最大不会超过2的32次方，所以对于这个字段可以输入的最大数值的类型，选择的是int32；但是同时又没有对超过这个范围的数值进行任何的处理，就造成了程序判断中对于请求更大数值的页面时的溢出，从而导致了产品页面的崩溃。\n\n发现了这个隐藏的缺陷，小蔡还是很有成就感的，但又觉得如果能早点知道代码的逻辑，可能自己就不会花这么长的时间了。同时，一直觉得计算机的理论知识不会应用到测试实践中，可没想到这次多亏了学校中学到的这些基础知识，不只是int32，2的32次方，甚至还有二分查找的算法也给了自己解决问题的灵感。没有这些知识，定位问题就更困难了。\n\n#####【扩展知识】\n边界值分析\n二分查找法","source":"_posts/Bug_Series_Theory_And_Reality.md","raw":"title: Bug集锦 －理论与现实这么近\ndate: 2016-01-27\ncategories:\n- Test\ntags:\n- Bug\n- Web\n- Practice\n- Series\n- Bug集锦\ncomments: true\n---\n\n写Bug集锦的目的在于分享从业这些年来遇到的这些有趣的问题，希望在读这些小故事的同时，能带给大家一些思考。\n\n### 理论与现实这么近\n\n作为计算机系毕业生的小蔡，一直觉得学校里学的理论知识，和现在的测试工作差距太大，在实际的工作中也没有什么作用。直到有一天她碰到这么一个有趣的问题。\n\n小蔡负责测试的是一个Web产品，基于不同的搜索条件，会显示大量的结果。由于搜索结果太多被分成了很多页，为了方便用户快捷跳转到特定的页面，开发人员特意设计了一个页面快速跳转的功能。\n\n\n![搜索结果页面快速跳转](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Bug_Series_1.1.png)\n\n\n图 1.1 － 搜索结果页面快速跳转\n\n在设计测试用例的时候小蔡就留心了，因为很多测试理论的书籍都描述过，对于输入框可以进行的验证点很多，比如说特殊字符、超长字符、负值、0值和null值，以及很大的数值等。对于大部分的测试用例，开发人员都处理得很好，没有发现缺陷，小蔡也松了口气。\n\n当测试到输入很大数值的用例时，由于不确定多大的数值会出错，也不能拿到代码，小蔡就自己选了一个数值：9999999999（10个9）。输入10个9、点击确定，突然，页面崩溃了！100以内的小数值，以及输入小于等于搜索结果页面数的数值等情况，小蔡在测试中都选取过，测试结果都很正常，那到底数值大到什么程度的时候页面会崩溃呢？一时想不到更好的办法，小菜只好硬着头皮使用尝试法开始确定出错的数值范围。\n\n10个9，出错；9个9，正常跳转到最后一页。突然小蔡想到，数据结构课程不是学过很多查找法吗！二分法就这么出现在了眼前，对，二分查找法！，5000000000（9个0），出错；2500000000（8个0），正常。没有线索，就这么一点一点查找。花了3个小时，小蔡终于定位到出错的数值：4294967295。小蔡很纳闷，怎么是这么一个奇怪的数值呢？有零有整的。计算机专业的背景给了小蔡一个提示，不会是2的多少次幂吧？果真，4294967295是2的32次方－1。和开发人员一沟通，才发现由于开发人员设想页面最大不会超过2的32次方，所以对于这个字段可以输入的最大数值的类型，选择的是int32；但是同时又没有对超过这个范围的数值进行任何的处理，就造成了程序判断中对于请求更大数值的页面时的溢出，从而导致了产品页面的崩溃。\n\n发现了这个隐藏的缺陷，小蔡还是很有成就感的，但又觉得如果能早点知道代码的逻辑，可能自己就不会花这么长的时间了。同时，一直觉得计算机的理论知识不会应用到测试实践中，可没想到这次多亏了学校中学到的这些基础知识，不只是int32，2的32次方，甚至还有二分查找的算法也给了自己解决问题的灵感。没有这些知识，定位问题就更困难了。\n\n#####【扩展知识】\n边界值分析\n二分查找法","slug":"Bug_Series_Theory_And_Reality","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cinsjb5au0007il3nb6f1ef7z","layout":"post","photos":[],"link":"","content":"<p>写Bug集锦的目的在于分享从业这些年来遇到的这些有趣的问题，希望在读这些小故事的同时，能带给大家一些思考。</p>\n<h3 id=\"理论与现实这么近\">理论与现实这么近</h3><p>作为计算机系毕业生的小蔡，一直觉得学校里学的理论知识，和现在的测试工作差距太大，在实际的工作中也没有什么作用。直到有一天她碰到这么一个有趣的问题。</p>\n<p>小蔡负责测试的是一个Web产品，基于不同的搜索条件，会显示大量的结果。由于搜索结果太多被分成了很多页，为了方便用户快捷跳转到特定的页面，开发人员特意设计了一个页面快速跳转的功能。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Bug_Series_1.1.png\" alt=\"搜索结果页面快速跳转\"></p>\n<p>图 1.1 － 搜索结果页面快速跳转</p>\n<p>在设计测试用例的时候小蔡就留心了，因为很多测试理论的书籍都描述过，对于输入框可以进行的验证点很多，比如说特殊字符、超长字符、负值、0值和null值，以及很大的数值等。对于大部分的测试用例，开发人员都处理得很好，没有发现缺陷，小蔡也松了口气。</p>\n<p>当测试到输入很大数值的用例时，由于不确定多大的数值会出错，也不能拿到代码，小蔡就自己选了一个数值：9999999999（10个9）。输入10个9、点击确定，突然，页面崩溃了！100以内的小数值，以及输入小于等于搜索结果页面数的数值等情况，小蔡在测试中都选取过，测试结果都很正常，那到底数值大到什么程度的时候页面会崩溃呢？一时想不到更好的办法，小菜只好硬着头皮使用尝试法开始确定出错的数值范围。</p>\n<p>10个9，出错；9个9，正常跳转到最后一页。突然小蔡想到，数据结构课程不是学过很多查找法吗！二分法就这么出现在了眼前，对，二分查找法！，5000000000（9个0），出错；2500000000（8个0），正常。没有线索，就这么一点一点查找。花了3个小时，小蔡终于定位到出错的数值：4294967295。小蔡很纳闷，怎么是这么一个奇怪的数值呢？有零有整的。计算机专业的背景给了小蔡一个提示，不会是2的多少次幂吧？果真，4294967295是2的32次方－1。和开发人员一沟通，才发现由于开发人员设想页面最大不会超过2的32次方，所以对于这个字段可以输入的最大数值的类型，选择的是int32；但是同时又没有对超过这个范围的数值进行任何的处理，就造成了程序判断中对于请求更大数值的页面时的溢出，从而导致了产品页面的崩溃。</p>\n<p>发现了这个隐藏的缺陷，小蔡还是很有成就感的，但又觉得如果能早点知道代码的逻辑，可能自己就不会花这么长的时间了。同时，一直觉得计算机的理论知识不会应用到测试实践中，可没想到这次多亏了学校中学到的这些基础知识，不只是int32，2的32次方，甚至还有二分查找的算法也给了自己解决问题的灵感。没有这些知识，定位问题就更困难了。</p>\n<h5 id=\"【扩展知识】\">【扩展知识】</h5><p>边界值分析<br>二分查找法</p>\n","site":{"data":{}},"excerpt":"","more":"<p>写Bug集锦的目的在于分享从业这些年来遇到的这些有趣的问题，希望在读这些小故事的同时，能带给大家一些思考。</p>\n<h3 id=\"理论与现实这么近\">理论与现实这么近</h3><p>作为计算机系毕业生的小蔡，一直觉得学校里学的理论知识，和现在的测试工作差距太大，在实际的工作中也没有什么作用。直到有一天她碰到这么一个有趣的问题。</p>\n<p>小蔡负责测试的是一个Web产品，基于不同的搜索条件，会显示大量的结果。由于搜索结果太多被分成了很多页，为了方便用户快捷跳转到特定的页面，开发人员特意设计了一个页面快速跳转的功能。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Bug_Series_1.1.png\" alt=\"搜索结果页面快速跳转\"></p>\n<p>图 1.1 － 搜索结果页面快速跳转</p>\n<p>在设计测试用例的时候小蔡就留心了，因为很多测试理论的书籍都描述过，对于输入框可以进行的验证点很多，比如说特殊字符、超长字符、负值、0值和null值，以及很大的数值等。对于大部分的测试用例，开发人员都处理得很好，没有发现缺陷，小蔡也松了口气。</p>\n<p>当测试到输入很大数值的用例时，由于不确定多大的数值会出错，也不能拿到代码，小蔡就自己选了一个数值：9999999999（10个9）。输入10个9、点击确定，突然，页面崩溃了！100以内的小数值，以及输入小于等于搜索结果页面数的数值等情况，小蔡在测试中都选取过，测试结果都很正常，那到底数值大到什么程度的时候页面会崩溃呢？一时想不到更好的办法，小菜只好硬着头皮使用尝试法开始确定出错的数值范围。</p>\n<p>10个9，出错；9个9，正常跳转到最后一页。突然小蔡想到，数据结构课程不是学过很多查找法吗！二分法就这么出现在了眼前，对，二分查找法！，5000000000（9个0），出错；2500000000（8个0），正常。没有线索，就这么一点一点查找。花了3个小时，小蔡终于定位到出错的数值：4294967295。小蔡很纳闷，怎么是这么一个奇怪的数值呢？有零有整的。计算机专业的背景给了小蔡一个提示，不会是2的多少次幂吧？果真，4294967295是2的32次方－1。和开发人员一沟通，才发现由于开发人员设想页面最大不会超过2的32次方，所以对于这个字段可以输入的最大数值的类型，选择的是int32；但是同时又没有对超过这个范围的数值进行任何的处理，就造成了程序判断中对于请求更大数值的页面时的溢出，从而导致了产品页面的崩溃。</p>\n<p>发现了这个隐藏的缺陷，小蔡还是很有成就感的，但又觉得如果能早点知道代码的逻辑，可能自己就不会花这么长的时间了。同时，一直觉得计算机的理论知识不会应用到测试实践中，可没想到这次多亏了学校中学到的这些基础知识，不只是int32，2的32次方，甚至还有二分查找的算法也给了自己解决问题的灵感。没有这些知识，定位问题就更困难了。</p>\n<h5 id=\"【扩展知识】\">【扩展知识】</h5><p>边界值分析<br>二分查找法</p>\n"},{"title":"22 Rules In Mobile App Testing","date":"2016-05-12T14:00:00.000Z","comments":1,"_content":"[Translated from my Chinese article.]\n\nNowadays, with the popularization of mobile devices, mobile apps are widely used everywhere, and lots of companies start business in mobile apps field.\n\nThis trend brings the challenges to use: we need to deliver the mobile apps to market in time with high quality, and continuously improve them.\n\nWe can categorize mobile apps to native apps and hybrid apps. They have many differences compared with Desktop/Web applications, and testers are encountered with more challenges due to the lacks of testing tool and methodology.\n\nWith testing a Telecom mobile portal app for more than 2 years, I have summarized some testing experience and practices for native apps on iOS and Android. And most of them are also useful for testing hybrid apps.\n\n## 1.\tDefine your testing devices and operation systems\n\nAs we all know, the issue of mobile devices’ fragmentation is getting more and more serious, because there are more operation systems with different versions, different hardware of devices, different screen sizes, different resolutions, different pixel densities and etc.\n\nWe can’t cover all the devices and operation systems from ROI (Return of Investment) perspective, so we need to choose the testing devices based on the popularization of them in market.\n\nWe can not only use Google Analytics or Adobe Omniture to tracking user and generate the devices’ usage report to define testing devices and operation systems, but also read the market share of iOS and Android operation system from their official website:\nhttps://developer.apple.com/support/appstore/, http://developer.android.com/about/dashboards/index.html.\n\n## 2.\tSwitch between networks\n\nThe particularity of mobile app is user always use the app on their way, so when we are conducting our testing, we should also focus on the impact of network switch to app. For example we need to cover the scenario of using app on 3G network and then switch to 4G or Wi-Fi or Airplane Mode and so on.\n\nIf the app will authenticated on the mobile network and get a token from it then proceed functionalities forward, we will definitely cover the scenario of switching mobile network to other networks.\n\nWhen we perform testing on network switching scenarios, we need also pay attention to the error message given to user. The error message should be user friendly, and give user instructions to follow to solve the issues.\n\n## 3.\tMulti-tasking\n\nWe usually run multiple apps on our mobile devices, so when we testing mobile apps, we need to consider the app switching.\n\nThis includes the scenarios of switching app to another, or close app at background, then how app acts when user open it again: should it reload the info when user left, or it will start from scratch?\n\n## 4.\tGestures\n\nGestures are supported by iOS and Android operation systems, when app introduces it own gestures to user, they would conflict with the system ones.\n\nSuch as the wipe gesture to go back introduced in iOS 7: for a long time, to get back one screen, you had to tap the upper left corner on screen (named as “<” or“back” button); on iOS 7, we can swipe the screen to the right and go back.\n\nBut before iOS 7 introduced this gesture, many app use this gesture to call out drawer navigation panel in app. At the time when iOS 7 is released, many apps are not ready for this gesture, so when user use this gesture in app, sometimes it will go back, and sometimes it will call out the drawer navigation panel.\n\nSince the user experience for this is so wired, so we should not let this happen from beginning.\n\n## 5.\tUser experience\n\nAs we talk about user experience, we are not only focus on the layout and stuff like that, but also test app’s portrait and landscape display.\n\nAnd we need to check the level of support to accessibility, so that more people can use our app more easily and freely.\n\nWe need also check whether app is following the design guide of iOS and Android official documents. Especially for the apps support both iOS and Android operation systems, it’s better to let each app follow the design guide of corresponding operation system, rather than all apps just follow iOS design guide.\n\nAnd for the apps embedded Webview, if the Webview is not Responsive designed, it will cause display issues on different devices, therefore we may spend lots of efforts to fix them.\n\n## 6.\tDisplay messages and notifications\n\nSince iOS and Android have different notification methods: on Lock Screen, Status Bar, Notification Center and App Icon, we need to check how the messages display when new message come.\n\nWhen app use sensors or location services, we should also notify user about the changes.\n\nIf we consider the cache mechanism in app, the scenarios will be more complex.\n\nAlthough using cache, we can reduce the workload of server to provide responses to mobile app client, but it complex our testing: we need to make sure once the message is changed, even the cached message is still valid, we should show the updated message, rather than the cached one.\n\n## 7.\tFeatures of Operation System\n\nBecause iOS starts to support widget since iOS 8, and Android supports widget for a long time, so when we are testing mobile apps, we need to consider widget as a serious feature, and prioritize it in features list.\n\nAnd for Android apps, we also need to verify when apps are installed and running on both Dalvik and ART runtimes.\n\nFor iOS, if app allow user to configure its settings in System Settings, we need to test this feature as well.\n\n## 8.\tSync on different devices\n\nApps like Facebook and Twitter support both iOS and Android; also support multiple devices, such as iPad, iPhone, Android phones and Android tablets.\n\nSome of them allow user to login the same account on different devices. When this happens, we need to check once the message is delivered on one device, this message should be synced to other devices at same time.\n\n## 9.\tCustomized User Interface\n\nBesides the OS and hardware differences, different devices may also have different user interface installed, such as Samsung’s Touchwiz, HTC Sense, LG UX and Sony Xperia UI.\n\nFor example, Touchwiz has different default font compared to Android native font, which may cause your one line sentence displayed in two lines.\n\nAnd previously on HTC Sense, you will see a menu bar all the time when using an app, this will affect the display of your app.\n\nAlso on HTC Sense 4.x, the multi-tasking screen shows the screenshot of apps, but when you open the app, because the app would refresh, so they may have differences between the screenshot in multi-tasking screen and app current view.\n\n## 10.\tSupport different file formats\n\nSometime we need to display the legal information in mobile apps, usually the legal file are stored as PDF, so it’s hard for app to support this.\n\nOne reason is the PDF is usually designed for web or desktop, when viewing it on mobile devices, it’s hard for user to see, even with zoom in.\n\nAnother reason is Android doesn’t provide native support for PDF files, unlike iOS. So if we want to display PDF files to user, we need to figure out whether we need to add support to PDF, or we just let user to download one PDF viewer app to open the legal files.\n\nIf we need to deal with files in other format, we need to pay more attentions to this.\n\n## 11.\tSupport multiple countries, locales and languages\n\nMany countries have immigrants from global, and there maybe more than one language even in one country, so we can’t decide there is only one language for our app.\n\nI know we can’t test with all countries, locale settings and languages, but we can test the widely used languages and corresponding formats, such as English, Chinese, French, Spanish and etc.\n\nWe need to verify not only the display of them in app, but also the input of them.\n\n## 12.\tHigh memory usage actions\n\nBoth iOS and Android have limitations for the memory size can be consumed by app, so when app need to deal with actions need to consume large memory, such as high density images, voices and videos, we need to perform the actions in another process, to avoid the memory leak or app killed by OS.\n\nSo we can check this by loading bulk of images, voices and videos. \n\n## 13.\tNon-standard controls\n\nOn particular OS version, we may want to support some features, which OS can’t provide.\n\nUsually we will implement it by ourselves or using 3rd party library.\n\nOne example is theme of app: in iOS 4, we need to implement it all by ourselves from scratch; in iOS 5, we can use UIApperance protocol to reduce some work; and in iOS 7, we can easily use tintColor property to achieve it.\n\nIf we are using our self made controls or 3rd party library, we need to pay more attentions when testing, to make sure the behavior the same as other parts.\n\nAnd as in the example above, with the upgrades of OS, the control may be standardized and provided by OS natively. At that time, we need to merge our codes to native codes, to avoid merging it in the future.\n\nTo merge and test the codes are additional efforts compared to implemented it with native codes, so once we need to implement feature by ourselves or using 3rd party library, we need think twice before we actually work on it.\n\n## 14.\tApp upgrade\n\nMost app will upgrade gradually, to bring new feature and experience to users.\n\nOnce user installed app, when upgrade it, they won’t uninstall it first, but overwrite it or install incrementally.\n\nSo we will also test how app behaves after upgrading, especially the user profile stored previously, and other data stored.\n\nWe need be more careful if there is app database schema change in app upgrade.\n\nLikewise, we need to verify app stored data are removed after app uninstallation.\n\n## 15.\tIntegrate with 3rd party app\n\nIf app integrate with 3rd party app, such as Google Map or Facebook login, we need to make sure app can perform correctly when 3rd party app doesn’t work properly.\n\nAnd we also need to monitor the 3rd party app or services.\n\nSometimes we need to consider to test when 3rd party app integrate with our app and want to share information to our app.\n\n## 16.\tReduce dependencies\n\nWe can try our best to reduce the dependencies to 3rd party system/app/service and other web services we need.\n\nThis can help us minimize the complexity of app and reduce the testing efforts.\n\nWe also need to use different methodologies to make sure they work fine, such as API and integration testing and monitoring.\n\n## 17.\tAutomation and Exploratory testing\n\nMany companies and teams are using Agile now, so TDD and API testing are implemented in development.\n\nFor UI automation, we should use Test Pyramid to design our test first, then only automated test scenarios based user journey. \n\nBecause unit test can cover the functionalities in every activity and view, but they can’t help us when we are testing the interactions between activities and views.\n\nLikewise, when we conduct exploratory testing, we should focus on the workflows with data in them, and the ways the activities/views interact with each other.\n\nI suggest you to use simulator or emulator to do automation, and if you are testing Android apps, Genymotion is a good choice for you; and for exploratory testing, we probably can use devices.\n\nFor the automation tools, they are plenty of them: appium, Frank, Calabash, UIAutomation, UiAutomator and so on.\n\n## 18.\tSecurity testing\n\nBoth iOS and Android support app to store their data in local SQLite databases, so we need to make sure the databases are encrypted.\n\nWe can also use tools like iPhone Configuration Utility and Android DDMS to sniffer the web traffic, checking whether there is cleartext in the request and response.\n\nTo test the security of mobile services, we can use the same way when we testing Web applications.\n\n## 19.\tPerformance testing\n\nPerformance testing can be also involved in mobile app testing.\n\nIt includes testing the app in slow network connection, batch load large quantity of data and such scenarios.\n\nWe can also test the performance of mobile services.\n\n## 20.\tOperation System upgrade\n\nDifferent with app upgrade, when operation system is going to upgrade, Apple and Google will let developers know in advanced, so that they can prepare their app to follow the new rules (guides :P).\n\nWhen we testing the existing app, we need also to learn the changes introduced in new OS version, and prepare for them technically and in mind.\n\nWhen the app for new OS is developing, we will cover the tests for both existing app and the new app at same time.\n\n## 21.\tBenefits from Log\n\nIn developing stage, we usually use Crashlytics, HockeyApp and such tool to collect crash issues, which can make the life for both developers and testers much easier.\n\nAnd we can also us iPhone Configuration Utility and Android DDMS to collect general app logs.\n\nWhen releasing app to market, it’s better we can have some ways to collect the crash information, either to ask user to give feedbacks or ask user to allow app to send logs to us when necessary.\n\n## 22.\tContinuous integration and continuous deployment\n\nWe can use continuous integration to help us find the stability issue and build a safe net for us.\n\nAlthough we can’t 100% automate the process of continuous deployment, we can try our best to ease it, such as using TestFlight to distribute iOS apps, while using HockeyApp and other tools to distribute Android apps.\n\nAn alternative way to distribute Android app is using Dropbox: we can install Dropbox on the app package desktop and testing devices, once the app is packaged, we can use script to move it to the Dropbox folder on the packaging desktop; after Dropbox sync the apk file, we can open Dropxbox on testing devices to install the app.\n\n<br>\nI know those practices and sharing won’t solve all the problems and fix all the issues, but hope they can inspire you.\n\nSince mobile apps are evolving, so does the mobile app development and testing. We will have new tools, techniques and methodologies in this trend. I am looking forward to hear your thoughts about mobile testing.\n\nYou can also find my presentation [here](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/22Rules_In_Mobile_App_Testing.pdf).","source":"_posts/Mobile_App_Testing_With_22_Rules_English.md","raw":"title: 22 Rules In Mobile App Testing\ndate: 2016-05-13\ncategories:\n- Test\ntags:\n- Mobile\n- App Testing\n- Rules\ncomments: true\n---\n[Translated from my Chinese article.]\n\nNowadays, with the popularization of mobile devices, mobile apps are widely used everywhere, and lots of companies start business in mobile apps field.\n\nThis trend brings the challenges to use: we need to deliver the mobile apps to market in time with high quality, and continuously improve them.\n\nWe can categorize mobile apps to native apps and hybrid apps. They have many differences compared with Desktop/Web applications, and testers are encountered with more challenges due to the lacks of testing tool and methodology.\n\nWith testing a Telecom mobile portal app for more than 2 years, I have summarized some testing experience and practices for native apps on iOS and Android. And most of them are also useful for testing hybrid apps.\n\n## 1.\tDefine your testing devices and operation systems\n\nAs we all know, the issue of mobile devices’ fragmentation is getting more and more serious, because there are more operation systems with different versions, different hardware of devices, different screen sizes, different resolutions, different pixel densities and etc.\n\nWe can’t cover all the devices and operation systems from ROI (Return of Investment) perspective, so we need to choose the testing devices based on the popularization of them in market.\n\nWe can not only use Google Analytics or Adobe Omniture to tracking user and generate the devices’ usage report to define testing devices and operation systems, but also read the market share of iOS and Android operation system from their official website:\nhttps://developer.apple.com/support/appstore/, http://developer.android.com/about/dashboards/index.html.\n\n## 2.\tSwitch between networks\n\nThe particularity of mobile app is user always use the app on their way, so when we are conducting our testing, we should also focus on the impact of network switch to app. For example we need to cover the scenario of using app on 3G network and then switch to 4G or Wi-Fi or Airplane Mode and so on.\n\nIf the app will authenticated on the mobile network and get a token from it then proceed functionalities forward, we will definitely cover the scenario of switching mobile network to other networks.\n\nWhen we perform testing on network switching scenarios, we need also pay attention to the error message given to user. The error message should be user friendly, and give user instructions to follow to solve the issues.\n\n## 3.\tMulti-tasking\n\nWe usually run multiple apps on our mobile devices, so when we testing mobile apps, we need to consider the app switching.\n\nThis includes the scenarios of switching app to another, or close app at background, then how app acts when user open it again: should it reload the info when user left, or it will start from scratch?\n\n## 4.\tGestures\n\nGestures are supported by iOS and Android operation systems, when app introduces it own gestures to user, they would conflict with the system ones.\n\nSuch as the wipe gesture to go back introduced in iOS 7: for a long time, to get back one screen, you had to tap the upper left corner on screen (named as “<” or“back” button); on iOS 7, we can swipe the screen to the right and go back.\n\nBut before iOS 7 introduced this gesture, many app use this gesture to call out drawer navigation panel in app. At the time when iOS 7 is released, many apps are not ready for this gesture, so when user use this gesture in app, sometimes it will go back, and sometimes it will call out the drawer navigation panel.\n\nSince the user experience for this is so wired, so we should not let this happen from beginning.\n\n## 5.\tUser experience\n\nAs we talk about user experience, we are not only focus on the layout and stuff like that, but also test app’s portrait and landscape display.\n\nAnd we need to check the level of support to accessibility, so that more people can use our app more easily and freely.\n\nWe need also check whether app is following the design guide of iOS and Android official documents. Especially for the apps support both iOS and Android operation systems, it’s better to let each app follow the design guide of corresponding operation system, rather than all apps just follow iOS design guide.\n\nAnd for the apps embedded Webview, if the Webview is not Responsive designed, it will cause display issues on different devices, therefore we may spend lots of efforts to fix them.\n\n## 6.\tDisplay messages and notifications\n\nSince iOS and Android have different notification methods: on Lock Screen, Status Bar, Notification Center and App Icon, we need to check how the messages display when new message come.\n\nWhen app use sensors or location services, we should also notify user about the changes.\n\nIf we consider the cache mechanism in app, the scenarios will be more complex.\n\nAlthough using cache, we can reduce the workload of server to provide responses to mobile app client, but it complex our testing: we need to make sure once the message is changed, even the cached message is still valid, we should show the updated message, rather than the cached one.\n\n## 7.\tFeatures of Operation System\n\nBecause iOS starts to support widget since iOS 8, and Android supports widget for a long time, so when we are testing mobile apps, we need to consider widget as a serious feature, and prioritize it in features list.\n\nAnd for Android apps, we also need to verify when apps are installed and running on both Dalvik and ART runtimes.\n\nFor iOS, if app allow user to configure its settings in System Settings, we need to test this feature as well.\n\n## 8.\tSync on different devices\n\nApps like Facebook and Twitter support both iOS and Android; also support multiple devices, such as iPad, iPhone, Android phones and Android tablets.\n\nSome of them allow user to login the same account on different devices. When this happens, we need to check once the message is delivered on one device, this message should be synced to other devices at same time.\n\n## 9.\tCustomized User Interface\n\nBesides the OS and hardware differences, different devices may also have different user interface installed, such as Samsung’s Touchwiz, HTC Sense, LG UX and Sony Xperia UI.\n\nFor example, Touchwiz has different default font compared to Android native font, which may cause your one line sentence displayed in two lines.\n\nAnd previously on HTC Sense, you will see a menu bar all the time when using an app, this will affect the display of your app.\n\nAlso on HTC Sense 4.x, the multi-tasking screen shows the screenshot of apps, but when you open the app, because the app would refresh, so they may have differences between the screenshot in multi-tasking screen and app current view.\n\n## 10.\tSupport different file formats\n\nSometime we need to display the legal information in mobile apps, usually the legal file are stored as PDF, so it’s hard for app to support this.\n\nOne reason is the PDF is usually designed for web or desktop, when viewing it on mobile devices, it’s hard for user to see, even with zoom in.\n\nAnother reason is Android doesn’t provide native support for PDF files, unlike iOS. So if we want to display PDF files to user, we need to figure out whether we need to add support to PDF, or we just let user to download one PDF viewer app to open the legal files.\n\nIf we need to deal with files in other format, we need to pay more attentions to this.\n\n## 11.\tSupport multiple countries, locales and languages\n\nMany countries have immigrants from global, and there maybe more than one language even in one country, so we can’t decide there is only one language for our app.\n\nI know we can’t test with all countries, locale settings and languages, but we can test the widely used languages and corresponding formats, such as English, Chinese, French, Spanish and etc.\n\nWe need to verify not only the display of them in app, but also the input of them.\n\n## 12.\tHigh memory usage actions\n\nBoth iOS and Android have limitations for the memory size can be consumed by app, so when app need to deal with actions need to consume large memory, such as high density images, voices and videos, we need to perform the actions in another process, to avoid the memory leak or app killed by OS.\n\nSo we can check this by loading bulk of images, voices and videos. \n\n## 13.\tNon-standard controls\n\nOn particular OS version, we may want to support some features, which OS can’t provide.\n\nUsually we will implement it by ourselves or using 3rd party library.\n\nOne example is theme of app: in iOS 4, we need to implement it all by ourselves from scratch; in iOS 5, we can use UIApperance protocol to reduce some work; and in iOS 7, we can easily use tintColor property to achieve it.\n\nIf we are using our self made controls or 3rd party library, we need to pay more attentions when testing, to make sure the behavior the same as other parts.\n\nAnd as in the example above, with the upgrades of OS, the control may be standardized and provided by OS natively. At that time, we need to merge our codes to native codes, to avoid merging it in the future.\n\nTo merge and test the codes are additional efforts compared to implemented it with native codes, so once we need to implement feature by ourselves or using 3rd party library, we need think twice before we actually work on it.\n\n## 14.\tApp upgrade\n\nMost app will upgrade gradually, to bring new feature and experience to users.\n\nOnce user installed app, when upgrade it, they won’t uninstall it first, but overwrite it or install incrementally.\n\nSo we will also test how app behaves after upgrading, especially the user profile stored previously, and other data stored.\n\nWe need be more careful if there is app database schema change in app upgrade.\n\nLikewise, we need to verify app stored data are removed after app uninstallation.\n\n## 15.\tIntegrate with 3rd party app\n\nIf app integrate with 3rd party app, such as Google Map or Facebook login, we need to make sure app can perform correctly when 3rd party app doesn’t work properly.\n\nAnd we also need to monitor the 3rd party app or services.\n\nSometimes we need to consider to test when 3rd party app integrate with our app and want to share information to our app.\n\n## 16.\tReduce dependencies\n\nWe can try our best to reduce the dependencies to 3rd party system/app/service and other web services we need.\n\nThis can help us minimize the complexity of app and reduce the testing efforts.\n\nWe also need to use different methodologies to make sure they work fine, such as API and integration testing and monitoring.\n\n## 17.\tAutomation and Exploratory testing\n\nMany companies and teams are using Agile now, so TDD and API testing are implemented in development.\n\nFor UI automation, we should use Test Pyramid to design our test first, then only automated test scenarios based user journey. \n\nBecause unit test can cover the functionalities in every activity and view, but they can’t help us when we are testing the interactions between activities and views.\n\nLikewise, when we conduct exploratory testing, we should focus on the workflows with data in them, and the ways the activities/views interact with each other.\n\nI suggest you to use simulator or emulator to do automation, and if you are testing Android apps, Genymotion is a good choice for you; and for exploratory testing, we probably can use devices.\n\nFor the automation tools, they are plenty of them: appium, Frank, Calabash, UIAutomation, UiAutomator and so on.\n\n## 18.\tSecurity testing\n\nBoth iOS and Android support app to store their data in local SQLite databases, so we need to make sure the databases are encrypted.\n\nWe can also use tools like iPhone Configuration Utility and Android DDMS to sniffer the web traffic, checking whether there is cleartext in the request and response.\n\nTo test the security of mobile services, we can use the same way when we testing Web applications.\n\n## 19.\tPerformance testing\n\nPerformance testing can be also involved in mobile app testing.\n\nIt includes testing the app in slow network connection, batch load large quantity of data and such scenarios.\n\nWe can also test the performance of mobile services.\n\n## 20.\tOperation System upgrade\n\nDifferent with app upgrade, when operation system is going to upgrade, Apple and Google will let developers know in advanced, so that they can prepare their app to follow the new rules (guides :P).\n\nWhen we testing the existing app, we need also to learn the changes introduced in new OS version, and prepare for them technically and in mind.\n\nWhen the app for new OS is developing, we will cover the tests for both existing app and the new app at same time.\n\n## 21.\tBenefits from Log\n\nIn developing stage, we usually use Crashlytics, HockeyApp and such tool to collect crash issues, which can make the life for both developers and testers much easier.\n\nAnd we can also us iPhone Configuration Utility and Android DDMS to collect general app logs.\n\nWhen releasing app to market, it’s better we can have some ways to collect the crash information, either to ask user to give feedbacks or ask user to allow app to send logs to us when necessary.\n\n## 22.\tContinuous integration and continuous deployment\n\nWe can use continuous integration to help us find the stability issue and build a safe net for us.\n\nAlthough we can’t 100% automate the process of continuous deployment, we can try our best to ease it, such as using TestFlight to distribute iOS apps, while using HockeyApp and other tools to distribute Android apps.\n\nAn alternative way to distribute Android app is using Dropbox: we can install Dropbox on the app package desktop and testing devices, once the app is packaged, we can use script to move it to the Dropbox folder on the packaging desktop; after Dropbox sync the apk file, we can open Dropxbox on testing devices to install the app.\n\n<br>\nI know those practices and sharing won’t solve all the problems and fix all the issues, but hope they can inspire you.\n\nSince mobile apps are evolving, so does the mobile app development and testing. We will have new tools, techniques and methodologies in this trend. I am looking forward to hear your thoughts about mobile testing.\n\nYou can also find my presentation [here](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/22Rules_In_Mobile_App_Testing.pdf).","slug":"Mobile_App_Testing_With_22_Rules_English","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cio5iglta00005d3n0hk7isco","layout":"post","photos":[],"link":"","content":"<p>[Translated from my Chinese article.]</p>\n<p>Nowadays, with the popularization of mobile devices, mobile apps are widely used everywhere, and lots of companies start business in mobile apps field.</p>\n<p>This trend brings the challenges to use: we need to deliver the mobile apps to market in time with high quality, and continuously improve them.</p>\n<p>We can categorize mobile apps to native apps and hybrid apps. They have many differences compared with Desktop/Web applications, and testers are encountered with more challenges due to the lacks of testing tool and methodology.</p>\n<p>With testing a Telecom mobile portal app for more than 2 years, I have summarized some testing experience and practices for native apps on iOS and Android. And most of them are also useful for testing hybrid apps.</p>\n<h2 id=\"1-_Define_your_testing_devices_and_operation_systems\">1.    Define your testing devices and operation systems</h2><p>As we all know, the issue of mobile devices’ fragmentation is getting more and more serious, because there are more operation systems with different versions, different hardware of devices, different screen sizes, different resolutions, different pixel densities and etc.</p>\n<p>We can’t cover all the devices and operation systems from ROI (Return of Investment) perspective, so we need to choose the testing devices based on the popularization of them in market.</p>\n<p>We can not only use Google Analytics or Adobe Omniture to tracking user and generate the devices’ usage report to define testing devices and operation systems, but also read the market share of iOS and Android operation system from their official website:<br><a href=\"https://developer.apple.com/support/appstore/\" target=\"_blank\" rel=\"external\">https://developer.apple.com/support/appstore/</a>, <a href=\"http://developer.android.com/about/dashboards/index.html\" target=\"_blank\" rel=\"external\">http://developer.android.com/about/dashboards/index.html</a>.</p>\n<h2 id=\"2-_Switch_between_networks\">2.    Switch between networks</h2><p>The particularity of mobile app is user always use the app on their way, so when we are conducting our testing, we should also focus on the impact of network switch to app. For example we need to cover the scenario of using app on 3G network and then switch to 4G or Wi-Fi or Airplane Mode and so on.</p>\n<p>If the app will authenticated on the mobile network and get a token from it then proceed functionalities forward, we will definitely cover the scenario of switching mobile network to other networks.</p>\n<p>When we perform testing on network switching scenarios, we need also pay attention to the error message given to user. The error message should be user friendly, and give user instructions to follow to solve the issues.</p>\n<h2 id=\"3-_Multi-tasking\">3.    Multi-tasking</h2><p>We usually run multiple apps on our mobile devices, so when we testing mobile apps, we need to consider the app switching.</p>\n<p>This includes the scenarios of switching app to another, or close app at background, then how app acts when user open it again: should it reload the info when user left, or it will start from scratch?</p>\n<h2 id=\"4-_Gestures\">4.    Gestures</h2><p>Gestures are supported by iOS and Android operation systems, when app introduces it own gestures to user, they would conflict with the system ones.</p>\n<p>Such as the wipe gesture to go back introduced in iOS 7: for a long time, to get back one screen, you had to tap the upper left corner on screen (named as “&lt;” or“back” button); on iOS 7, we can swipe the screen to the right and go back.</p>\n<p>But before iOS 7 introduced this gesture, many app use this gesture to call out drawer navigation panel in app. At the time when iOS 7 is released, many apps are not ready for this gesture, so when user use this gesture in app, sometimes it will go back, and sometimes it will call out the drawer navigation panel.</p>\n<p>Since the user experience for this is so wired, so we should not let this happen from beginning.</p>\n<h2 id=\"5-_User_experience\">5.    User experience</h2><p>As we talk about user experience, we are not only focus on the layout and stuff like that, but also test app’s portrait and landscape display.</p>\n<p>And we need to check the level of support to accessibility, so that more people can use our app more easily and freely.</p>\n<p>We need also check whether app is following the design guide of iOS and Android official documents. Especially for the apps support both iOS and Android operation systems, it’s better to let each app follow the design guide of corresponding operation system, rather than all apps just follow iOS design guide.</p>\n<p>And for the apps embedded Webview, if the Webview is not Responsive designed, it will cause display issues on different devices, therefore we may spend lots of efforts to fix them.</p>\n<h2 id=\"6-_Display_messages_and_notifications\">6.    Display messages and notifications</h2><p>Since iOS and Android have different notification methods: on Lock Screen, Status Bar, Notification Center and App Icon, we need to check how the messages display when new message come.</p>\n<p>When app use sensors or location services, we should also notify user about the changes.</p>\n<p>If we consider the cache mechanism in app, the scenarios will be more complex.</p>\n<p>Although using cache, we can reduce the workload of server to provide responses to mobile app client, but it complex our testing: we need to make sure once the message is changed, even the cached message is still valid, we should show the updated message, rather than the cached one.</p>\n<h2 id=\"7-_Features_of_Operation_System\">7.    Features of Operation System</h2><p>Because iOS starts to support widget since iOS 8, and Android supports widget for a long time, so when we are testing mobile apps, we need to consider widget as a serious feature, and prioritize it in features list.</p>\n<p>And for Android apps, we also need to verify when apps are installed and running on both Dalvik and ART runtimes.</p>\n<p>For iOS, if app allow user to configure its settings in System Settings, we need to test this feature as well.</p>\n<h2 id=\"8-_Sync_on_different_devices\">8.    Sync on different devices</h2><p>Apps like Facebook and Twitter support both iOS and Android; also support multiple devices, such as iPad, iPhone, Android phones and Android tablets.</p>\n<p>Some of them allow user to login the same account on different devices. When this happens, we need to check once the message is delivered on one device, this message should be synced to other devices at same time.</p>\n<h2 id=\"9-_Customized_User_Interface\">9.    Customized User Interface</h2><p>Besides the OS and hardware differences, different devices may also have different user interface installed, such as Samsung’s Touchwiz, HTC Sense, LG UX and Sony Xperia UI.</p>\n<p>For example, Touchwiz has different default font compared to Android native font, which may cause your one line sentence displayed in two lines.</p>\n<p>And previously on HTC Sense, you will see a menu bar all the time when using an app, this will affect the display of your app.</p>\n<p>Also on HTC Sense 4.x, the multi-tasking screen shows the screenshot of apps, but when you open the app, because the app would refresh, so they may have differences between the screenshot in multi-tasking screen and app current view.</p>\n<h2 id=\"10-_Support_different_file_formats\">10.    Support different file formats</h2><p>Sometime we need to display the legal information in mobile apps, usually the legal file are stored as PDF, so it’s hard for app to support this.</p>\n<p>One reason is the PDF is usually designed for web or desktop, when viewing it on mobile devices, it’s hard for user to see, even with zoom in.</p>\n<p>Another reason is Android doesn’t provide native support for PDF files, unlike iOS. So if we want to display PDF files to user, we need to figure out whether we need to add support to PDF, or we just let user to download one PDF viewer app to open the legal files.</p>\n<p>If we need to deal with files in other format, we need to pay more attentions to this.</p>\n<h2 id=\"11-_Support_multiple_countries,_locales_and_languages\">11.    Support multiple countries, locales and languages</h2><p>Many countries have immigrants from global, and there maybe more than one language even in one country, so we can’t decide there is only one language for our app.</p>\n<p>I know we can’t test with all countries, locale settings and languages, but we can test the widely used languages and corresponding formats, such as English, Chinese, French, Spanish and etc.</p>\n<p>We need to verify not only the display of them in app, but also the input of them.</p>\n<h2 id=\"12-_High_memory_usage_actions\">12.    High memory usage actions</h2><p>Both iOS and Android have limitations for the memory size can be consumed by app, so when app need to deal with actions need to consume large memory, such as high density images, voices and videos, we need to perform the actions in another process, to avoid the memory leak or app killed by OS.</p>\n<p>So we can check this by loading bulk of images, voices and videos. </p>\n<h2 id=\"13-_Non-standard_controls\">13.    Non-standard controls</h2><p>On particular OS version, we may want to support some features, which OS can’t provide.</p>\n<p>Usually we will implement it by ourselves or using 3rd party library.</p>\n<p>One example is theme of app: in iOS 4, we need to implement it all by ourselves from scratch; in iOS 5, we can use UIApperance protocol to reduce some work; and in iOS 7, we can easily use tintColor property to achieve it.</p>\n<p>If we are using our self made controls or 3rd party library, we need to pay more attentions when testing, to make sure the behavior the same as other parts.</p>\n<p>And as in the example above, with the upgrades of OS, the control may be standardized and provided by OS natively. At that time, we need to merge our codes to native codes, to avoid merging it in the future.</p>\n<p>To merge and test the codes are additional efforts compared to implemented it with native codes, so once we need to implement feature by ourselves or using 3rd party library, we need think twice before we actually work on it.</p>\n<h2 id=\"14-_App_upgrade\">14.    App upgrade</h2><p>Most app will upgrade gradually, to bring new feature and experience to users.</p>\n<p>Once user installed app, when upgrade it, they won’t uninstall it first, but overwrite it or install incrementally.</p>\n<p>So we will also test how app behaves after upgrading, especially the user profile stored previously, and other data stored.</p>\n<p>We need be more careful if there is app database schema change in app upgrade.</p>\n<p>Likewise, we need to verify app stored data are removed after app uninstallation.</p>\n<h2 id=\"15-_Integrate_with_3rd_party_app\">15.    Integrate with 3rd party app</h2><p>If app integrate with 3rd party app, such as Google Map or Facebook login, we need to make sure app can perform correctly when 3rd party app doesn’t work properly.</p>\n<p>And we also need to monitor the 3rd party app or services.</p>\n<p>Sometimes we need to consider to test when 3rd party app integrate with our app and want to share information to our app.</p>\n<h2 id=\"16-_Reduce_dependencies\">16.    Reduce dependencies</h2><p>We can try our best to reduce the dependencies to 3rd party system/app/service and other web services we need.</p>\n<p>This can help us minimize the complexity of app and reduce the testing efforts.</p>\n<p>We also need to use different methodologies to make sure they work fine, such as API and integration testing and monitoring.</p>\n<h2 id=\"17-_Automation_and_Exploratory_testing\">17.    Automation and Exploratory testing</h2><p>Many companies and teams are using Agile now, so TDD and API testing are implemented in development.</p>\n<p>For UI automation, we should use Test Pyramid to design our test first, then only automated test scenarios based user journey. </p>\n<p>Because unit test can cover the functionalities in every activity and view, but they can’t help us when we are testing the interactions between activities and views.</p>\n<p>Likewise, when we conduct exploratory testing, we should focus on the workflows with data in them, and the ways the activities/views interact with each other.</p>\n<p>I suggest you to use simulator or emulator to do automation, and if you are testing Android apps, Genymotion is a good choice for you; and for exploratory testing, we probably can use devices.</p>\n<p>For the automation tools, they are plenty of them: appium, Frank, Calabash, UIAutomation, UiAutomator and so on.</p>\n<h2 id=\"18-_Security_testing\">18.    Security testing</h2><p>Both iOS and Android support app to store their data in local SQLite databases, so we need to make sure the databases are encrypted.</p>\n<p>We can also use tools like iPhone Configuration Utility and Android DDMS to sniffer the web traffic, checking whether there is cleartext in the request and response.</p>\n<p>To test the security of mobile services, we can use the same way when we testing Web applications.</p>\n<h2 id=\"19-_Performance_testing\">19.    Performance testing</h2><p>Performance testing can be also involved in mobile app testing.</p>\n<p>It includes testing the app in slow network connection, batch load large quantity of data and such scenarios.</p>\n<p>We can also test the performance of mobile services.</p>\n<h2 id=\"20-_Operation_System_upgrade\">20.    Operation System upgrade</h2><p>Different with app upgrade, when operation system is going to upgrade, Apple and Google will let developers know in advanced, so that they can prepare their app to follow the new rules (guides :P).</p>\n<p>When we testing the existing app, we need also to learn the changes introduced in new OS version, and prepare for them technically and in mind.</p>\n<p>When the app for new OS is developing, we will cover the tests for both existing app and the new app at same time.</p>\n<h2 id=\"21-_Benefits_from_Log\">21.    Benefits from Log</h2><p>In developing stage, we usually use Crashlytics, HockeyApp and such tool to collect crash issues, which can make the life for both developers and testers much easier.</p>\n<p>And we can also us iPhone Configuration Utility and Android DDMS to collect general app logs.</p>\n<p>When releasing app to market, it’s better we can have some ways to collect the crash information, either to ask user to give feedbacks or ask user to allow app to send logs to us when necessary.</p>\n<h2 id=\"22-_Continuous_integration_and_continuous_deployment\">22.    Continuous integration and continuous deployment</h2><p>We can use continuous integration to help us find the stability issue and build a safe net for us.</p>\n<p>Although we can’t 100% automate the process of continuous deployment, we can try our best to ease it, such as using TestFlight to distribute iOS apps, while using HockeyApp and other tools to distribute Android apps.</p>\n<p>An alternative way to distribute Android app is using Dropbox: we can install Dropbox on the app package desktop and testing devices, once the app is packaged, we can use script to move it to the Dropbox folder on the packaging desktop; after Dropbox sync the apk file, we can open Dropxbox on testing devices to install the app.</p>\n<p><br><br>I know those practices and sharing won’t solve all the problems and fix all the issues, but hope they can inspire you.</p>\n<p>Since mobile apps are evolving, so does the mobile app development and testing. We will have new tools, techniques and methodologies in this trend. I am looking forward to hear your thoughts about mobile testing.</p>\n<p>You can also find my presentation <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/22Rules_In_Mobile_App_Testing.pdf\" target=\"_blank\" rel=\"external\">here</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>[Translated from my Chinese article.]</p>\n<p>Nowadays, with the popularization of mobile devices, mobile apps are widely used everywhere, and lots of companies start business in mobile apps field.</p>\n<p>This trend brings the challenges to use: we need to deliver the mobile apps to market in time with high quality, and continuously improve them.</p>\n<p>We can categorize mobile apps to native apps and hybrid apps. They have many differences compared with Desktop/Web applications, and testers are encountered with more challenges due to the lacks of testing tool and methodology.</p>\n<p>With testing a Telecom mobile portal app for more than 2 years, I have summarized some testing experience and practices for native apps on iOS and Android. And most of them are also useful for testing hybrid apps.</p>\n<h2 id=\"1-_Define_your_testing_devices_and_operation_systems\">1.    Define your testing devices and operation systems</h2><p>As we all know, the issue of mobile devices’ fragmentation is getting more and more serious, because there are more operation systems with different versions, different hardware of devices, different screen sizes, different resolutions, different pixel densities and etc.</p>\n<p>We can’t cover all the devices and operation systems from ROI (Return of Investment) perspective, so we need to choose the testing devices based on the popularization of them in market.</p>\n<p>We can not only use Google Analytics or Adobe Omniture to tracking user and generate the devices’ usage report to define testing devices and operation systems, but also read the market share of iOS and Android operation system from their official website:<br><a href=\"https://developer.apple.com/support/appstore/\" target=\"_blank\" rel=\"external\">https://developer.apple.com/support/appstore/</a>, <a href=\"http://developer.android.com/about/dashboards/index.html\" target=\"_blank\" rel=\"external\">http://developer.android.com/about/dashboards/index.html</a>.</p>\n<h2 id=\"2-_Switch_between_networks\">2.    Switch between networks</h2><p>The particularity of mobile app is user always use the app on their way, so when we are conducting our testing, we should also focus on the impact of network switch to app. For example we need to cover the scenario of using app on 3G network and then switch to 4G or Wi-Fi or Airplane Mode and so on.</p>\n<p>If the app will authenticated on the mobile network and get a token from it then proceed functionalities forward, we will definitely cover the scenario of switching mobile network to other networks.</p>\n<p>When we perform testing on network switching scenarios, we need also pay attention to the error message given to user. The error message should be user friendly, and give user instructions to follow to solve the issues.</p>\n<h2 id=\"3-_Multi-tasking\">3.    Multi-tasking</h2><p>We usually run multiple apps on our mobile devices, so when we testing mobile apps, we need to consider the app switching.</p>\n<p>This includes the scenarios of switching app to another, or close app at background, then how app acts when user open it again: should it reload the info when user left, or it will start from scratch?</p>\n<h2 id=\"4-_Gestures\">4.    Gestures</h2><p>Gestures are supported by iOS and Android operation systems, when app introduces it own gestures to user, they would conflict with the system ones.</p>\n<p>Such as the wipe gesture to go back introduced in iOS 7: for a long time, to get back one screen, you had to tap the upper left corner on screen (named as “&lt;” or“back” button); on iOS 7, we can swipe the screen to the right and go back.</p>\n<p>But before iOS 7 introduced this gesture, many app use this gesture to call out drawer navigation panel in app. At the time when iOS 7 is released, many apps are not ready for this gesture, so when user use this gesture in app, sometimes it will go back, and sometimes it will call out the drawer navigation panel.</p>\n<p>Since the user experience for this is so wired, so we should not let this happen from beginning.</p>\n<h2 id=\"5-_User_experience\">5.    User experience</h2><p>As we talk about user experience, we are not only focus on the layout and stuff like that, but also test app’s portrait and landscape display.</p>\n<p>And we need to check the level of support to accessibility, so that more people can use our app more easily and freely.</p>\n<p>We need also check whether app is following the design guide of iOS and Android official documents. Especially for the apps support both iOS and Android operation systems, it’s better to let each app follow the design guide of corresponding operation system, rather than all apps just follow iOS design guide.</p>\n<p>And for the apps embedded Webview, if the Webview is not Responsive designed, it will cause display issues on different devices, therefore we may spend lots of efforts to fix them.</p>\n<h2 id=\"6-_Display_messages_and_notifications\">6.    Display messages and notifications</h2><p>Since iOS and Android have different notification methods: on Lock Screen, Status Bar, Notification Center and App Icon, we need to check how the messages display when new message come.</p>\n<p>When app use sensors or location services, we should also notify user about the changes.</p>\n<p>If we consider the cache mechanism in app, the scenarios will be more complex.</p>\n<p>Although using cache, we can reduce the workload of server to provide responses to mobile app client, but it complex our testing: we need to make sure once the message is changed, even the cached message is still valid, we should show the updated message, rather than the cached one.</p>\n<h2 id=\"7-_Features_of_Operation_System\">7.    Features of Operation System</h2><p>Because iOS starts to support widget since iOS 8, and Android supports widget for a long time, so when we are testing mobile apps, we need to consider widget as a serious feature, and prioritize it in features list.</p>\n<p>And for Android apps, we also need to verify when apps are installed and running on both Dalvik and ART runtimes.</p>\n<p>For iOS, if app allow user to configure its settings in System Settings, we need to test this feature as well.</p>\n<h2 id=\"8-_Sync_on_different_devices\">8.    Sync on different devices</h2><p>Apps like Facebook and Twitter support both iOS and Android; also support multiple devices, such as iPad, iPhone, Android phones and Android tablets.</p>\n<p>Some of them allow user to login the same account on different devices. When this happens, we need to check once the message is delivered on one device, this message should be synced to other devices at same time.</p>\n<h2 id=\"9-_Customized_User_Interface\">9.    Customized User Interface</h2><p>Besides the OS and hardware differences, different devices may also have different user interface installed, such as Samsung’s Touchwiz, HTC Sense, LG UX and Sony Xperia UI.</p>\n<p>For example, Touchwiz has different default font compared to Android native font, which may cause your one line sentence displayed in two lines.</p>\n<p>And previously on HTC Sense, you will see a menu bar all the time when using an app, this will affect the display of your app.</p>\n<p>Also on HTC Sense 4.x, the multi-tasking screen shows the screenshot of apps, but when you open the app, because the app would refresh, so they may have differences between the screenshot in multi-tasking screen and app current view.</p>\n<h2 id=\"10-_Support_different_file_formats\">10.    Support different file formats</h2><p>Sometime we need to display the legal information in mobile apps, usually the legal file are stored as PDF, so it’s hard for app to support this.</p>\n<p>One reason is the PDF is usually designed for web or desktop, when viewing it on mobile devices, it’s hard for user to see, even with zoom in.</p>\n<p>Another reason is Android doesn’t provide native support for PDF files, unlike iOS. So if we want to display PDF files to user, we need to figure out whether we need to add support to PDF, or we just let user to download one PDF viewer app to open the legal files.</p>\n<p>If we need to deal with files in other format, we need to pay more attentions to this.</p>\n<h2 id=\"11-_Support_multiple_countries,_locales_and_languages\">11.    Support multiple countries, locales and languages</h2><p>Many countries have immigrants from global, and there maybe more than one language even in one country, so we can’t decide there is only one language for our app.</p>\n<p>I know we can’t test with all countries, locale settings and languages, but we can test the widely used languages and corresponding formats, such as English, Chinese, French, Spanish and etc.</p>\n<p>We need to verify not only the display of them in app, but also the input of them.</p>\n<h2 id=\"12-_High_memory_usage_actions\">12.    High memory usage actions</h2><p>Both iOS and Android have limitations for the memory size can be consumed by app, so when app need to deal with actions need to consume large memory, such as high density images, voices and videos, we need to perform the actions in another process, to avoid the memory leak or app killed by OS.</p>\n<p>So we can check this by loading bulk of images, voices and videos. </p>\n<h2 id=\"13-_Non-standard_controls\">13.    Non-standard controls</h2><p>On particular OS version, we may want to support some features, which OS can’t provide.</p>\n<p>Usually we will implement it by ourselves or using 3rd party library.</p>\n<p>One example is theme of app: in iOS 4, we need to implement it all by ourselves from scratch; in iOS 5, we can use UIApperance protocol to reduce some work; and in iOS 7, we can easily use tintColor property to achieve it.</p>\n<p>If we are using our self made controls or 3rd party library, we need to pay more attentions when testing, to make sure the behavior the same as other parts.</p>\n<p>And as in the example above, with the upgrades of OS, the control may be standardized and provided by OS natively. At that time, we need to merge our codes to native codes, to avoid merging it in the future.</p>\n<p>To merge and test the codes are additional efforts compared to implemented it with native codes, so once we need to implement feature by ourselves or using 3rd party library, we need think twice before we actually work on it.</p>\n<h2 id=\"14-_App_upgrade\">14.    App upgrade</h2><p>Most app will upgrade gradually, to bring new feature and experience to users.</p>\n<p>Once user installed app, when upgrade it, they won’t uninstall it first, but overwrite it or install incrementally.</p>\n<p>So we will also test how app behaves after upgrading, especially the user profile stored previously, and other data stored.</p>\n<p>We need be more careful if there is app database schema change in app upgrade.</p>\n<p>Likewise, we need to verify app stored data are removed after app uninstallation.</p>\n<h2 id=\"15-_Integrate_with_3rd_party_app\">15.    Integrate with 3rd party app</h2><p>If app integrate with 3rd party app, such as Google Map or Facebook login, we need to make sure app can perform correctly when 3rd party app doesn’t work properly.</p>\n<p>And we also need to monitor the 3rd party app or services.</p>\n<p>Sometimes we need to consider to test when 3rd party app integrate with our app and want to share information to our app.</p>\n<h2 id=\"16-_Reduce_dependencies\">16.    Reduce dependencies</h2><p>We can try our best to reduce the dependencies to 3rd party system/app/service and other web services we need.</p>\n<p>This can help us minimize the complexity of app and reduce the testing efforts.</p>\n<p>We also need to use different methodologies to make sure they work fine, such as API and integration testing and monitoring.</p>\n<h2 id=\"17-_Automation_and_Exploratory_testing\">17.    Automation and Exploratory testing</h2><p>Many companies and teams are using Agile now, so TDD and API testing are implemented in development.</p>\n<p>For UI automation, we should use Test Pyramid to design our test first, then only automated test scenarios based user journey. </p>\n<p>Because unit test can cover the functionalities in every activity and view, but they can’t help us when we are testing the interactions between activities and views.</p>\n<p>Likewise, when we conduct exploratory testing, we should focus on the workflows with data in them, and the ways the activities/views interact with each other.</p>\n<p>I suggest you to use simulator or emulator to do automation, and if you are testing Android apps, Genymotion is a good choice for you; and for exploratory testing, we probably can use devices.</p>\n<p>For the automation tools, they are plenty of them: appium, Frank, Calabash, UIAutomation, UiAutomator and so on.</p>\n<h2 id=\"18-_Security_testing\">18.    Security testing</h2><p>Both iOS and Android support app to store their data in local SQLite databases, so we need to make sure the databases are encrypted.</p>\n<p>We can also use tools like iPhone Configuration Utility and Android DDMS to sniffer the web traffic, checking whether there is cleartext in the request and response.</p>\n<p>To test the security of mobile services, we can use the same way when we testing Web applications.</p>\n<h2 id=\"19-_Performance_testing\">19.    Performance testing</h2><p>Performance testing can be also involved in mobile app testing.</p>\n<p>It includes testing the app in slow network connection, batch load large quantity of data and such scenarios.</p>\n<p>We can also test the performance of mobile services.</p>\n<h2 id=\"20-_Operation_System_upgrade\">20.    Operation System upgrade</h2><p>Different with app upgrade, when operation system is going to upgrade, Apple and Google will let developers know in advanced, so that they can prepare their app to follow the new rules (guides :P).</p>\n<p>When we testing the existing app, we need also to learn the changes introduced in new OS version, and prepare for them technically and in mind.</p>\n<p>When the app for new OS is developing, we will cover the tests for both existing app and the new app at same time.</p>\n<h2 id=\"21-_Benefits_from_Log\">21.    Benefits from Log</h2><p>In developing stage, we usually use Crashlytics, HockeyApp and such tool to collect crash issues, which can make the life for both developers and testers much easier.</p>\n<p>And we can also us iPhone Configuration Utility and Android DDMS to collect general app logs.</p>\n<p>When releasing app to market, it’s better we can have some ways to collect the crash information, either to ask user to give feedbacks or ask user to allow app to send logs to us when necessary.</p>\n<h2 id=\"22-_Continuous_integration_and_continuous_deployment\">22.    Continuous integration and continuous deployment</h2><p>We can use continuous integration to help us find the stability issue and build a safe net for us.</p>\n<p>Although we can’t 100% automate the process of continuous deployment, we can try our best to ease it, such as using TestFlight to distribute iOS apps, while using HockeyApp and other tools to distribute Android apps.</p>\n<p>An alternative way to distribute Android app is using Dropbox: we can install Dropbox on the app package desktop and testing devices, once the app is packaged, we can use script to move it to the Dropbox folder on the packaging desktop; after Dropbox sync the apk file, we can open Dropxbox on testing devices to install the app.</p>\n<p><br><br>I know those practices and sharing won’t solve all the problems and fix all the issues, but hope they can inspire you.</p>\n<p>Since mobile apps are evolving, so does the mobile app development and testing. We will have new tools, techniques and methodologies in this trend. I am looking forward to hear your thoughts about mobile testing.</p>\n<p>You can also find my presentation <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/22Rules_In_Mobile_App_Testing.pdf\" target=\"_blank\" rel=\"external\">here</a>.</p>\n"},{"title":"移动 app 云测试平台的对比与分析","date":"2016-05-17T14:00:00.000Z","comments":1,"_content":"\n我们都知道在测试移动app时最耗时的是在各种测试设备进行测试， 因为不论是安卓还是iOS都已经碎片化了。而云测试看似是解决这一问题的有效途径。因此选择哪种云测试平台来协助测试人员进行各种测试就成为首要问题。\n\n###我们先来看看云测试平台通常都提供哪些功能和服务。\n\n主流的云测试平台都支持对原生native，混合hybrid和Web app的测试，这些测试包括：\n\n1. 兼容测试\n\n\t通过在多种测试设备上安装／卸载和运行被测app，遍历app的每个界面，主要检查app是否会报错或者崩溃。有些云测试平台还会对每个页面进行截图并进行对比。\n\n2. 脚本测试\n\n\t通过运行云测试平台工具进行录制的或者使用自动化测试框架编写的自动化脚本，实现模拟用户操作的目的，并且减少手动测试时间。\n\n3. 性能监控和分析\n\n\t利用Android SDK提供的借口，云测试平台可以检测移动app的耗电量，CPU等资源占用率，使用的流量等信息。有些云测试平台还提供自己的SDK，整合在app中可以提供更为准确的性能指标和信息，包括线上app的性能信息以及崩溃信息等。\n\n4. 手动测试和人工测试\n\n\t云测试平台的手动测试是指租用云测试平台的特定设备，测试人员手动登录设备进行测试。而人工测试则是将测试需求告知云测试平台的专业测试人员，雇佣他们临时作为自己的测试人员进行测试。\n\n5. 持续集成\n\n\t不少提供脚本测试的云测试平台都同时提供对持续集成（Continuous Integration）环境的支持。\n\n**此外不少国内云测试平台还提供以下功能：**\n\n- 安全测试\n- 内测托管分发\n- 众包测试\n\n###我们再来看看各种云测试平台对于上述功能和服务的支持情况。\n\n由于国内外的云测试平台使用环境等因素的不同，我们分别对国内外主流的几个云测试平台进行对比。\n\n####国外主流的云测试平台：\n\n- Xamarin Test Cloud (https://xamarin.com/test-cloud/)\n- TestDroid (http://testdroid.com/)\n- Sauce Labs (https://saucelabs.com/mobile/)\n- Google Cloud Test Cloud (https://developers.google.com/cloud-test-lab/)\n- AWS Device Farm (https://aws.amazon.com/device-farm/)\n\n![图1 － 国外主流的云测试平台对比](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Mobile_Cloud_Testing_Forgien.png)\n\n从上图我们可以看到一些特点：\n\n1. 在测试设备的数量上，Xamarin Test Cloud和Sauce Labs都是非常有优势的，虽然Xamarin Test Cloud统计的是测试设备的数量，而Sauce Labs是平台的数量；\n\n2. 亚马逊自己的FireOS只被自己的云测试平台支持，在国内我们也能看到类似的例子；\n\n3. 所有的云测试平台都支持app测试，但是只有TestDroid支持游戏测试；\n\n4. 对于国内云测试平台提供的人工测试，安全测试，内测分发和众包测试，国外这些云测试平台都是不支持的，需要结合别的工具和框架进行使用。不过对于手动测试，Sauce Labs和Perfecto这两个云测试平台支持租用测试设备进行手动测试；\n\n5. 对于云测试基础功能的兼容测试，以及脚本测试，崩溃分析和持续集成，这些云测试平台都是支持的；\n\n6. 只有Xamarin Test Cloud，TestDroid和AWS Device Farm支持性能监控；\n\n7. 对于脚本测试所使用的移动app自动化测试框架，每个平台都不甚相同：\n\n\t- Xamarin Test Cloud支持Calabash（iOS和Android）和自己的Xamarin.UITest;\n\n\t- TestDroid支持很多框架，包括支持iOS的Calabash，appium，UI Automation和 Jasmine，以及支持Android的Calabash，appium，Espresso，Robotium和uiautomator；\n\t- Sauce Labs支持自己的开源框架appium；\n\t- Google Cloud Test Lab则支持Espresso，Robotium和Robo test；\n\t- AWS Device Farm也支持很多框架，包括支持iOS的Calabash，appium，UIAutomation和XCTest，以及支持Android的Calabash，appium，JUnit，Espresso，Robotium和uiautomator。\n\n8. Xamarin Test Cloud，TestDroid和Sauce Labs都有自己的移动app测试脚本录制工具，分别是：Xamarin Test Recorder，TestDroid Recorder和appium inspector。\n\n**综合来看，对于国外的云测试平台，如果侧重的是测试设备的覆盖程度，选择Xamarin Test Cloud和Sauce Labs会更合适；如果需要测试FireOS设备，那就选择AWS Device Farm；如果侧重的是脚本测试中支持的语言和框架，那就可以选择TestDroid和AWS Device Farm；如果是进行游戏测试，只能选择TestDroid；如果要远程连接测试设备进行手动测试，那就需要选择Sauce Labs和Perfecto；如果在测试过程中需要同步监测性能，就不能选择Sauce Labs和Google Cloud Test Lab。**\n\n####国内主流的云测试平台：\n\n- Testin云测 (http://www.testin.cn/)\n- 百度MTC (http://mtc.baidu.com/)\n- 腾讯优测 (http://utest.qq.com/)\n- 阿里MQC (http://mqc.aliyun.com/)\n\n![图2 － 国内主流的云测试平台对比](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Mobile_Cloud_Testing_Domestic.png)\n\n从上图我们也可以看到一些特点：\n\n1. Testin云测支持的测试设备数量最多，达到了600部Android和70部iOS终端的数量；但是和Xamarin Test Cloud以及Sauce Labs支持的设备数量还是有不少差距的；\n\n2. 和亚马逊类似，阿里的YunOS也只有阿里MQC才能支持；\n\n3. 和国外的云测试平台很类似，这四个国内云测试平台也都支持app的云测试，而不支持游戏测试；只有Testin云测支持游戏测试；\n\n4. 对于云测试基础功能的兼容测试，国内主流云测试平台都是支持的；\n\n5. 这四个国内云测试平台也都支持崩溃分析，不过对于性能监控，却只有百度MTC支持，而且百度MTC的深度性能测试中还可以做竞品app的性能对比；\n\n6. Testin云测和百度MTC不支持手动测试；\n\n7. 只有阿里MQC不支持人工测试；\n\n8. 只有Testin云测不支持安全测试；对于支持安全测试的云测试平台，也没有公布是如何进行安全测试的；\n\n9. Testin云测支持内测分发和众包测试，阿里MQC支持众包测试，其它两个云测试平台对于内测分发和众包测试都不支持；\n\n10. 对于脚本测试，只有腾讯优测不支持；而对于测试工具和框架，各个平台的支持也不相同：\n\n\t- Testin云测支持Robotium，JUnit，淘宝的Athrun和Testin SDK，其中只有Testin SDK支持iOS和Android，其他框架都只支持Android；\n\n\t- 百度MTC只支持通过自己的测试脚本录制工具录制的脚本；\n\n\t- 阿里MQC支持Robotium和增强后的appium，其中appium可以支持iOS和Android；\n\n11. Testin云测，百度MTC和阿里MQC都提供了自己的测试脚本录制工具，分别是itestin录制回放工具，百度MTC录制回放工具和易测；\n\n12. 国内云测试平台都没有提及持续集成，不过从笔者的了解看来，Testin云测和阿里MQC应该是都支持的。\n\n**对于国内云测试平台，如果需要覆盖更多的测试设备或者需要测试游戏亦或需要内测分发，只能选择Testin云测；如果需要测试YunOS设备，那就需要选择阿里MQC；如果需要进行性能监控和竞品对比，那就选择百度MTC；如果要远程连接测试设备进行手动测试，那就需要选择腾讯优测和阿里MQC；如果需要雇佣云测试平台的专业测试人员，就不能选择阿里MQC；如果需要进行安全测试，就不能选择Testin云测；如果需要进行众包测试，那就选择Testin云测和阿里MQC；如果要进行脚本测试，就不能选择腾讯优测，对于百度MTC也不推荐。**\n\n相信通过对比这些云测试平台提供的功能和服务，以及它们各自的特点，读者在选用云测试平台时有了更多的依据。希望大家在使用这些信息作为依据时，综合考虑这些云测试平台的特点，同时可以使用它们提供的免费试用进行尝试，以便验证是否真的适合自己的app。\n\n***P.S.以上云测试平台提供的功能及服务，截止于2016年3月20日。***","source":"_posts/Mobile_Cloud_Testing_Comparison.md","raw":"title: 移动 app 云测试平台的对比与分析\ndate: 2016-05-18\ncategories:\n- Testing\ntags:\n- Mobile\n- Cloud Testing\n- Comparison\n- Analysis\ncomments: true\n---\n\n我们都知道在测试移动app时最耗时的是在各种测试设备进行测试， 因为不论是安卓还是iOS都已经碎片化了。而云测试看似是解决这一问题的有效途径。因此选择哪种云测试平台来协助测试人员进行各种测试就成为首要问题。\n\n###我们先来看看云测试平台通常都提供哪些功能和服务。\n\n主流的云测试平台都支持对原生native，混合hybrid和Web app的测试，这些测试包括：\n\n1. 兼容测试\n\n\t通过在多种测试设备上安装／卸载和运行被测app，遍历app的每个界面，主要检查app是否会报错或者崩溃。有些云测试平台还会对每个页面进行截图并进行对比。\n\n2. 脚本测试\n\n\t通过运行云测试平台工具进行录制的或者使用自动化测试框架编写的自动化脚本，实现模拟用户操作的目的，并且减少手动测试时间。\n\n3. 性能监控和分析\n\n\t利用Android SDK提供的借口，云测试平台可以检测移动app的耗电量，CPU等资源占用率，使用的流量等信息。有些云测试平台还提供自己的SDK，整合在app中可以提供更为准确的性能指标和信息，包括线上app的性能信息以及崩溃信息等。\n\n4. 手动测试和人工测试\n\n\t云测试平台的手动测试是指租用云测试平台的特定设备，测试人员手动登录设备进行测试。而人工测试则是将测试需求告知云测试平台的专业测试人员，雇佣他们临时作为自己的测试人员进行测试。\n\n5. 持续集成\n\n\t不少提供脚本测试的云测试平台都同时提供对持续集成（Continuous Integration）环境的支持。\n\n**此外不少国内云测试平台还提供以下功能：**\n\n- 安全测试\n- 内测托管分发\n- 众包测试\n\n###我们再来看看各种云测试平台对于上述功能和服务的支持情况。\n\n由于国内外的云测试平台使用环境等因素的不同，我们分别对国内外主流的几个云测试平台进行对比。\n\n####国外主流的云测试平台：\n\n- Xamarin Test Cloud (https://xamarin.com/test-cloud/)\n- TestDroid (http://testdroid.com/)\n- Sauce Labs (https://saucelabs.com/mobile/)\n- Google Cloud Test Cloud (https://developers.google.com/cloud-test-lab/)\n- AWS Device Farm (https://aws.amazon.com/device-farm/)\n\n![图1 － 国外主流的云测试平台对比](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Mobile_Cloud_Testing_Forgien.png)\n\n从上图我们可以看到一些特点：\n\n1. 在测试设备的数量上，Xamarin Test Cloud和Sauce Labs都是非常有优势的，虽然Xamarin Test Cloud统计的是测试设备的数量，而Sauce Labs是平台的数量；\n\n2. 亚马逊自己的FireOS只被自己的云测试平台支持，在国内我们也能看到类似的例子；\n\n3. 所有的云测试平台都支持app测试，但是只有TestDroid支持游戏测试；\n\n4. 对于国内云测试平台提供的人工测试，安全测试，内测分发和众包测试，国外这些云测试平台都是不支持的，需要结合别的工具和框架进行使用。不过对于手动测试，Sauce Labs和Perfecto这两个云测试平台支持租用测试设备进行手动测试；\n\n5. 对于云测试基础功能的兼容测试，以及脚本测试，崩溃分析和持续集成，这些云测试平台都是支持的；\n\n6. 只有Xamarin Test Cloud，TestDroid和AWS Device Farm支持性能监控；\n\n7. 对于脚本测试所使用的移动app自动化测试框架，每个平台都不甚相同：\n\n\t- Xamarin Test Cloud支持Calabash（iOS和Android）和自己的Xamarin.UITest;\n\n\t- TestDroid支持很多框架，包括支持iOS的Calabash，appium，UI Automation和 Jasmine，以及支持Android的Calabash，appium，Espresso，Robotium和uiautomator；\n\t- Sauce Labs支持自己的开源框架appium；\n\t- Google Cloud Test Lab则支持Espresso，Robotium和Robo test；\n\t- AWS Device Farm也支持很多框架，包括支持iOS的Calabash，appium，UIAutomation和XCTest，以及支持Android的Calabash，appium，JUnit，Espresso，Robotium和uiautomator。\n\n8. Xamarin Test Cloud，TestDroid和Sauce Labs都有自己的移动app测试脚本录制工具，分别是：Xamarin Test Recorder，TestDroid Recorder和appium inspector。\n\n**综合来看，对于国外的云测试平台，如果侧重的是测试设备的覆盖程度，选择Xamarin Test Cloud和Sauce Labs会更合适；如果需要测试FireOS设备，那就选择AWS Device Farm；如果侧重的是脚本测试中支持的语言和框架，那就可以选择TestDroid和AWS Device Farm；如果是进行游戏测试，只能选择TestDroid；如果要远程连接测试设备进行手动测试，那就需要选择Sauce Labs和Perfecto；如果在测试过程中需要同步监测性能，就不能选择Sauce Labs和Google Cloud Test Lab。**\n\n####国内主流的云测试平台：\n\n- Testin云测 (http://www.testin.cn/)\n- 百度MTC (http://mtc.baidu.com/)\n- 腾讯优测 (http://utest.qq.com/)\n- 阿里MQC (http://mqc.aliyun.com/)\n\n![图2 － 国内主流的云测试平台对比](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Mobile_Cloud_Testing_Domestic.png)\n\n从上图我们也可以看到一些特点：\n\n1. Testin云测支持的测试设备数量最多，达到了600部Android和70部iOS终端的数量；但是和Xamarin Test Cloud以及Sauce Labs支持的设备数量还是有不少差距的；\n\n2. 和亚马逊类似，阿里的YunOS也只有阿里MQC才能支持；\n\n3. 和国外的云测试平台很类似，这四个国内云测试平台也都支持app的云测试，而不支持游戏测试；只有Testin云测支持游戏测试；\n\n4. 对于云测试基础功能的兼容测试，国内主流云测试平台都是支持的；\n\n5. 这四个国内云测试平台也都支持崩溃分析，不过对于性能监控，却只有百度MTC支持，而且百度MTC的深度性能测试中还可以做竞品app的性能对比；\n\n6. Testin云测和百度MTC不支持手动测试；\n\n7. 只有阿里MQC不支持人工测试；\n\n8. 只有Testin云测不支持安全测试；对于支持安全测试的云测试平台，也没有公布是如何进行安全测试的；\n\n9. Testin云测支持内测分发和众包测试，阿里MQC支持众包测试，其它两个云测试平台对于内测分发和众包测试都不支持；\n\n10. 对于脚本测试，只有腾讯优测不支持；而对于测试工具和框架，各个平台的支持也不相同：\n\n\t- Testin云测支持Robotium，JUnit，淘宝的Athrun和Testin SDK，其中只有Testin SDK支持iOS和Android，其他框架都只支持Android；\n\n\t- 百度MTC只支持通过自己的测试脚本录制工具录制的脚本；\n\n\t- 阿里MQC支持Robotium和增强后的appium，其中appium可以支持iOS和Android；\n\n11. Testin云测，百度MTC和阿里MQC都提供了自己的测试脚本录制工具，分别是itestin录制回放工具，百度MTC录制回放工具和易测；\n\n12. 国内云测试平台都没有提及持续集成，不过从笔者的了解看来，Testin云测和阿里MQC应该是都支持的。\n\n**对于国内云测试平台，如果需要覆盖更多的测试设备或者需要测试游戏亦或需要内测分发，只能选择Testin云测；如果需要测试YunOS设备，那就需要选择阿里MQC；如果需要进行性能监控和竞品对比，那就选择百度MTC；如果要远程连接测试设备进行手动测试，那就需要选择腾讯优测和阿里MQC；如果需要雇佣云测试平台的专业测试人员，就不能选择阿里MQC；如果需要进行安全测试，就不能选择Testin云测；如果需要进行众包测试，那就选择Testin云测和阿里MQC；如果要进行脚本测试，就不能选择腾讯优测，对于百度MTC也不推荐。**\n\n相信通过对比这些云测试平台提供的功能和服务，以及它们各自的特点，读者在选用云测试平台时有了更多的依据。希望大家在使用这些信息作为依据时，综合考虑这些云测试平台的特点，同时可以使用它们提供的免费试用进行尝试，以便验证是否真的适合自己的app。\n\n***P.S.以上云测试平台提供的功能及服务，截止于2016年3月20日。***","slug":"Mobile_Cloud_Testing_Comparison","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cioz2opa800001sfy3d5fjtzr","layout":"post","photos":[],"link":"","content":"<p>我们都知道在测试移动app时最耗时的是在各种测试设备进行测试， 因为不论是安卓还是iOS都已经碎片化了。而云测试看似是解决这一问题的有效途径。因此选择哪种云测试平台来协助测试人员进行各种测试就成为首要问题。</p>\n<h3 id=\"我们先来看看云测试平台通常都提供哪些功能和服务。\">我们先来看看云测试平台通常都提供哪些功能和服务。</h3><p>主流的云测试平台都支持对原生native，混合hybrid和Web app的测试，这些测试包括：</p>\n<ol>\n<li><p>兼容测试</p>\n<p> 通过在多种测试设备上安装／卸载和运行被测app，遍历app的每个界面，主要检查app是否会报错或者崩溃。有些云测试平台还会对每个页面进行截图并进行对比。</p>\n</li>\n<li><p>脚本测试</p>\n<p> 通过运行云测试平台工具进行录制的或者使用自动化测试框架编写的自动化脚本，实现模拟用户操作的目的，并且减少手动测试时间。</p>\n</li>\n<li><p>性能监控和分析</p>\n<p> 利用Android SDK提供的借口，云测试平台可以检测移动app的耗电量，CPU等资源占用率，使用的流量等信息。有些云测试平台还提供自己的SDK，整合在app中可以提供更为准确的性能指标和信息，包括线上app的性能信息以及崩溃信息等。</p>\n</li>\n<li><p>手动测试和人工测试</p>\n<p> 云测试平台的手动测试是指租用云测试平台的特定设备，测试人员手动登录设备进行测试。而人工测试则是将测试需求告知云测试平台的专业测试人员，雇佣他们临时作为自己的测试人员进行测试。</p>\n</li>\n<li><p>持续集成</p>\n<p> 不少提供脚本测试的云测试平台都同时提供对持续集成（Continuous Integration）环境的支持。</p>\n</li>\n</ol>\n<p><strong>此外不少国内云测试平台还提供以下功能：</strong></p>\n<ul>\n<li>安全测试</li>\n<li>内测托管分发</li>\n<li>众包测试</li>\n</ul>\n<h3 id=\"我们再来看看各种云测试平台对于上述功能和服务的支持情况。\">我们再来看看各种云测试平台对于上述功能和服务的支持情况。</h3><p>由于国内外的云测试平台使用环境等因素的不同，我们分别对国内外主流的几个云测试平台进行对比。</p>\n<h4 id=\"国外主流的云测试平台：\">国外主流的云测试平台：</h4><ul>\n<li>Xamarin Test Cloud (<a href=\"https://xamarin.com/test-cloud/\" target=\"_blank\" rel=\"external\">https://xamarin.com/test-cloud/</a>)</li>\n<li>TestDroid (<a href=\"http://testdroid.com/\" target=\"_blank\" rel=\"external\">http://testdroid.com/</a>)</li>\n<li>Sauce Labs (<a href=\"https://saucelabs.com/mobile/\" target=\"_blank\" rel=\"external\">https://saucelabs.com/mobile/</a>)</li>\n<li>Google Cloud Test Cloud (<a href=\"https://developers.google.com/cloud-test-lab/\" target=\"_blank\" rel=\"external\">https://developers.google.com/cloud-test-lab/</a>)</li>\n<li>AWS Device Farm (<a href=\"https://aws.amazon.com/device-farm/\" target=\"_blank\" rel=\"external\">https://aws.amazon.com/device-farm/</a>)</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Mobile_Cloud_Testing_Forgien.png\" alt=\"图1 － 国外主流的云测试平台对比\"></p>\n<p>从上图我们可以看到一些特点：</p>\n<ol>\n<li><p>在测试设备的数量上，Xamarin Test Cloud和Sauce Labs都是非常有优势的，虽然Xamarin Test Cloud统计的是测试设备的数量，而Sauce Labs是平台的数量；</p>\n</li>\n<li><p>亚马逊自己的FireOS只被自己的云测试平台支持，在国内我们也能看到类似的例子；</p>\n</li>\n<li><p>所有的云测试平台都支持app测试，但是只有TestDroid支持游戏测试；</p>\n</li>\n<li><p>对于国内云测试平台提供的人工测试，安全测试，内测分发和众包测试，国外这些云测试平台都是不支持的，需要结合别的工具和框架进行使用。不过对于手动测试，Sauce Labs和Perfecto这两个云测试平台支持租用测试设备进行手动测试；</p>\n</li>\n<li><p>对于云测试基础功能的兼容测试，以及脚本测试，崩溃分析和持续集成，这些云测试平台都是支持的；</p>\n</li>\n<li><p>只有Xamarin Test Cloud，TestDroid和AWS Device Farm支持性能监控；</p>\n</li>\n<li><p>对于脚本测试所使用的移动app自动化测试框架，每个平台都不甚相同：</p>\n<ul>\n<li><p>Xamarin Test Cloud支持Calabash（iOS和Android）和自己的Xamarin.UITest;</p>\n</li>\n<li><p>TestDroid支持很多框架，包括支持iOS的Calabash，appium，UI Automation和 Jasmine，以及支持Android的Calabash，appium，Espresso，Robotium和uiautomator；</p>\n</li>\n<li>Sauce Labs支持自己的开源框架appium；</li>\n<li>Google Cloud Test Lab则支持Espresso，Robotium和Robo test；</li>\n<li>AWS Device Farm也支持很多框架，包括支持iOS的Calabash，appium，UIAutomation和XCTest，以及支持Android的Calabash，appium，JUnit，Espresso，Robotium和uiautomator。</li>\n</ul>\n</li>\n<li><p>Xamarin Test Cloud，TestDroid和Sauce Labs都有自己的移动app测试脚本录制工具，分别是：Xamarin Test Recorder，TestDroid Recorder和appium inspector。</p>\n</li>\n</ol>\n<p><strong>综合来看，对于国外的云测试平台，如果侧重的是测试设备的覆盖程度，选择Xamarin Test Cloud和Sauce Labs会更合适；如果需要测试FireOS设备，那就选择AWS Device Farm；如果侧重的是脚本测试中支持的语言和框架，那就可以选择TestDroid和AWS Device Farm；如果是进行游戏测试，只能选择TestDroid；如果要远程连接测试设备进行手动测试，那就需要选择Sauce Labs和Perfecto；如果在测试过程中需要同步监测性能，就不能选择Sauce Labs和Google Cloud Test Lab。</strong></p>\n<h4 id=\"国内主流的云测试平台：\">国内主流的云测试平台：</h4><ul>\n<li>Testin云测 (<a href=\"http://www.testin.cn/\" target=\"_blank\" rel=\"external\">http://www.testin.cn/</a>)</li>\n<li>百度MTC (<a href=\"http://mtc.baidu.com/\" target=\"_blank\" rel=\"external\">http://mtc.baidu.com/</a>)</li>\n<li>腾讯优测 (<a href=\"http://utest.qq.com/\" target=\"_blank\" rel=\"external\">http://utest.qq.com/</a>)</li>\n<li>阿里MQC (<a href=\"http://mqc.aliyun.com/\" target=\"_blank\" rel=\"external\">http://mqc.aliyun.com/</a>)</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Mobile_Cloud_Testing_Domestic.png\" alt=\"图2 － 国内主流的云测试平台对比\"></p>\n<p>从上图我们也可以看到一些特点：</p>\n<ol>\n<li><p>Testin云测支持的测试设备数量最多，达到了600部Android和70部iOS终端的数量；但是和Xamarin Test Cloud以及Sauce Labs支持的设备数量还是有不少差距的；</p>\n</li>\n<li><p>和亚马逊类似，阿里的YunOS也只有阿里MQC才能支持；</p>\n</li>\n<li><p>和国外的云测试平台很类似，这四个国内云测试平台也都支持app的云测试，而不支持游戏测试；只有Testin云测支持游戏测试；</p>\n</li>\n<li><p>对于云测试基础功能的兼容测试，国内主流云测试平台都是支持的；</p>\n</li>\n<li><p>这四个国内云测试平台也都支持崩溃分析，不过对于性能监控，却只有百度MTC支持，而且百度MTC的深度性能测试中还可以做竞品app的性能对比；</p>\n</li>\n<li><p>Testin云测和百度MTC不支持手动测试；</p>\n</li>\n<li><p>只有阿里MQC不支持人工测试；</p>\n</li>\n<li><p>只有Testin云测不支持安全测试；对于支持安全测试的云测试平台，也没有公布是如何进行安全测试的；</p>\n</li>\n<li><p>Testin云测支持内测分发和众包测试，阿里MQC支持众包测试，其它两个云测试平台对于内测分发和众包测试都不支持；</p>\n</li>\n<li><p>对于脚本测试，只有腾讯优测不支持；而对于测试工具和框架，各个平台的支持也不相同：</p>\n<ul>\n<li><p>Testin云测支持Robotium，JUnit，淘宝的Athrun和Testin SDK，其中只有Testin SDK支持iOS和Android，其他框架都只支持Android；</p>\n</li>\n<li><p>百度MTC只支持通过自己的测试脚本录制工具录制的脚本；</p>\n</li>\n<li><p>阿里MQC支持Robotium和增强后的appium，其中appium可以支持iOS和Android；</p>\n</li>\n</ul>\n</li>\n<li><p>Testin云测，百度MTC和阿里MQC都提供了自己的测试脚本录制工具，分别是itestin录制回放工具，百度MTC录制回放工具和易测；</p>\n</li>\n<li><p>国内云测试平台都没有提及持续集成，不过从笔者的了解看来，Testin云测和阿里MQC应该是都支持的。</p>\n</li>\n</ol>\n<p><strong>对于国内云测试平台，如果需要覆盖更多的测试设备或者需要测试游戏亦或需要内测分发，只能选择Testin云测；如果需要测试YunOS设备，那就需要选择阿里MQC；如果需要进行性能监控和竞品对比，那就选择百度MTC；如果要远程连接测试设备进行手动测试，那就需要选择腾讯优测和阿里MQC；如果需要雇佣云测试平台的专业测试人员，就不能选择阿里MQC；如果需要进行安全测试，就不能选择Testin云测；如果需要进行众包测试，那就选择Testin云测和阿里MQC；如果要进行脚本测试，就不能选择腾讯优测，对于百度MTC也不推荐。</strong></p>\n<p>相信通过对比这些云测试平台提供的功能和服务，以及它们各自的特点，读者在选用云测试平台时有了更多的依据。希望大家在使用这些信息作为依据时，综合考虑这些云测试平台的特点，同时可以使用它们提供的免费试用进行尝试，以便验证是否真的适合自己的app。</p>\n<p><strong><em>P.S.以上云测试平台提供的功能及服务，截止于2016年3月20日。</em></strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们都知道在测试移动app时最耗时的是在各种测试设备进行测试， 因为不论是安卓还是iOS都已经碎片化了。而云测试看似是解决这一问题的有效途径。因此选择哪种云测试平台来协助测试人员进行各种测试就成为首要问题。</p>\n<h3 id=\"我们先来看看云测试平台通常都提供哪些功能和服务。\">我们先来看看云测试平台通常都提供哪些功能和服务。</h3><p>主流的云测试平台都支持对原生native，混合hybrid和Web app的测试，这些测试包括：</p>\n<ol>\n<li><p>兼容测试</p>\n<p> 通过在多种测试设备上安装／卸载和运行被测app，遍历app的每个界面，主要检查app是否会报错或者崩溃。有些云测试平台还会对每个页面进行截图并进行对比。</p>\n</li>\n<li><p>脚本测试</p>\n<p> 通过运行云测试平台工具进行录制的或者使用自动化测试框架编写的自动化脚本，实现模拟用户操作的目的，并且减少手动测试时间。</p>\n</li>\n<li><p>性能监控和分析</p>\n<p> 利用Android SDK提供的借口，云测试平台可以检测移动app的耗电量，CPU等资源占用率，使用的流量等信息。有些云测试平台还提供自己的SDK，整合在app中可以提供更为准确的性能指标和信息，包括线上app的性能信息以及崩溃信息等。</p>\n</li>\n<li><p>手动测试和人工测试</p>\n<p> 云测试平台的手动测试是指租用云测试平台的特定设备，测试人员手动登录设备进行测试。而人工测试则是将测试需求告知云测试平台的专业测试人员，雇佣他们临时作为自己的测试人员进行测试。</p>\n</li>\n<li><p>持续集成</p>\n<p> 不少提供脚本测试的云测试平台都同时提供对持续集成（Continuous Integration）环境的支持。</p>\n</li>\n</ol>\n<p><strong>此外不少国内云测试平台还提供以下功能：</strong></p>\n<ul>\n<li>安全测试</li>\n<li>内测托管分发</li>\n<li>众包测试</li>\n</ul>\n<h3 id=\"我们再来看看各种云测试平台对于上述功能和服务的支持情况。\">我们再来看看各种云测试平台对于上述功能和服务的支持情况。</h3><p>由于国内外的云测试平台使用环境等因素的不同，我们分别对国内外主流的几个云测试平台进行对比。</p>\n<h4 id=\"国外主流的云测试平台：\">国外主流的云测试平台：</h4><ul>\n<li>Xamarin Test Cloud (<a href=\"https://xamarin.com/test-cloud/\" target=\"_blank\" rel=\"external\">https://xamarin.com/test-cloud/</a>)</li>\n<li>TestDroid (<a href=\"http://testdroid.com/\" target=\"_blank\" rel=\"external\">http://testdroid.com/</a>)</li>\n<li>Sauce Labs (<a href=\"https://saucelabs.com/mobile/\" target=\"_blank\" rel=\"external\">https://saucelabs.com/mobile/</a>)</li>\n<li>Google Cloud Test Cloud (<a href=\"https://developers.google.com/cloud-test-lab/\" target=\"_blank\" rel=\"external\">https://developers.google.com/cloud-test-lab/</a>)</li>\n<li>AWS Device Farm (<a href=\"https://aws.amazon.com/device-farm/\" target=\"_blank\" rel=\"external\">https://aws.amazon.com/device-farm/</a>)</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Mobile_Cloud_Testing_Forgien.png\" alt=\"图1 － 国外主流的云测试平台对比\"></p>\n<p>从上图我们可以看到一些特点：</p>\n<ol>\n<li><p>在测试设备的数量上，Xamarin Test Cloud和Sauce Labs都是非常有优势的，虽然Xamarin Test Cloud统计的是测试设备的数量，而Sauce Labs是平台的数量；</p>\n</li>\n<li><p>亚马逊自己的FireOS只被自己的云测试平台支持，在国内我们也能看到类似的例子；</p>\n</li>\n<li><p>所有的云测试平台都支持app测试，但是只有TestDroid支持游戏测试；</p>\n</li>\n<li><p>对于国内云测试平台提供的人工测试，安全测试，内测分发和众包测试，国外这些云测试平台都是不支持的，需要结合别的工具和框架进行使用。不过对于手动测试，Sauce Labs和Perfecto这两个云测试平台支持租用测试设备进行手动测试；</p>\n</li>\n<li><p>对于云测试基础功能的兼容测试，以及脚本测试，崩溃分析和持续集成，这些云测试平台都是支持的；</p>\n</li>\n<li><p>只有Xamarin Test Cloud，TestDroid和AWS Device Farm支持性能监控；</p>\n</li>\n<li><p>对于脚本测试所使用的移动app自动化测试框架，每个平台都不甚相同：</p>\n<ul>\n<li><p>Xamarin Test Cloud支持Calabash（iOS和Android）和自己的Xamarin.UITest;</p>\n</li>\n<li><p>TestDroid支持很多框架，包括支持iOS的Calabash，appium，UI Automation和 Jasmine，以及支持Android的Calabash，appium，Espresso，Robotium和uiautomator；</p>\n</li>\n<li>Sauce Labs支持自己的开源框架appium；</li>\n<li>Google Cloud Test Lab则支持Espresso，Robotium和Robo test；</li>\n<li>AWS Device Farm也支持很多框架，包括支持iOS的Calabash，appium，UIAutomation和XCTest，以及支持Android的Calabash，appium，JUnit，Espresso，Robotium和uiautomator。</li>\n</ul>\n</li>\n<li><p>Xamarin Test Cloud，TestDroid和Sauce Labs都有自己的移动app测试脚本录制工具，分别是：Xamarin Test Recorder，TestDroid Recorder和appium inspector。</p>\n</li>\n</ol>\n<p><strong>综合来看，对于国外的云测试平台，如果侧重的是测试设备的覆盖程度，选择Xamarin Test Cloud和Sauce Labs会更合适；如果需要测试FireOS设备，那就选择AWS Device Farm；如果侧重的是脚本测试中支持的语言和框架，那就可以选择TestDroid和AWS Device Farm；如果是进行游戏测试，只能选择TestDroid；如果要远程连接测试设备进行手动测试，那就需要选择Sauce Labs和Perfecto；如果在测试过程中需要同步监测性能，就不能选择Sauce Labs和Google Cloud Test Lab。</strong></p>\n<h4 id=\"国内主流的云测试平台：\">国内主流的云测试平台：</h4><ul>\n<li>Testin云测 (<a href=\"http://www.testin.cn/\" target=\"_blank\" rel=\"external\">http://www.testin.cn/</a>)</li>\n<li>百度MTC (<a href=\"http://mtc.baidu.com/\" target=\"_blank\" rel=\"external\">http://mtc.baidu.com/</a>)</li>\n<li>腾讯优测 (<a href=\"http://utest.qq.com/\" target=\"_blank\" rel=\"external\">http://utest.qq.com/</a>)</li>\n<li>阿里MQC (<a href=\"http://mqc.aliyun.com/\" target=\"_blank\" rel=\"external\">http://mqc.aliyun.com/</a>)</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Mobile_Cloud_Testing_Domestic.png\" alt=\"图2 － 国内主流的云测试平台对比\"></p>\n<p>从上图我们也可以看到一些特点：</p>\n<ol>\n<li><p>Testin云测支持的测试设备数量最多，达到了600部Android和70部iOS终端的数量；但是和Xamarin Test Cloud以及Sauce Labs支持的设备数量还是有不少差距的；</p>\n</li>\n<li><p>和亚马逊类似，阿里的YunOS也只有阿里MQC才能支持；</p>\n</li>\n<li><p>和国外的云测试平台很类似，这四个国内云测试平台也都支持app的云测试，而不支持游戏测试；只有Testin云测支持游戏测试；</p>\n</li>\n<li><p>对于云测试基础功能的兼容测试，国内主流云测试平台都是支持的；</p>\n</li>\n<li><p>这四个国内云测试平台也都支持崩溃分析，不过对于性能监控，却只有百度MTC支持，而且百度MTC的深度性能测试中还可以做竞品app的性能对比；</p>\n</li>\n<li><p>Testin云测和百度MTC不支持手动测试；</p>\n</li>\n<li><p>只有阿里MQC不支持人工测试；</p>\n</li>\n<li><p>只有Testin云测不支持安全测试；对于支持安全测试的云测试平台，也没有公布是如何进行安全测试的；</p>\n</li>\n<li><p>Testin云测支持内测分发和众包测试，阿里MQC支持众包测试，其它两个云测试平台对于内测分发和众包测试都不支持；</p>\n</li>\n<li><p>对于脚本测试，只有腾讯优测不支持；而对于测试工具和框架，各个平台的支持也不相同：</p>\n<ul>\n<li><p>Testin云测支持Robotium，JUnit，淘宝的Athrun和Testin SDK，其中只有Testin SDK支持iOS和Android，其他框架都只支持Android；</p>\n</li>\n<li><p>百度MTC只支持通过自己的测试脚本录制工具录制的脚本；</p>\n</li>\n<li><p>阿里MQC支持Robotium和增强后的appium，其中appium可以支持iOS和Android；</p>\n</li>\n</ul>\n</li>\n<li><p>Testin云测，百度MTC和阿里MQC都提供了自己的测试脚本录制工具，分别是itestin录制回放工具，百度MTC录制回放工具和易测；</p>\n</li>\n<li><p>国内云测试平台都没有提及持续集成，不过从笔者的了解看来，Testin云测和阿里MQC应该是都支持的。</p>\n</li>\n</ol>\n<p><strong>对于国内云测试平台，如果需要覆盖更多的测试设备或者需要测试游戏亦或需要内测分发，只能选择Testin云测；如果需要测试YunOS设备，那就需要选择阿里MQC；如果需要进行性能监控和竞品对比，那就选择百度MTC；如果要远程连接测试设备进行手动测试，那就需要选择腾讯优测和阿里MQC；如果需要雇佣云测试平台的专业测试人员，就不能选择阿里MQC；如果需要进行安全测试，就不能选择Testin云测；如果需要进行众包测试，那就选择Testin云测和阿里MQC；如果要进行脚本测试，就不能选择腾讯优测，对于百度MTC也不推荐。</strong></p>\n<p>相信通过对比这些云测试平台提供的功能和服务，以及它们各自的特点，读者在选用云测试平台时有了更多的依据。希望大家在使用这些信息作为依据时，综合考虑这些云测试平台的特点，同时可以使用它们提供的免费试用进行尝试，以便验证是否真的适合自己的app。</p>\n<p><strong><em>P.S.以上云测试平台提供的功能及服务，截止于2016年3月20日。</em></strong></p>\n"},{"title":"国内交付项目新手PM生存指南","date":"2016-06-05T14:00:00.000Z","comments":1,"_content":"\n***长期以来一直做国外的交付项目，对于国内的项目总是很怵，因为总觉得做国内项目就需要像电视剧中一样边谈项目边喝酒应酬，而且还天天加班，所以一直以来没有机会也没有勇气接近国内项目。***\n\n***但是，机缘巧合，最近在国内项目上摸爬滚打了一段时间，感觉可以把自己的经历和经验记录下来，跟大家分享一下。***\n \n也许大家接触的都是国内客户，但是不同的客户会有自己独特的风格，在下文中我会按照交付项目开展的时间顺序为大家介绍它们通用的和特有的问题及经历。\n \n#售前阶段\n \n在正式开始项目前，我们需要对**项目管理的“金三角”（时间、范围和成本）**有明确的认识。但是在售前阶段这些问题的答案都很模糊，需要我们逐步分析和确认。\n\n一般会通过以下三个步骤来解决。\n \n###第一步：了解背景\n \n我们首先需要做的是**找到这个项目机会的来源**，也就向销售的同事获取尽可能多的信息，例如这个机会是哪个客户给的，他／她在客户组织架构中的位置是什么样的，他／她对我们有什么样的建议和想法，这个机会所在部门的背景情况和重视程度，这个项目现在遇到的问题和以后有可能遇到的问题，我们去谈需求时需要联系谁，联系方式是什么。\n \n拿到了这些消息后，我们还可以利用现有的信息，在公司内部找和客户同一部门或者类似部门打过交道的同事**了解更多的背景和技术知识**，尽可能找一个在同一客户下工作过，最好是客户熟知并且对客户有影响力的同事，在洽谈需求时能一起参加，这不仅会让我们更有底气，能更准确地了解客户需求，也会让客户增加更加信任。\n \n这些信息我们最好能够记录并保存下来，而且需要系统性地整理这些信息及注意事项。\n \n在这一阶段我们了解的更多都是全局的内容，而在项目中我们往往忽视了从全局观出发，如何能更好地解决问题。\n \n###第二步：拜访客户\n \n有了这些信息，下一步就是**和客户约好时间，进行拜访**。\n \n第一次进行客户拜访，通常双方需要先进行相互介绍，我们一般也会派出项目的PM和Tech Lead参与拜访，拜访的内容主要是**了解需求**。但是第一次谈需求，我们需要注意更多从业务和价值角度切入，而不要陷入技术细节。这时我们往往会发现自己之前设想的和客户描述出来的差别很大。但是我们要注意，不要过于坚持自己的想法，而需要根据客户的描述，通过自己的问题一步一步地引导客户说出他们的痛点和期望，从而能使项目的目标清晰。\n \n在这一阶段通常我们也要向客户展示我们的技术实力，让客户坚定选择我们的决策是正确的。采取的方式可以有针对项目相关技术的演讲或者演示。总的来说，最好把第一次拜访控制在一个小时左右，这样我们一方面得到了相关的项目知识，另一方面，为下一次会面向客户展示具体的项目相关技术实力提供了机会。\n \n在有了项目业务需求和痛点之后，我们需要修正自己之前的想法和设计，根据最新的情况进行总结，并且最好得到客户的确认。\n \n接着，根据这些信息，我们就可以着手进行**技术架构的设计以及风险的评估**，为后续的拜访明确目标，使会议更高效。之后的拜访或者会议都是一步一步的细化过程，包括确定是用什么技术栈，什么架构，客户如何与我们交付团队合作等等。不过我们需要控制每次会议以及为项目准备时间的投入，以及这一阶段持续的时间。因为持续时间长不仅会让客户感觉我们不专业，也会暗示我们不理解项目。再说，如果项目最后没有谈成，也是对于公司资源的浪费。\n \n###第三步：合同形式\n \n上面我们说的都是技术方面的，售前阶段有很重要的一点是需要了解**客户想以什么样的方式和我们签合同**。因为咨询和交付项目的工作方式以及交付物都是不一样的，如果我们以交付项目的形式签订合同，而以咨询的形式工作，那在项目结束时，我们会面临如何验收，如何提供交付物的问题。这也很有可能让客户在工作验收和领导汇报时陷入被动，因为实际完成的和合同上签署的内容是不一致的。\n \n如果我们能够顺利解决上面所说的问题，我们就可以等着进行投标等工作了。下面我们就来看看神秘的投标阶段都会有什么意想不到的问题吧。\n \n#投标阶段\n \n首先我们需要**根据标书的要求，完成相关系统的设计**。这些设计并不只是技术架构，还需要包含对于客户的理解，对于项目现状的理解，对于项目远景的理解，以及由此而产生的技术架构和实施计划。同时，我们还需要展现我们对于同一类型项目的经验和成功案例。\n \n编写标书的技术方案看起来简单，只要写命题作文就可以了。\n\n![标书的大致目录](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Proposal_Index.png)\n\n图 1.1 － 标书的大致目录\n \n但是，标书需要我们**协同配合**，尤其是需要售前同事和交付团队进行密切沟通，确保交付团队在得到客户真实意图，准确把握客户的期望和优先级的情况下，出具架构合理、充分考虑到客户需求和成本的方案。如果在投标前期给客户做过Inception，我们还需要和Inception团队全力合作，进行知识的有效传递（最好能让Inception团队来编写标书）。如果能从Inception的团队中获得例如线框图（如图1.4），用户画像，用户旅程，推荐的技术架构甚至Epic Story，对于确定项目范围和编写技术方案来说会助力很多。\n\n![线框图和用户旅程](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Wireframe.png)\n\n图 1.2 － 线框图和用户旅程\n \n###关键点一：技术栈和技术架构\n \n**在编写标书时的关键之一在于技术栈和技术架构**。在我们根据客户的需求确定这两项之后，我们还需要进行架构评审，以便集思广益，减少架构设计时引入交付风险，同时也可以更好的权衡交付压力和技术卓越。我们不仅需要考虑使用什么技术来满足客户的需求，还需要考虑客户运行项目的成本，甚至客户是否需要付出很多成本招聘到合适的运维人员等。\n\n![技术架构](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Architecture.png)\n\n图 1.3 － 技术架构\n \n###关键点二：估算工作量\n \n**确定了技术栈和技术框架之后就需要对工作量进行估算了**。在进行估算时我们不能按照特定的人员能力进行估算，而需要按照平均开发水平估算交付项目的人天，因为我们不能确定谁来进行开发。由于和客户签订合同通常是以人天为单位进行计算的，所以按照我们通常使用的以难易程度为点数进行估算也是可以的，不过最后也需要转换成人天。在估算出工作量之后还需要和售前同事权衡架构设计的精密性和交付周期。此外，对于有些客户，我们评估了工作量后，还需要和他们针对每一个功能的工作量进行PK，确定我们的工作量没有水分，因为我们更需要对项目业务和技术都有深入的了解。\n \n###关键点三：确定人员计划\n \n**编写标书的另一个关键是确定人员计划**，但是这一点依赖于前面两项。在确定了技术方案后，我们需要根据具体的技术需求，确定需要什么样的角色，例如使用什么技术的前后端开发，是否需要iOS／Android的开发，是否需要UX等；以及根据对于交付项目的工作量估算，确定这些人员上项目和下项目的时间，并且最好能留一点buffer，以应对需求变化和请假等不确定因素，同时还需要考虑到项目交付后一段时间的维护计划。项目的利润也是PM需要重点关注的，这也会影响到选什么样的人加入项目。由于我们通常并不会获得完全适合项目技术的人员参加项目，所以作为PM也得负责人员的培养，以达到项目的要求。\n\n![人员计划](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Staffing_Plan.png)\n\n图 1.4 － 人员计划\n \n此外，我们不仅需要充分考虑以上三个方面，还需要**突出我们的亮点**，使客户能更直观地了解我们的价值所在。\n \n在编写标书前我们就得**设定好心理预期**，编写标书，尤其是第一次编写标书时，通常都会有很多地方都要修改很多遍。虽然修改很累很繁琐，但是只有做好了这一步，才能让后续工作更顺利。\n \n##讲标阶段\n \n投标不仅包含编写标书，还包括讲标的环节。两者中间实际上还有“投标”这一活动，但是一般是由特定的同事去投标的，所以作为PM和技术人员，通常在这一阶段更关注于投标之后的讲标。\n \n顾名思义，讲标就是在客户现场把投递的标书讲一遍。但实际上前后的准备工作都很多。\n \n首先，我们要**准备讲标标书**。大家会觉得奇怪，刚才不是写好标书都投了吗？还写什么讲标标书啊？其实一般投标的纸质版标书会有150～200页的内容，而讲标时间通常都是半小时，再加上15分钟左右的问答，所以在30分钟内不可能讲完标书上的所有内容，因此我们需要对标书进行精简，并且多以图表和图片的形式进行展示。这一过程也会和编写标书一样会修改很多次。\n \n其次，还需要进行讲**标的演练**。需要有人模仿客户，提出各种问题和挑战，让讲标的同学尽可能做好应对各种不同的听众和情况，随机应变，使整个讲标过程在控制中。同样演练也会进行多次，以使演讲技巧和临场能力得到锻炼。\n \n再次，在正式讲标前，我们需要准备好电脑电源，翻页笔，显示器转接头，装有讲标文件的优盘，各种格式的讲标文件（Keynote、PPT、PDF等）等设备和资料，**避免任何出错的可能**。并且我们需要提前到场，如果离客户远一定要留好充足的时间，避免迟到而影响讲标效果。\n \n最后，在讲标时，我们只要**控制好节奏，把握好时间**，按照演练的内容正常发挥就可以了。\n \n在投标和讲标之后是商务谈判和签订合同等活动，由于一般大家都不会接触（其实是本人并没有接触到），所以就略过啦。\n \n等前期准备都完成了，就可以开始正式的交付阶段了。\n \n#交付阶段\n \n在交付阶段作为PM关注的点很多，所以分为几个方面来说。\n \n###在这一阶段，我们还需要和客户沟通了解以下方面：\n \n1. **了解客户项目的上线流程**：比如上线是否需要申请域名，是否有上线前的测试和安全检查等，内部工作流程和规范（需要使用的各种工具，以及是否每次会议结束后都需要发送会议纪要等），文档和报告（日报，周报以及项目交付时需要提供的诸如用户手册、维护指南等文档）。\n \n2. **了解客户如何定义项目成功**：因为对于客户的业务部门、技术部门和我们交付团队，成功的定义并不一样，但是需要我们了解这些不一致，然后相互协调相互妥协，尽量让各方都满意，使项目在交付后每一方都认为项目成功了。\n \n3. **为客户提供统一的接口人**：这并不是说交付团队只有PM和客户沟通而是说不同类型的事物至少客户可以找同一个人解决问题，而不是每次遇到问题，都是需要通过询问才能找到合适的人解决，甚至没有人负责解决问题。例如对于项目管理和人员安排，客户可以找PM；而对于技术架构和实现方面的问题，可以找Tech Lead。\n \n除了了解上述方面，对于客户，尤其是业务部门，通常来说对于交付团队来说都很不放心，**担心进度和实现效果**。特别是对于第一次合作的团队来说更是如此。那我们能怎么样改变这种情况呢？\n\n- 首先我们可以通过每天的站会让客户了解我们工作的内容，也便于我们快速解决问题。不过我们需要控制站会的形式，不能把站会变成向汇报或者进行提问的方式。\n\n- 其次我们可以通过故事墙（物理和电子的）让客户实时看到项目的进展和项目的状态，让他们觉得项目可控。\n\n- 再次是需要适时而且适度向客户寻求解决问题。这样可以让客户更有参与感和成就感，不过需要控制好度。尽量避免交付团队自己开小会，让客户觉得自己被排除在团队之外。\n \n其实，**最关键的还是我们开发的软件**。不仅是客户，交付团队也是看到了实际的产品之后，才会对项目进度和质量更有信心。\n \n###对于我们自己团队来说，需要注意以下几点：\n \n1. 和很多公司不同，我们开始交付之后，并不是一上来就直接开发功能，而是会有**迭代0**的环节，包括交付范围的细化，迭代1的故事卡分析，制定发布计划，进行基础设施的搭建，验证技术可行性等任务。这可以让我们在项目伊始就尽量排除、发现和识别架构和框架以及技术可行性上的问题，迅速进行调整。\n \n2. 我们还需要**和客户建立良好的关系**，让他们意识到我们是在为同一个目标而努力，需要通力合作才能达到那个目标，所以各方需要相互配合与磨合。\n \n3. **在坚持底线和原则的基础上适当妥协，尽量保证客户的满意度**。但是在无法满足或者对于项目进度、质量、人员、成本以及和客户的关系有影响的方面，需要及时和交付保障的同事进行沟通和商量，尽量在萌芽阶段解决问题。\n \n4. **关注并管理客户的期望**。如果项目开发慢了，要及时向客户解释原因，并提供解决方案以及寻求帮助；如果交付快了，不仅需要介绍我们通过何种努力才能加快进度，同时需要介绍可能存在的问题以及可以改进的内容。\n \n5. 在开发过程中**控制好项目的节奏**，不能让团队一直加班或者没有事做，而需要让工作有节奏。对于客户可能提出的996（9点上班，9点下班，每周工作6天）的工作模式，一定要断然拒绝，因为我们希望的是可持续的高效开发，而不是短期的突击。当然这不包括上线前可能会需要加班的突发情况。\n \n6. 为了更好的合作，我们还需要在项目开始就和所有团队成员达成一致，**定义内部工作流程，以及内部沟通机制**，例如微信群和邮件群等。不过需要注意使用的频率，减少客户对于进度的担忧。此外对于和客户的沟通，我们也需要制定沟通计划，例如如何与客户确定需求等内容，什么时候给客户进行演示，以及客户有问题该怎么和团队沟通，以保证既能解决问题，又不会影响团队交付进度。\n \n7. 我们合作的很多客户对于**文档**都是有不少要求的，所以在开发过程中，由于交付压力，客户有可能允许我们延期提交相应的文档，例如设计文档等，但是我们还需要保留好原始材料，等客户需要这些文档时，我们可以通过这些材料快速生成相应的内容，而不是重新做起。\n \n###对于PM来说还有哪些职责呢？\n \n1. PM还需要适当**屏蔽干扰**，让团队能集中精力工作，例如尽量减少不相关会议的打扰，以及回答客户随时提问技术细节等情况；同时需要避免压力过多传递到团队成员，例如客户对于需求或者架构的大改变，从而有可能对项目交付进度产生很大压力，PM需要先过滤这些信息，等改变明确后再告知整个团队，这样可以避免传递不确定的信息，避免造成军心不稳的情况。\n \n2. PM还需要**关注团队成员的精神状态**，用积极的方式影响团队，提高团队士气；同时还要负责好后勤工作，例如开发所需要的各种资源的协调，办公用品等，以及Team Building这些活动。\n \n3. 交付团队还需要不时给客户一定的**震撼和影响**，以使客户对我们更信任。例如采用客户并没有用过的利用画图的方式展示架构图；\n\n![用画图的形式展示架构图](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Architecture_Map.png)\n\n图 1.5 － 用画图的形式展示架构图\n \n以及，可以用美纹胶带来装饰物力墙，而不是在白板上手动画上歪歪扭扭的线；\n\n![用美纹胶带来装饰物力墙](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Story_Wall.jpg)\n\n图 1.6 － 用美纹胶带来装饰物力墙\n\n也可以是针对技术问题的在白板上边画边讲的讨论等。\n \n4. 如果在客户现场工作，客户一般会希望通过学习我们的工作方式提高自己员工的能力，所以我们也可以考虑在不影响进度的情况下，**传播一些项目实践**，例如举行公开的回顾会议等。\n \n5. 在客户现场工作需要注意客户的**网络速度和质量**是否会影响到我们的工作效率。如果发现了问题，一定要尽早解决，尤其是安装开发和生产环境的任务对于网络要求会很高。\n \n虽然现在我经历的第一个国内交付项目还正在如火如荼地进行，但是并不妨碍我畅想一下交付之后的情形。\n \n#交付之后\n \n在项目完成以后，我们还会维护一段时间。这段时间只会就现有的代码问题进行修复，并不会进行功能开发。\n \n对于PM来说，\n \n1. PM需要发送**上线邮件**，让团队成员有成就感和荣誉感，也让更多人知道自己项目是做什么的。\n \n2. PM还需要负责**项目总结**，不仅总结成功的经验，还需要分析出现的问题以及如何避免，让更多的人少走弯路。\n \n3. 最后少不了的就是**团队的庆祝**了，无论是买蛋糕庆祝还是别的活动，团队都需要被激励和感谢。\n \n之后，大家又可以准备投入到新的项目中啦：）。\n\n***以上的总结更多的是从个人的经验出发，难免会有不足，希望这边文章能使大家在看的时候想到自己遗漏的一些内容，更好更完善地进行项目管理。也欢迎大家的指正。***","source":"_posts/Domestic_Project_Manager.md","raw":"title: 国内交付项目新手PM生存指南\ndate: 2016-06-06\ncategories:\n- Test\ntags:\n- Delivery\n- Domestic Project\n- Project Management\ncomments: true\n---\n\n***长期以来一直做国外的交付项目，对于国内的项目总是很怵，因为总觉得做国内项目就需要像电视剧中一样边谈项目边喝酒应酬，而且还天天加班，所以一直以来没有机会也没有勇气接近国内项目。***\n\n***但是，机缘巧合，最近在国内项目上摸爬滚打了一段时间，感觉可以把自己的经历和经验记录下来，跟大家分享一下。***\n \n也许大家接触的都是国内客户，但是不同的客户会有自己独特的风格，在下文中我会按照交付项目开展的时间顺序为大家介绍它们通用的和特有的问题及经历。\n \n#售前阶段\n \n在正式开始项目前，我们需要对**项目管理的“金三角”（时间、范围和成本）**有明确的认识。但是在售前阶段这些问题的答案都很模糊，需要我们逐步分析和确认。\n\n一般会通过以下三个步骤来解决。\n \n###第一步：了解背景\n \n我们首先需要做的是**找到这个项目机会的来源**，也就向销售的同事获取尽可能多的信息，例如这个机会是哪个客户给的，他／她在客户组织架构中的位置是什么样的，他／她对我们有什么样的建议和想法，这个机会所在部门的背景情况和重视程度，这个项目现在遇到的问题和以后有可能遇到的问题，我们去谈需求时需要联系谁，联系方式是什么。\n \n拿到了这些消息后，我们还可以利用现有的信息，在公司内部找和客户同一部门或者类似部门打过交道的同事**了解更多的背景和技术知识**，尽可能找一个在同一客户下工作过，最好是客户熟知并且对客户有影响力的同事，在洽谈需求时能一起参加，这不仅会让我们更有底气，能更准确地了解客户需求，也会让客户增加更加信任。\n \n这些信息我们最好能够记录并保存下来，而且需要系统性地整理这些信息及注意事项。\n \n在这一阶段我们了解的更多都是全局的内容，而在项目中我们往往忽视了从全局观出发，如何能更好地解决问题。\n \n###第二步：拜访客户\n \n有了这些信息，下一步就是**和客户约好时间，进行拜访**。\n \n第一次进行客户拜访，通常双方需要先进行相互介绍，我们一般也会派出项目的PM和Tech Lead参与拜访，拜访的内容主要是**了解需求**。但是第一次谈需求，我们需要注意更多从业务和价值角度切入，而不要陷入技术细节。这时我们往往会发现自己之前设想的和客户描述出来的差别很大。但是我们要注意，不要过于坚持自己的想法，而需要根据客户的描述，通过自己的问题一步一步地引导客户说出他们的痛点和期望，从而能使项目的目标清晰。\n \n在这一阶段通常我们也要向客户展示我们的技术实力，让客户坚定选择我们的决策是正确的。采取的方式可以有针对项目相关技术的演讲或者演示。总的来说，最好把第一次拜访控制在一个小时左右，这样我们一方面得到了相关的项目知识，另一方面，为下一次会面向客户展示具体的项目相关技术实力提供了机会。\n \n在有了项目业务需求和痛点之后，我们需要修正自己之前的想法和设计，根据最新的情况进行总结，并且最好得到客户的确认。\n \n接着，根据这些信息，我们就可以着手进行**技术架构的设计以及风险的评估**，为后续的拜访明确目标，使会议更高效。之后的拜访或者会议都是一步一步的细化过程，包括确定是用什么技术栈，什么架构，客户如何与我们交付团队合作等等。不过我们需要控制每次会议以及为项目准备时间的投入，以及这一阶段持续的时间。因为持续时间长不仅会让客户感觉我们不专业，也会暗示我们不理解项目。再说，如果项目最后没有谈成，也是对于公司资源的浪费。\n \n###第三步：合同形式\n \n上面我们说的都是技术方面的，售前阶段有很重要的一点是需要了解**客户想以什么样的方式和我们签合同**。因为咨询和交付项目的工作方式以及交付物都是不一样的，如果我们以交付项目的形式签订合同，而以咨询的形式工作，那在项目结束时，我们会面临如何验收，如何提供交付物的问题。这也很有可能让客户在工作验收和领导汇报时陷入被动，因为实际完成的和合同上签署的内容是不一致的。\n \n如果我们能够顺利解决上面所说的问题，我们就可以等着进行投标等工作了。下面我们就来看看神秘的投标阶段都会有什么意想不到的问题吧。\n \n#投标阶段\n \n首先我们需要**根据标书的要求，完成相关系统的设计**。这些设计并不只是技术架构，还需要包含对于客户的理解，对于项目现状的理解，对于项目远景的理解，以及由此而产生的技术架构和实施计划。同时，我们还需要展现我们对于同一类型项目的经验和成功案例。\n \n编写标书的技术方案看起来简单，只要写命题作文就可以了。\n\n![标书的大致目录](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Proposal_Index.png)\n\n图 1.1 － 标书的大致目录\n \n但是，标书需要我们**协同配合**，尤其是需要售前同事和交付团队进行密切沟通，确保交付团队在得到客户真实意图，准确把握客户的期望和优先级的情况下，出具架构合理、充分考虑到客户需求和成本的方案。如果在投标前期给客户做过Inception，我们还需要和Inception团队全力合作，进行知识的有效传递（最好能让Inception团队来编写标书）。如果能从Inception的团队中获得例如线框图（如图1.4），用户画像，用户旅程，推荐的技术架构甚至Epic Story，对于确定项目范围和编写技术方案来说会助力很多。\n\n![线框图和用户旅程](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Wireframe.png)\n\n图 1.2 － 线框图和用户旅程\n \n###关键点一：技术栈和技术架构\n \n**在编写标书时的关键之一在于技术栈和技术架构**。在我们根据客户的需求确定这两项之后，我们还需要进行架构评审，以便集思广益，减少架构设计时引入交付风险，同时也可以更好的权衡交付压力和技术卓越。我们不仅需要考虑使用什么技术来满足客户的需求，还需要考虑客户运行项目的成本，甚至客户是否需要付出很多成本招聘到合适的运维人员等。\n\n![技术架构](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Architecture.png)\n\n图 1.3 － 技术架构\n \n###关键点二：估算工作量\n \n**确定了技术栈和技术框架之后就需要对工作量进行估算了**。在进行估算时我们不能按照特定的人员能力进行估算，而需要按照平均开发水平估算交付项目的人天，因为我们不能确定谁来进行开发。由于和客户签订合同通常是以人天为单位进行计算的，所以按照我们通常使用的以难易程度为点数进行估算也是可以的，不过最后也需要转换成人天。在估算出工作量之后还需要和售前同事权衡架构设计的精密性和交付周期。此外，对于有些客户，我们评估了工作量后，还需要和他们针对每一个功能的工作量进行PK，确定我们的工作量没有水分，因为我们更需要对项目业务和技术都有深入的了解。\n \n###关键点三：确定人员计划\n \n**编写标书的另一个关键是确定人员计划**，但是这一点依赖于前面两项。在确定了技术方案后，我们需要根据具体的技术需求，确定需要什么样的角色，例如使用什么技术的前后端开发，是否需要iOS／Android的开发，是否需要UX等；以及根据对于交付项目的工作量估算，确定这些人员上项目和下项目的时间，并且最好能留一点buffer，以应对需求变化和请假等不确定因素，同时还需要考虑到项目交付后一段时间的维护计划。项目的利润也是PM需要重点关注的，这也会影响到选什么样的人加入项目。由于我们通常并不会获得完全适合项目技术的人员参加项目，所以作为PM也得负责人员的培养，以达到项目的要求。\n\n![人员计划](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Staffing_Plan.png)\n\n图 1.4 － 人员计划\n \n此外，我们不仅需要充分考虑以上三个方面，还需要**突出我们的亮点**，使客户能更直观地了解我们的价值所在。\n \n在编写标书前我们就得**设定好心理预期**，编写标书，尤其是第一次编写标书时，通常都会有很多地方都要修改很多遍。虽然修改很累很繁琐，但是只有做好了这一步，才能让后续工作更顺利。\n \n##讲标阶段\n \n投标不仅包含编写标书，还包括讲标的环节。两者中间实际上还有“投标”这一活动，但是一般是由特定的同事去投标的，所以作为PM和技术人员，通常在这一阶段更关注于投标之后的讲标。\n \n顾名思义，讲标就是在客户现场把投递的标书讲一遍。但实际上前后的准备工作都很多。\n \n首先，我们要**准备讲标标书**。大家会觉得奇怪，刚才不是写好标书都投了吗？还写什么讲标标书啊？其实一般投标的纸质版标书会有150～200页的内容，而讲标时间通常都是半小时，再加上15分钟左右的问答，所以在30分钟内不可能讲完标书上的所有内容，因此我们需要对标书进行精简，并且多以图表和图片的形式进行展示。这一过程也会和编写标书一样会修改很多次。\n \n其次，还需要进行讲**标的演练**。需要有人模仿客户，提出各种问题和挑战，让讲标的同学尽可能做好应对各种不同的听众和情况，随机应变，使整个讲标过程在控制中。同样演练也会进行多次，以使演讲技巧和临场能力得到锻炼。\n \n再次，在正式讲标前，我们需要准备好电脑电源，翻页笔，显示器转接头，装有讲标文件的优盘，各种格式的讲标文件（Keynote、PPT、PDF等）等设备和资料，**避免任何出错的可能**。并且我们需要提前到场，如果离客户远一定要留好充足的时间，避免迟到而影响讲标效果。\n \n最后，在讲标时，我们只要**控制好节奏，把握好时间**，按照演练的内容正常发挥就可以了。\n \n在投标和讲标之后是商务谈判和签订合同等活动，由于一般大家都不会接触（其实是本人并没有接触到），所以就略过啦。\n \n等前期准备都完成了，就可以开始正式的交付阶段了。\n \n#交付阶段\n \n在交付阶段作为PM关注的点很多，所以分为几个方面来说。\n \n###在这一阶段，我们还需要和客户沟通了解以下方面：\n \n1. **了解客户项目的上线流程**：比如上线是否需要申请域名，是否有上线前的测试和安全检查等，内部工作流程和规范（需要使用的各种工具，以及是否每次会议结束后都需要发送会议纪要等），文档和报告（日报，周报以及项目交付时需要提供的诸如用户手册、维护指南等文档）。\n \n2. **了解客户如何定义项目成功**：因为对于客户的业务部门、技术部门和我们交付团队，成功的定义并不一样，但是需要我们了解这些不一致，然后相互协调相互妥协，尽量让各方都满意，使项目在交付后每一方都认为项目成功了。\n \n3. **为客户提供统一的接口人**：这并不是说交付团队只有PM和客户沟通而是说不同类型的事物至少客户可以找同一个人解决问题，而不是每次遇到问题，都是需要通过询问才能找到合适的人解决，甚至没有人负责解决问题。例如对于项目管理和人员安排，客户可以找PM；而对于技术架构和实现方面的问题，可以找Tech Lead。\n \n除了了解上述方面，对于客户，尤其是业务部门，通常来说对于交付团队来说都很不放心，**担心进度和实现效果**。特别是对于第一次合作的团队来说更是如此。那我们能怎么样改变这种情况呢？\n\n- 首先我们可以通过每天的站会让客户了解我们工作的内容，也便于我们快速解决问题。不过我们需要控制站会的形式，不能把站会变成向汇报或者进行提问的方式。\n\n- 其次我们可以通过故事墙（物理和电子的）让客户实时看到项目的进展和项目的状态，让他们觉得项目可控。\n\n- 再次是需要适时而且适度向客户寻求解决问题。这样可以让客户更有参与感和成就感，不过需要控制好度。尽量避免交付团队自己开小会，让客户觉得自己被排除在团队之外。\n \n其实，**最关键的还是我们开发的软件**。不仅是客户，交付团队也是看到了实际的产品之后，才会对项目进度和质量更有信心。\n \n###对于我们自己团队来说，需要注意以下几点：\n \n1. 和很多公司不同，我们开始交付之后，并不是一上来就直接开发功能，而是会有**迭代0**的环节，包括交付范围的细化，迭代1的故事卡分析，制定发布计划，进行基础设施的搭建，验证技术可行性等任务。这可以让我们在项目伊始就尽量排除、发现和识别架构和框架以及技术可行性上的问题，迅速进行调整。\n \n2. 我们还需要**和客户建立良好的关系**，让他们意识到我们是在为同一个目标而努力，需要通力合作才能达到那个目标，所以各方需要相互配合与磨合。\n \n3. **在坚持底线和原则的基础上适当妥协，尽量保证客户的满意度**。但是在无法满足或者对于项目进度、质量、人员、成本以及和客户的关系有影响的方面，需要及时和交付保障的同事进行沟通和商量，尽量在萌芽阶段解决问题。\n \n4. **关注并管理客户的期望**。如果项目开发慢了，要及时向客户解释原因，并提供解决方案以及寻求帮助；如果交付快了，不仅需要介绍我们通过何种努力才能加快进度，同时需要介绍可能存在的问题以及可以改进的内容。\n \n5. 在开发过程中**控制好项目的节奏**，不能让团队一直加班或者没有事做，而需要让工作有节奏。对于客户可能提出的996（9点上班，9点下班，每周工作6天）的工作模式，一定要断然拒绝，因为我们希望的是可持续的高效开发，而不是短期的突击。当然这不包括上线前可能会需要加班的突发情况。\n \n6. 为了更好的合作，我们还需要在项目开始就和所有团队成员达成一致，**定义内部工作流程，以及内部沟通机制**，例如微信群和邮件群等。不过需要注意使用的频率，减少客户对于进度的担忧。此外对于和客户的沟通，我们也需要制定沟通计划，例如如何与客户确定需求等内容，什么时候给客户进行演示，以及客户有问题该怎么和团队沟通，以保证既能解决问题，又不会影响团队交付进度。\n \n7. 我们合作的很多客户对于**文档**都是有不少要求的，所以在开发过程中，由于交付压力，客户有可能允许我们延期提交相应的文档，例如设计文档等，但是我们还需要保留好原始材料，等客户需要这些文档时，我们可以通过这些材料快速生成相应的内容，而不是重新做起。\n \n###对于PM来说还有哪些职责呢？\n \n1. PM还需要适当**屏蔽干扰**，让团队能集中精力工作，例如尽量减少不相关会议的打扰，以及回答客户随时提问技术细节等情况；同时需要避免压力过多传递到团队成员，例如客户对于需求或者架构的大改变，从而有可能对项目交付进度产生很大压力，PM需要先过滤这些信息，等改变明确后再告知整个团队，这样可以避免传递不确定的信息，避免造成军心不稳的情况。\n \n2. PM还需要**关注团队成员的精神状态**，用积极的方式影响团队，提高团队士气；同时还要负责好后勤工作，例如开发所需要的各种资源的协调，办公用品等，以及Team Building这些活动。\n \n3. 交付团队还需要不时给客户一定的**震撼和影响**，以使客户对我们更信任。例如采用客户并没有用过的利用画图的方式展示架构图；\n\n![用画图的形式展示架构图](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Architecture_Map.png)\n\n图 1.5 － 用画图的形式展示架构图\n \n以及，可以用美纹胶带来装饰物力墙，而不是在白板上手动画上歪歪扭扭的线；\n\n![用美纹胶带来装饰物力墙](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Story_Wall.jpg)\n\n图 1.6 － 用美纹胶带来装饰物力墙\n\n也可以是针对技术问题的在白板上边画边讲的讨论等。\n \n4. 如果在客户现场工作，客户一般会希望通过学习我们的工作方式提高自己员工的能力，所以我们也可以考虑在不影响进度的情况下，**传播一些项目实践**，例如举行公开的回顾会议等。\n \n5. 在客户现场工作需要注意客户的**网络速度和质量**是否会影响到我们的工作效率。如果发现了问题，一定要尽早解决，尤其是安装开发和生产环境的任务对于网络要求会很高。\n \n虽然现在我经历的第一个国内交付项目还正在如火如荼地进行，但是并不妨碍我畅想一下交付之后的情形。\n \n#交付之后\n \n在项目完成以后，我们还会维护一段时间。这段时间只会就现有的代码问题进行修复，并不会进行功能开发。\n \n对于PM来说，\n \n1. PM需要发送**上线邮件**，让团队成员有成就感和荣誉感，也让更多人知道自己项目是做什么的。\n \n2. PM还需要负责**项目总结**，不仅总结成功的经验，还需要分析出现的问题以及如何避免，让更多的人少走弯路。\n \n3. 最后少不了的就是**团队的庆祝**了，无论是买蛋糕庆祝还是别的活动，团队都需要被激励和感谢。\n \n之后，大家又可以准备投入到新的项目中啦：）。\n\n***以上的总结更多的是从个人的经验出发，难免会有不足，希望这边文章能使大家在看的时候想到自己遗漏的一些内容，更好更完善地进行项目管理。也欢迎大家的指正。***","slug":"Domestic_Project_Manager","published":1,"updated":"2017-07-09T23:33:12.000Z","_id":"cip3kko0a0000apfycj7skt1s","layout":"post","photos":[],"link":"","content":"<p><strong><em>长期以来一直做国外的交付项目，对于国内的项目总是很怵，因为总觉得做国内项目就需要像电视剧中一样边谈项目边喝酒应酬，而且还天天加班，所以一直以来没有机会也没有勇气接近国内项目。</em></strong></p>\n<p><strong><em>但是，机缘巧合，最近在国内项目上摸爬滚打了一段时间，感觉可以把自己的经历和经验记录下来，跟大家分享一下。</em></strong></p>\n<p>也许大家接触的都是国内客户，但是不同的客户会有自己独特的风格，在下文中我会按照交付项目开展的时间顺序为大家介绍它们通用的和特有的问题及经历。</p>\n<h1 id=\"售前阶段\">售前阶段</h1><p>在正式开始项目前，我们需要对<strong>项目管理的“金三角”（时间、范围和成本）</strong>有明确的认识。但是在售前阶段这些问题的答案都很模糊，需要我们逐步分析和确认。</p>\n<p>一般会通过以下三个步骤来解决。</p>\n<h3 id=\"第一步：了解背景\">第一步：了解背景</h3><p>我们首先需要做的是<strong>找到这个项目机会的来源</strong>，也就向销售的同事获取尽可能多的信息，例如这个机会是哪个客户给的，他／她在客户组织架构中的位置是什么样的，他／她对我们有什么样的建议和想法，这个机会所在部门的背景情况和重视程度，这个项目现在遇到的问题和以后有可能遇到的问题，我们去谈需求时需要联系谁，联系方式是什么。</p>\n<p>拿到了这些消息后，我们还可以利用现有的信息，在公司内部找和客户同一部门或者类似部门打过交道的同事<strong>了解更多的背景和技术知识</strong>，尽可能找一个在同一客户下工作过，最好是客户熟知并且对客户有影响力的同事，在洽谈需求时能一起参加，这不仅会让我们更有底气，能更准确地了解客户需求，也会让客户增加更加信任。</p>\n<p>这些信息我们最好能够记录并保存下来，而且需要系统性地整理这些信息及注意事项。</p>\n<p>在这一阶段我们了解的更多都是全局的内容，而在项目中我们往往忽视了从全局观出发，如何能更好地解决问题。</p>\n<h3 id=\"第二步：拜访客户\">第二步：拜访客户</h3><p>有了这些信息，下一步就是<strong>和客户约好时间，进行拜访</strong>。</p>\n<p>第一次进行客户拜访，通常双方需要先进行相互介绍，我们一般也会派出项目的PM和Tech Lead参与拜访，拜访的内容主要是<strong>了解需求</strong>。但是第一次谈需求，我们需要注意更多从业务和价值角度切入，而不要陷入技术细节。这时我们往往会发现自己之前设想的和客户描述出来的差别很大。但是我们要注意，不要过于坚持自己的想法，而需要根据客户的描述，通过自己的问题一步一步地引导客户说出他们的痛点和期望，从而能使项目的目标清晰。</p>\n<p>在这一阶段通常我们也要向客户展示我们的技术实力，让客户坚定选择我们的决策是正确的。采取的方式可以有针对项目相关技术的演讲或者演示。总的来说，最好把第一次拜访控制在一个小时左右，这样我们一方面得到了相关的项目知识，另一方面，为下一次会面向客户展示具体的项目相关技术实力提供了机会。</p>\n<p>在有了项目业务需求和痛点之后，我们需要修正自己之前的想法和设计，根据最新的情况进行总结，并且最好得到客户的确认。</p>\n<p>接着，根据这些信息，我们就可以着手进行<strong>技术架构的设计以及风险的评估</strong>，为后续的拜访明确目标，使会议更高效。之后的拜访或者会议都是一步一步的细化过程，包括确定是用什么技术栈，什么架构，客户如何与我们交付团队合作等等。不过我们需要控制每次会议以及为项目准备时间的投入，以及这一阶段持续的时间。因为持续时间长不仅会让客户感觉我们不专业，也会暗示我们不理解项目。再说，如果项目最后没有谈成，也是对于公司资源的浪费。</p>\n<h3 id=\"第三步：合同形式\">第三步：合同形式</h3><p>上面我们说的都是技术方面的，售前阶段有很重要的一点是需要了解<strong>客户想以什么样的方式和我们签合同</strong>。因为咨询和交付项目的工作方式以及交付物都是不一样的，如果我们以交付项目的形式签订合同，而以咨询的形式工作，那在项目结束时，我们会面临如何验收，如何提供交付物的问题。这也很有可能让客户在工作验收和领导汇报时陷入被动，因为实际完成的和合同上签署的内容是不一致的。</p>\n<p>如果我们能够顺利解决上面所说的问题，我们就可以等着进行投标等工作了。下面我们就来看看神秘的投标阶段都会有什么意想不到的问题吧。</p>\n<h1 id=\"投标阶段\">投标阶段</h1><p>首先我们需要<strong>根据标书的要求，完成相关系统的设计</strong>。这些设计并不只是技术架构，还需要包含对于客户的理解，对于项目现状的理解，对于项目远景的理解，以及由此而产生的技术架构和实施计划。同时，我们还需要展现我们对于同一类型项目的经验和成功案例。</p>\n<p>编写标书的技术方案看起来简单，只要写命题作文就可以了。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Proposal_Index.png\" alt=\"标书的大致目录\"></p>\n<p>图 1.1 － 标书的大致目录</p>\n<p>但是，标书需要我们<strong>协同配合</strong>，尤其是需要售前同事和交付团队进行密切沟通，确保交付团队在得到客户真实意图，准确把握客户的期望和优先级的情况下，出具架构合理、充分考虑到客户需求和成本的方案。如果在投标前期给客户做过Inception，我们还需要和Inception团队全力合作，进行知识的有效传递（最好能让Inception团队来编写标书）。如果能从Inception的团队中获得例如线框图（如图1.4），用户画像，用户旅程，推荐的技术架构甚至Epic Story，对于确定项目范围和编写技术方案来说会助力很多。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Wireframe.png\" alt=\"线框图和用户旅程\"></p>\n<p>图 1.2 － 线框图和用户旅程</p>\n<h3 id=\"关键点一：技术栈和技术架构\">关键点一：技术栈和技术架构</h3><p><strong>在编写标书时的关键之一在于技术栈和技术架构</strong>。在我们根据客户的需求确定这两项之后，我们还需要进行架构评审，以便集思广益，减少架构设计时引入交付风险，同时也可以更好的权衡交付压力和技术卓越。我们不仅需要考虑使用什么技术来满足客户的需求，还需要考虑客户运行项目的成本，甚至客户是否需要付出很多成本招聘到合适的运维人员等。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Architecture.png\" alt=\"技术架构\"></p>\n<p>图 1.3 － 技术架构</p>\n<h3 id=\"关键点二：估算工作量\">关键点二：估算工作量</h3><p><strong>确定了技术栈和技术框架之后就需要对工作量进行估算了</strong>。在进行估算时我们不能按照特定的人员能力进行估算，而需要按照平均开发水平估算交付项目的人天，因为我们不能确定谁来进行开发。由于和客户签订合同通常是以人天为单位进行计算的，所以按照我们通常使用的以难易程度为点数进行估算也是可以的，不过最后也需要转换成人天。在估算出工作量之后还需要和售前同事权衡架构设计的精密性和交付周期。此外，对于有些客户，我们评估了工作量后，还需要和他们针对每一个功能的工作量进行PK，确定我们的工作量没有水分，因为我们更需要对项目业务和技术都有深入的了解。</p>\n<h3 id=\"关键点三：确定人员计划\">关键点三：确定人员计划</h3><p><strong>编写标书的另一个关键是确定人员计划</strong>，但是这一点依赖于前面两项。在确定了技术方案后，我们需要根据具体的技术需求，确定需要什么样的角色，例如使用什么技术的前后端开发，是否需要iOS／Android的开发，是否需要UX等；以及根据对于交付项目的工作量估算，确定这些人员上项目和下项目的时间，并且最好能留一点buffer，以应对需求变化和请假等不确定因素，同时还需要考虑到项目交付后一段时间的维护计划。项目的利润也是PM需要重点关注的，这也会影响到选什么样的人加入项目。由于我们通常并不会获得完全适合项目技术的人员参加项目，所以作为PM也得负责人员的培养，以达到项目的要求。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Staffing_Plan.png\" alt=\"人员计划\"></p>\n<p>图 1.4 － 人员计划</p>\n<p>此外，我们不仅需要充分考虑以上三个方面，还需要<strong>突出我们的亮点</strong>，使客户能更直观地了解我们的价值所在。</p>\n<p>在编写标书前我们就得<strong>设定好心理预期</strong>，编写标书，尤其是第一次编写标书时，通常都会有很多地方都要修改很多遍。虽然修改很累很繁琐，但是只有做好了这一步，才能让后续工作更顺利。</p>\n<h2 id=\"讲标阶段\">讲标阶段</h2><p>投标不仅包含编写标书，还包括讲标的环节。两者中间实际上还有“投标”这一活动，但是一般是由特定的同事去投标的，所以作为PM和技术人员，通常在这一阶段更关注于投标之后的讲标。</p>\n<p>顾名思义，讲标就是在客户现场把投递的标书讲一遍。但实际上前后的准备工作都很多。</p>\n<p>首先，我们要<strong>准备讲标标书</strong>。大家会觉得奇怪，刚才不是写好标书都投了吗？还写什么讲标标书啊？其实一般投标的纸质版标书会有150～200页的内容，而讲标时间通常都是半小时，再加上15分钟左右的问答，所以在30分钟内不可能讲完标书上的所有内容，因此我们需要对标书进行精简，并且多以图表和图片的形式进行展示。这一过程也会和编写标书一样会修改很多次。</p>\n<p>其次，还需要进行讲<strong>标的演练</strong>。需要有人模仿客户，提出各种问题和挑战，让讲标的同学尽可能做好应对各种不同的听众和情况，随机应变，使整个讲标过程在控制中。同样演练也会进行多次，以使演讲技巧和临场能力得到锻炼。</p>\n<p>再次，在正式讲标前，我们需要准备好电脑电源，翻页笔，显示器转接头，装有讲标文件的优盘，各种格式的讲标文件（Keynote、PPT、PDF等）等设备和资料，<strong>避免任何出错的可能</strong>。并且我们需要提前到场，如果离客户远一定要留好充足的时间，避免迟到而影响讲标效果。</p>\n<p>最后，在讲标时，我们只要<strong>控制好节奏，把握好时间</strong>，按照演练的内容正常发挥就可以了。</p>\n<p>在投标和讲标之后是商务谈判和签订合同等活动，由于一般大家都不会接触（其实是本人并没有接触到），所以就略过啦。</p>\n<p>等前期准备都完成了，就可以开始正式的交付阶段了。</p>\n<h1 id=\"交付阶段\">交付阶段</h1><p>在交付阶段作为PM关注的点很多，所以分为几个方面来说。</p>\n<h3 id=\"在这一阶段，我们还需要和客户沟通了解以下方面：\">在这一阶段，我们还需要和客户沟通了解以下方面：</h3><ol>\n<li><p><strong>了解客户项目的上线流程</strong>：比如上线是否需要申请域名，是否有上线前的测试和安全检查等，内部工作流程和规范（需要使用的各种工具，以及是否每次会议结束后都需要发送会议纪要等），文档和报告（日报，周报以及项目交付时需要提供的诸如用户手册、维护指南等文档）。</p>\n</li>\n<li><p><strong>了解客户如何定义项目成功</strong>：因为对于客户的业务部门、技术部门和我们交付团队，成功的定义并不一样，但是需要我们了解这些不一致，然后相互协调相互妥协，尽量让各方都满意，使项目在交付后每一方都认为项目成功了。</p>\n</li>\n<li><p><strong>为客户提供统一的接口人</strong>：这并不是说交付团队只有PM和客户沟通而是说不同类型的事物至少客户可以找同一个人解决问题，而不是每次遇到问题，都是需要通过询问才能找到合适的人解决，甚至没有人负责解决问题。例如对于项目管理和人员安排，客户可以找PM；而对于技术架构和实现方面的问题，可以找Tech Lead。</p>\n</li>\n</ol>\n<p>除了了解上述方面，对于客户，尤其是业务部门，通常来说对于交付团队来说都很不放心，<strong>担心进度和实现效果</strong>。特别是对于第一次合作的团队来说更是如此。那我们能怎么样改变这种情况呢？</p>\n<ul>\n<li><p>首先我们可以通过每天的站会让客户了解我们工作的内容，也便于我们快速解决问题。不过我们需要控制站会的形式，不能把站会变成向汇报或者进行提问的方式。</p>\n</li>\n<li><p>其次我们可以通过故事墙（物理和电子的）让客户实时看到项目的进展和项目的状态，让他们觉得项目可控。</p>\n</li>\n<li><p>再次是需要适时而且适度向客户寻求解决问题。这样可以让客户更有参与感和成就感，不过需要控制好度。尽量避免交付团队自己开小会，让客户觉得自己被排除在团队之外。</p>\n</li>\n</ul>\n<p>其实，<strong>最关键的还是我们开发的软件</strong>。不仅是客户，交付团队也是看到了实际的产品之后，才会对项目进度和质量更有信心。</p>\n<h3 id=\"对于我们自己团队来说，需要注意以下几点：\">对于我们自己团队来说，需要注意以下几点：</h3><ol>\n<li><p>和很多公司不同，我们开始交付之后，并不是一上来就直接开发功能，而是会有<strong>迭代0</strong>的环节，包括交付范围的细化，迭代1的故事卡分析，制定发布计划，进行基础设施的搭建，验证技术可行性等任务。这可以让我们在项目伊始就尽量排除、发现和识别架构和框架以及技术可行性上的问题，迅速进行调整。</p>\n</li>\n<li><p>我们还需要<strong>和客户建立良好的关系</strong>，让他们意识到我们是在为同一个目标而努力，需要通力合作才能达到那个目标，所以各方需要相互配合与磨合。</p>\n</li>\n<li><p><strong>在坚持底线和原则的基础上适当妥协，尽量保证客户的满意度</strong>。但是在无法满足或者对于项目进度、质量、人员、成本以及和客户的关系有影响的方面，需要及时和交付保障的同事进行沟通和商量，尽量在萌芽阶段解决问题。</p>\n</li>\n<li><p><strong>关注并管理客户的期望</strong>。如果项目开发慢了，要及时向客户解释原因，并提供解决方案以及寻求帮助；如果交付快了，不仅需要介绍我们通过何种努力才能加快进度，同时需要介绍可能存在的问题以及可以改进的内容。</p>\n</li>\n<li><p>在开发过程中<strong>控制好项目的节奏</strong>，不能让团队一直加班或者没有事做，而需要让工作有节奏。对于客户可能提出的996（9点上班，9点下班，每周工作6天）的工作模式，一定要断然拒绝，因为我们希望的是可持续的高效开发，而不是短期的突击。当然这不包括上线前可能会需要加班的突发情况。</p>\n</li>\n<li><p>为了更好的合作，我们还需要在项目开始就和所有团队成员达成一致，<strong>定义内部工作流程，以及内部沟通机制</strong>，例如微信群和邮件群等。不过需要注意使用的频率，减少客户对于进度的担忧。此外对于和客户的沟通，我们也需要制定沟通计划，例如如何与客户确定需求等内容，什么时候给客户进行演示，以及客户有问题该怎么和团队沟通，以保证既能解决问题，又不会影响团队交付进度。</p>\n</li>\n<li><p>我们合作的很多客户对于<strong>文档</strong>都是有不少要求的，所以在开发过程中，由于交付压力，客户有可能允许我们延期提交相应的文档，例如设计文档等，但是我们还需要保留好原始材料，等客户需要这些文档时，我们可以通过这些材料快速生成相应的内容，而不是重新做起。</p>\n</li>\n</ol>\n<h3 id=\"对于PM来说还有哪些职责呢？\">对于PM来说还有哪些职责呢？</h3><ol>\n<li><p>PM还需要适当<strong>屏蔽干扰</strong>，让团队能集中精力工作，例如尽量减少不相关会议的打扰，以及回答客户随时提问技术细节等情况；同时需要避免压力过多传递到团队成员，例如客户对于需求或者架构的大改变，从而有可能对项目交付进度产生很大压力，PM需要先过滤这些信息，等改变明确后再告知整个团队，这样可以避免传递不确定的信息，避免造成军心不稳的情况。</p>\n</li>\n<li><p>PM还需要<strong>关注团队成员的精神状态</strong>，用积极的方式影响团队，提高团队士气；同时还要负责好后勤工作，例如开发所需要的各种资源的协调，办公用品等，以及Team Building这些活动。</p>\n</li>\n<li><p>交付团队还需要不时给客户一定的<strong>震撼和影响</strong>，以使客户对我们更信任。例如采用客户并没有用过的利用画图的方式展示架构图；</p>\n</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Architecture_Map.png\" alt=\"用画图的形式展示架构图\"></p>\n<p>图 1.5 － 用画图的形式展示架构图</p>\n<p>以及，可以用美纹胶带来装饰物力墙，而不是在白板上手动画上歪歪扭扭的线；</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Story_Wall.jpg\" alt=\"用美纹胶带来装饰物力墙\"></p>\n<p>图 1.6 － 用美纹胶带来装饰物力墙</p>\n<p>也可以是针对技术问题的在白板上边画边讲的讨论等。</p>\n<ol>\n<li><p>如果在客户现场工作，客户一般会希望通过学习我们的工作方式提高自己员工的能力，所以我们也可以考虑在不影响进度的情况下，<strong>传播一些项目实践</strong>，例如举行公开的回顾会议等。</p>\n</li>\n<li><p>在客户现场工作需要注意客户的<strong>网络速度和质量</strong>是否会影响到我们的工作效率。如果发现了问题，一定要尽早解决，尤其是安装开发和生产环境的任务对于网络要求会很高。</p>\n</li>\n</ol>\n<p>虽然现在我经历的第一个国内交付项目还正在如火如荼地进行，但是并不妨碍我畅想一下交付之后的情形。</p>\n<h1 id=\"交付之后\">交付之后</h1><p>在项目完成以后，我们还会维护一段时间。这段时间只会就现有的代码问题进行修复，并不会进行功能开发。</p>\n<p>对于PM来说，</p>\n<ol>\n<li><p>PM需要发送<strong>上线邮件</strong>，让团队成员有成就感和荣誉感，也让更多人知道自己项目是做什么的。</p>\n</li>\n<li><p>PM还需要负责<strong>项目总结</strong>，不仅总结成功的经验，还需要分析出现的问题以及如何避免，让更多的人少走弯路。</p>\n</li>\n<li><p>最后少不了的就是<strong>团队的庆祝</strong>了，无论是买蛋糕庆祝还是别的活动，团队都需要被激励和感谢。</p>\n</li>\n</ol>\n<p>之后，大家又可以准备投入到新的项目中啦：）。</p>\n<p><strong><em>以上的总结更多的是从个人的经验出发，难免会有不足，希望这边文章能使大家在看的时候想到自己遗漏的一些内容，更好更完善地进行项目管理。也欢迎大家的指正。</em></strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong><em>长期以来一直做国外的交付项目，对于国内的项目总是很怵，因为总觉得做国内项目就需要像电视剧中一样边谈项目边喝酒应酬，而且还天天加班，所以一直以来没有机会也没有勇气接近国内项目。</em></strong></p>\n<p><strong><em>但是，机缘巧合，最近在国内项目上摸爬滚打了一段时间，感觉可以把自己的经历和经验记录下来，跟大家分享一下。</em></strong></p>\n<p>也许大家接触的都是国内客户，但是不同的客户会有自己独特的风格，在下文中我会按照交付项目开展的时间顺序为大家介绍它们通用的和特有的问题及经历。</p>\n<h1 id=\"售前阶段\">售前阶段</h1><p>在正式开始项目前，我们需要对<strong>项目管理的“金三角”（时间、范围和成本）</strong>有明确的认识。但是在售前阶段这些问题的答案都很模糊，需要我们逐步分析和确认。</p>\n<p>一般会通过以下三个步骤来解决。</p>\n<h3 id=\"第一步：了解背景\">第一步：了解背景</h3><p>我们首先需要做的是<strong>找到这个项目机会的来源</strong>，也就向销售的同事获取尽可能多的信息，例如这个机会是哪个客户给的，他／她在客户组织架构中的位置是什么样的，他／她对我们有什么样的建议和想法，这个机会所在部门的背景情况和重视程度，这个项目现在遇到的问题和以后有可能遇到的问题，我们去谈需求时需要联系谁，联系方式是什么。</p>\n<p>拿到了这些消息后，我们还可以利用现有的信息，在公司内部找和客户同一部门或者类似部门打过交道的同事<strong>了解更多的背景和技术知识</strong>，尽可能找一个在同一客户下工作过，最好是客户熟知并且对客户有影响力的同事，在洽谈需求时能一起参加，这不仅会让我们更有底气，能更准确地了解客户需求，也会让客户增加更加信任。</p>\n<p>这些信息我们最好能够记录并保存下来，而且需要系统性地整理这些信息及注意事项。</p>\n<p>在这一阶段我们了解的更多都是全局的内容，而在项目中我们往往忽视了从全局观出发，如何能更好地解决问题。</p>\n<h3 id=\"第二步：拜访客户\">第二步：拜访客户</h3><p>有了这些信息，下一步就是<strong>和客户约好时间，进行拜访</strong>。</p>\n<p>第一次进行客户拜访，通常双方需要先进行相互介绍，我们一般也会派出项目的PM和Tech Lead参与拜访，拜访的内容主要是<strong>了解需求</strong>。但是第一次谈需求，我们需要注意更多从业务和价值角度切入，而不要陷入技术细节。这时我们往往会发现自己之前设想的和客户描述出来的差别很大。但是我们要注意，不要过于坚持自己的想法，而需要根据客户的描述，通过自己的问题一步一步地引导客户说出他们的痛点和期望，从而能使项目的目标清晰。</p>\n<p>在这一阶段通常我们也要向客户展示我们的技术实力，让客户坚定选择我们的决策是正确的。采取的方式可以有针对项目相关技术的演讲或者演示。总的来说，最好把第一次拜访控制在一个小时左右，这样我们一方面得到了相关的项目知识，另一方面，为下一次会面向客户展示具体的项目相关技术实力提供了机会。</p>\n<p>在有了项目业务需求和痛点之后，我们需要修正自己之前的想法和设计，根据最新的情况进行总结，并且最好得到客户的确认。</p>\n<p>接着，根据这些信息，我们就可以着手进行<strong>技术架构的设计以及风险的评估</strong>，为后续的拜访明确目标，使会议更高效。之后的拜访或者会议都是一步一步的细化过程，包括确定是用什么技术栈，什么架构，客户如何与我们交付团队合作等等。不过我们需要控制每次会议以及为项目准备时间的投入，以及这一阶段持续的时间。因为持续时间长不仅会让客户感觉我们不专业，也会暗示我们不理解项目。再说，如果项目最后没有谈成，也是对于公司资源的浪费。</p>\n<h3 id=\"第三步：合同形式\">第三步：合同形式</h3><p>上面我们说的都是技术方面的，售前阶段有很重要的一点是需要了解<strong>客户想以什么样的方式和我们签合同</strong>。因为咨询和交付项目的工作方式以及交付物都是不一样的，如果我们以交付项目的形式签订合同，而以咨询的形式工作，那在项目结束时，我们会面临如何验收，如何提供交付物的问题。这也很有可能让客户在工作验收和领导汇报时陷入被动，因为实际完成的和合同上签署的内容是不一致的。</p>\n<p>如果我们能够顺利解决上面所说的问题，我们就可以等着进行投标等工作了。下面我们就来看看神秘的投标阶段都会有什么意想不到的问题吧。</p>\n<h1 id=\"投标阶段\">投标阶段</h1><p>首先我们需要<strong>根据标书的要求，完成相关系统的设计</strong>。这些设计并不只是技术架构，还需要包含对于客户的理解，对于项目现状的理解，对于项目远景的理解，以及由此而产生的技术架构和实施计划。同时，我们还需要展现我们对于同一类型项目的经验和成功案例。</p>\n<p>编写标书的技术方案看起来简单，只要写命题作文就可以了。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Proposal_Index.png\" alt=\"标书的大致目录\"></p>\n<p>图 1.1 － 标书的大致目录</p>\n<p>但是，标书需要我们<strong>协同配合</strong>，尤其是需要售前同事和交付团队进行密切沟通，确保交付团队在得到客户真实意图，准确把握客户的期望和优先级的情况下，出具架构合理、充分考虑到客户需求和成本的方案。如果在投标前期给客户做过Inception，我们还需要和Inception团队全力合作，进行知识的有效传递（最好能让Inception团队来编写标书）。如果能从Inception的团队中获得例如线框图（如图1.4），用户画像，用户旅程，推荐的技术架构甚至Epic Story，对于确定项目范围和编写技术方案来说会助力很多。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Wireframe.png\" alt=\"线框图和用户旅程\"></p>\n<p>图 1.2 － 线框图和用户旅程</p>\n<h3 id=\"关键点一：技术栈和技术架构\">关键点一：技术栈和技术架构</h3><p><strong>在编写标书时的关键之一在于技术栈和技术架构</strong>。在我们根据客户的需求确定这两项之后，我们还需要进行架构评审，以便集思广益，减少架构设计时引入交付风险，同时也可以更好的权衡交付压力和技术卓越。我们不仅需要考虑使用什么技术来满足客户的需求，还需要考虑客户运行项目的成本，甚至客户是否需要付出很多成本招聘到合适的运维人员等。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Architecture.png\" alt=\"技术架构\"></p>\n<p>图 1.3 － 技术架构</p>\n<h3 id=\"关键点二：估算工作量\">关键点二：估算工作量</h3><p><strong>确定了技术栈和技术框架之后就需要对工作量进行估算了</strong>。在进行估算时我们不能按照特定的人员能力进行估算，而需要按照平均开发水平估算交付项目的人天，因为我们不能确定谁来进行开发。由于和客户签订合同通常是以人天为单位进行计算的，所以按照我们通常使用的以难易程度为点数进行估算也是可以的，不过最后也需要转换成人天。在估算出工作量之后还需要和售前同事权衡架构设计的精密性和交付周期。此外，对于有些客户，我们评估了工作量后，还需要和他们针对每一个功能的工作量进行PK，确定我们的工作量没有水分，因为我们更需要对项目业务和技术都有深入的了解。</p>\n<h3 id=\"关键点三：确定人员计划\">关键点三：确定人员计划</h3><p><strong>编写标书的另一个关键是确定人员计划</strong>，但是这一点依赖于前面两项。在确定了技术方案后，我们需要根据具体的技术需求，确定需要什么样的角色，例如使用什么技术的前后端开发，是否需要iOS／Android的开发，是否需要UX等；以及根据对于交付项目的工作量估算，确定这些人员上项目和下项目的时间，并且最好能留一点buffer，以应对需求变化和请假等不确定因素，同时还需要考虑到项目交付后一段时间的维护计划。项目的利润也是PM需要重点关注的，这也会影响到选什么样的人加入项目。由于我们通常并不会获得完全适合项目技术的人员参加项目，所以作为PM也得负责人员的培养，以达到项目的要求。</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Staffing_Plan.png\" alt=\"人员计划\"></p>\n<p>图 1.4 － 人员计划</p>\n<p>此外，我们不仅需要充分考虑以上三个方面，还需要<strong>突出我们的亮点</strong>，使客户能更直观地了解我们的价值所在。</p>\n<p>在编写标书前我们就得<strong>设定好心理预期</strong>，编写标书，尤其是第一次编写标书时，通常都会有很多地方都要修改很多遍。虽然修改很累很繁琐，但是只有做好了这一步，才能让后续工作更顺利。</p>\n<h2 id=\"讲标阶段\">讲标阶段</h2><p>投标不仅包含编写标书，还包括讲标的环节。两者中间实际上还有“投标”这一活动，但是一般是由特定的同事去投标的，所以作为PM和技术人员，通常在这一阶段更关注于投标之后的讲标。</p>\n<p>顾名思义，讲标就是在客户现场把投递的标书讲一遍。但实际上前后的准备工作都很多。</p>\n<p>首先，我们要<strong>准备讲标标书</strong>。大家会觉得奇怪，刚才不是写好标书都投了吗？还写什么讲标标书啊？其实一般投标的纸质版标书会有150～200页的内容，而讲标时间通常都是半小时，再加上15分钟左右的问答，所以在30分钟内不可能讲完标书上的所有内容，因此我们需要对标书进行精简，并且多以图表和图片的形式进行展示。这一过程也会和编写标书一样会修改很多次。</p>\n<p>其次，还需要进行讲<strong>标的演练</strong>。需要有人模仿客户，提出各种问题和挑战，让讲标的同学尽可能做好应对各种不同的听众和情况，随机应变，使整个讲标过程在控制中。同样演练也会进行多次，以使演讲技巧和临场能力得到锻炼。</p>\n<p>再次，在正式讲标前，我们需要准备好电脑电源，翻页笔，显示器转接头，装有讲标文件的优盘，各种格式的讲标文件（Keynote、PPT、PDF等）等设备和资料，<strong>避免任何出错的可能</strong>。并且我们需要提前到场，如果离客户远一定要留好充足的时间，避免迟到而影响讲标效果。</p>\n<p>最后，在讲标时，我们只要<strong>控制好节奏，把握好时间</strong>，按照演练的内容正常发挥就可以了。</p>\n<p>在投标和讲标之后是商务谈判和签订合同等活动，由于一般大家都不会接触（其实是本人并没有接触到），所以就略过啦。</p>\n<p>等前期准备都完成了，就可以开始正式的交付阶段了。</p>\n<h1 id=\"交付阶段\">交付阶段</h1><p>在交付阶段作为PM关注的点很多，所以分为几个方面来说。</p>\n<h3 id=\"在这一阶段，我们还需要和客户沟通了解以下方面：\">在这一阶段，我们还需要和客户沟通了解以下方面：</h3><ol>\n<li><p><strong>了解客户项目的上线流程</strong>：比如上线是否需要申请域名，是否有上线前的测试和安全检查等，内部工作流程和规范（需要使用的各种工具，以及是否每次会议结束后都需要发送会议纪要等），文档和报告（日报，周报以及项目交付时需要提供的诸如用户手册、维护指南等文档）。</p>\n</li>\n<li><p><strong>了解客户如何定义项目成功</strong>：因为对于客户的业务部门、技术部门和我们交付团队，成功的定义并不一样，但是需要我们了解这些不一致，然后相互协调相互妥协，尽量让各方都满意，使项目在交付后每一方都认为项目成功了。</p>\n</li>\n<li><p><strong>为客户提供统一的接口人</strong>：这并不是说交付团队只有PM和客户沟通而是说不同类型的事物至少客户可以找同一个人解决问题，而不是每次遇到问题，都是需要通过询问才能找到合适的人解决，甚至没有人负责解决问题。例如对于项目管理和人员安排，客户可以找PM；而对于技术架构和实现方面的问题，可以找Tech Lead。</p>\n</li>\n</ol>\n<p>除了了解上述方面，对于客户，尤其是业务部门，通常来说对于交付团队来说都很不放心，<strong>担心进度和实现效果</strong>。特别是对于第一次合作的团队来说更是如此。那我们能怎么样改变这种情况呢？</p>\n<ul>\n<li><p>首先我们可以通过每天的站会让客户了解我们工作的内容，也便于我们快速解决问题。不过我们需要控制站会的形式，不能把站会变成向汇报或者进行提问的方式。</p>\n</li>\n<li><p>其次我们可以通过故事墙（物理和电子的）让客户实时看到项目的进展和项目的状态，让他们觉得项目可控。</p>\n</li>\n<li><p>再次是需要适时而且适度向客户寻求解决问题。这样可以让客户更有参与感和成就感，不过需要控制好度。尽量避免交付团队自己开小会，让客户觉得自己被排除在团队之外。</p>\n</li>\n</ul>\n<p>其实，<strong>最关键的还是我们开发的软件</strong>。不仅是客户，交付团队也是看到了实际的产品之后，才会对项目进度和质量更有信心。</p>\n<h3 id=\"对于我们自己团队来说，需要注意以下几点：\">对于我们自己团队来说，需要注意以下几点：</h3><ol>\n<li><p>和很多公司不同，我们开始交付之后，并不是一上来就直接开发功能，而是会有<strong>迭代0</strong>的环节，包括交付范围的细化，迭代1的故事卡分析，制定发布计划，进行基础设施的搭建，验证技术可行性等任务。这可以让我们在项目伊始就尽量排除、发现和识别架构和框架以及技术可行性上的问题，迅速进行调整。</p>\n</li>\n<li><p>我们还需要<strong>和客户建立良好的关系</strong>，让他们意识到我们是在为同一个目标而努力，需要通力合作才能达到那个目标，所以各方需要相互配合与磨合。</p>\n</li>\n<li><p><strong>在坚持底线和原则的基础上适当妥协，尽量保证客户的满意度</strong>。但是在无法满足或者对于项目进度、质量、人员、成本以及和客户的关系有影响的方面，需要及时和交付保障的同事进行沟通和商量，尽量在萌芽阶段解决问题。</p>\n</li>\n<li><p><strong>关注并管理客户的期望</strong>。如果项目开发慢了，要及时向客户解释原因，并提供解决方案以及寻求帮助；如果交付快了，不仅需要介绍我们通过何种努力才能加快进度，同时需要介绍可能存在的问题以及可以改进的内容。</p>\n</li>\n<li><p>在开发过程中<strong>控制好项目的节奏</strong>，不能让团队一直加班或者没有事做，而需要让工作有节奏。对于客户可能提出的996（9点上班，9点下班，每周工作6天）的工作模式，一定要断然拒绝，因为我们希望的是可持续的高效开发，而不是短期的突击。当然这不包括上线前可能会需要加班的突发情况。</p>\n</li>\n<li><p>为了更好的合作，我们还需要在项目开始就和所有团队成员达成一致，<strong>定义内部工作流程，以及内部沟通机制</strong>，例如微信群和邮件群等。不过需要注意使用的频率，减少客户对于进度的担忧。此外对于和客户的沟通，我们也需要制定沟通计划，例如如何与客户确定需求等内容，什么时候给客户进行演示，以及客户有问题该怎么和团队沟通，以保证既能解决问题，又不会影响团队交付进度。</p>\n</li>\n<li><p>我们合作的很多客户对于<strong>文档</strong>都是有不少要求的，所以在开发过程中，由于交付压力，客户有可能允许我们延期提交相应的文档，例如设计文档等，但是我们还需要保留好原始材料，等客户需要这些文档时，我们可以通过这些材料快速生成相应的内容，而不是重新做起。</p>\n</li>\n</ol>\n<h3 id=\"对于PM来说还有哪些职责呢？\">对于PM来说还有哪些职责呢？</h3><ol>\n<li><p>PM还需要适当<strong>屏蔽干扰</strong>，让团队能集中精力工作，例如尽量减少不相关会议的打扰，以及回答客户随时提问技术细节等情况；同时需要避免压力过多传递到团队成员，例如客户对于需求或者架构的大改变，从而有可能对项目交付进度产生很大压力，PM需要先过滤这些信息，等改变明确后再告知整个团队，这样可以避免传递不确定的信息，避免造成军心不稳的情况。</p>\n</li>\n<li><p>PM还需要<strong>关注团队成员的精神状态</strong>，用积极的方式影响团队，提高团队士气；同时还要负责好后勤工作，例如开发所需要的各种资源的协调，办公用品等，以及Team Building这些活动。</p>\n</li>\n<li><p>交付团队还需要不时给客户一定的<strong>震撼和影响</strong>，以使客户对我们更信任。例如采用客户并没有用过的利用画图的方式展示架构图；</p>\n</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Architecture_Map.png\" alt=\"用画图的形式展示架构图\"></p>\n<p>图 1.5 － 用画图的形式展示架构图</p>\n<p>以及，可以用美纹胶带来装饰物力墙，而不是在白板上手动画上歪歪扭扭的线；</p>\n<p><img src=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/images/Story_Wall.jpg\" alt=\"用美纹胶带来装饰物力墙\"></p>\n<p>图 1.6 － 用美纹胶带来装饰物力墙</p>\n<p>也可以是针对技术问题的在白板上边画边讲的讨论等。</p>\n<ol>\n<li><p>如果在客户现场工作，客户一般会希望通过学习我们的工作方式提高自己员工的能力，所以我们也可以考虑在不影响进度的情况下，<strong>传播一些项目实践</strong>，例如举行公开的回顾会议等。</p>\n</li>\n<li><p>在客户现场工作需要注意客户的<strong>网络速度和质量</strong>是否会影响到我们的工作效率。如果发现了问题，一定要尽早解决，尤其是安装开发和生产环境的任务对于网络要求会很高。</p>\n</li>\n</ol>\n<p>虽然现在我经历的第一个国内交付项目还正在如火如荼地进行，但是并不妨碍我畅想一下交付之后的情形。</p>\n<h1 id=\"交付之后\">交付之后</h1><p>在项目完成以后，我们还会维护一段时间。这段时间只会就现有的代码问题进行修复，并不会进行功能开发。</p>\n<p>对于PM来说，</p>\n<ol>\n<li><p>PM需要发送<strong>上线邮件</strong>，让团队成员有成就感和荣誉感，也让更多人知道自己项目是做什么的。</p>\n</li>\n<li><p>PM还需要负责<strong>项目总结</strong>，不仅总结成功的经验，还需要分析出现的问题以及如何避免，让更多的人少走弯路。</p>\n</li>\n<li><p>最后少不了的就是<strong>团队的庆祝</strong>了，无论是买蛋糕庆祝还是别的活动，团队都需要被激励和感谢。</p>\n</li>\n</ol>\n<p>之后，大家又可以准备投入到新的项目中啦：）。</p>\n<p><strong><em>以上的总结更多的是从个人的经验出发，难免会有不足，希望这边文章能使大家在看的时候想到自己遗漏的一些内容，更好更完善地进行项目管理。也欢迎大家的指正。</em></strong></p>\n"},{"title":"Quick start for appium (iOS and Android)","date":"2017-07-09T14:00:00.000Z","comments":1,"_content":"##### There are many changes compared to the early version of appium, so I would like to start from scratch to build a simple testing script for appium. For further reading about how to apply Page Object and BDD to appium, you can read my previous article [Cookbook for appium](http://hy1984427.github.io/appium/) and [BDD with PageObject](http://hy1984427.github.io/BDD-with-PageObject/).\n\n### Environment Settings:\n1. Install XCode and its command line tool.\n\n  To install XCode command line tool, you can use the following command in Terminal:\n\n  `xcode-select --install`\n\n  And download the OS versions you want to work with.\n\n2. It's better to choose Ruby to write the test script as it's easy to get familiar with. And to install/upgrade it, we can use following commands:\n\n  1) Install Homebrew\n\n   `/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"`\n\n   2) Install Ruby\n\n   `brew install ruby`\n\n3. Install appium and related gems:\n\n  ```\n  brew install libimobiledevice --HEAD\n  brew install node\n  npm install -g ios-deploy\n  sudo gem install xcpretty\n  npm install appium-doctor -g\n  npm install -g appium\n  npm install wd\n  npm install appium-xcuitest-driver\n  brew install carthage\n  gem install --no-rdoc --no-ri bundler\n  gem install --no-rdoc --no-ri appium_lib\n  gem install --no-rdoc --no-ri appium_console\n  ```\n\n4. Install JDK for Android:\n\n  Download from [Java SE Development Kit 8 - Downloads](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) and install.\n\n5. Install Android Studio from [Download Android Studio and SDK Tools | Android Studio](https://developer.android.com/studio/index.html) and download the OS version you want to work with.\n\n6. Configure the bach_profile to set environment parameters:\n\n  Edit your *`~/.bash_profile`*, if you don't have one, just create it and add following lines to it:\n\n  ```\n  export ANDROID_HOME=/Users/$your_name/Library/Android/sdk\n  export ANDROID_SDK=$ANDROID_HOME\n  PATH=$PATH:$ANDROID_HOME/build-tools\n  PATH=$PATH:$ANDROID_HOME/platform-tools\n  PATH=$PATH:$ANDROID_HOME/tools\n  export JAVA_HOME=\"`/System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java_home`\"\n  PATH=$PATH:$JAVA_HOME/bin\n  export PATH\n  ```\n\n7. Run *`appium-doctor`* in Terminal to see if everything works fine. (You need to see there are all green.)\n\n### Generate the apps to be tested:\n\n1. Download the iOS UIKit Catalog source code from [UIKitCatalog](https://developer.apple.com/library/content/samplecode/UICatalog/UIKitCatalogiOSCreatingandCustomizingUIKitControls.zip).\n\n  1) Unzip it and open the project in the Swift folder.\n\n  2) Build it in XCode by selecting the OS version you would like to test.\n\n  3) Expand the \"Products\" folder in the project structure, and select the app generated.\n\n  4) Right click it and select \"Show in Finder\", and copy the app with extension as .app to your test folder for future use.\n\n2. Download the \"TextSwitcher\" from \"Import an Android code sample\" in Android Studio welcome screen.\n\n  1) Change the \"minSdkVersion\" from 7 to 9 in \"build.gradle (Module:Application)\" and build the app.\n\n  2) Right click the root of project structure and select \"Reveal in Finder\", and copy the app with extension as .apk in \"/Users/$your_name/AndroidStudioProjects/TextSwitcher/Application/build/outputs/apk\" to your test folder for future use.\n\n### Identify elements using appium GUI:\n\n1. Download the appium GUI through their website;\n\n2. Start appium GUI after install;\n\n3. Start the server by default;\n\n4. Start a new session;\n\n5. Input all capabilities you want to use in \"Desired Capabilities\", such as:\n\n  ```\n  platformName   text   iOS\n  platformVersion   text   10.2\n  deviceName   text   iPhone 7\n  app   text /Users/$your_name/Documents/UIKitCatalog.app\n  ```\n\n  Above shows the basic capabilities you must pass to appium to run the app. (For Android, it's basically the same, unless you first activity is not MainActivity so you need to set \"appActivity\" pointed to the right one.)\n\n6. Then you can actually \"Start Session\". (For Android, you need to start your emulator before this, appium won't automatically start Android emulator like it does for iOS.)\n\n7. Wait for some time, another window would popup. In this window, you should see the app's visual and could inspect elements in it.\n\n8. Once click the element on app UI in the inspector window, you can see the properties of the element shows on the right side.\n\n  1) Try to use id to locate element as possible.\n\n  2) The \"Tap\", \"Send Keys\" and \"Clear\" button in the right \"Selected Element\" panel will simulate the corresponding action, and you will see the consequences in the app UI.\n\n  3) You can use \"Back\" on the top of this window to simulate hardware Back action, and next to it is Refresh.\n\n  4) The eye icon is very useful if you would like to record all your steps into a script. Any action after you click that icon will be recorded, until it's been clicked again.\n\n  5) You can choose the language you want to record, and you can select to show/hide the supporting code (the code to support you start and end tests rather than the test steps), copy and delete the test codes.\n\n  6) The last one on the top will close this window and entire session.\n\n9. With the inspector, you have recorded some script, or you have written your own code with the inspector to locate elements. The code should look like following:\n\n  ```\n  require 'rubygems'\n  require 'appium_lib'\n  caps = {}\n  caps[\"platformName\"] = \"iOS\"\n  caps[\"platformVersion\"] = \"10.2\"\n  caps[\"deviceName\"] = \"iPhone 7\"\n  caps[\"app\"] = \"/Users/$your_name/Documents/UIKitCatalog.app\"\n  opts = {\n  sauce_username: nil,\n  server_url: \"http://localhost:4723/wd/hub\"\n  }\n  driver = Appium::Driver.new({caps: caps, appium_lib: opts}).start_driver\n  driver.navigate.back\n  el1 = driver.find_element(:xpath, \"//XCUIElementTypeCell[14]\")\n  el1.click\n  el2 = driver.find_element(:xpath, \"//XCUIElementTypeCell[1]/XCUIElementTypeTextField\")\n  el2.send_keys \"123\"\n  el3 = driver.find_element(:xpath, \"//XCUIElementTypeCell[2]/XCUIElementTypeTextField\")\n  el3.send_keys \"456\"\n  driver.quit\n  ```\n\n  Save the script to a .sh file, such as test.sh.\n\n### Run appium test:\n\n1. Now we can run the script through the command line (Terminal).\n\n2. After we close appium GUI, we need to run appium in a Terminal tab, then open your test folder. Under the folder, run following command:\n\n    `ruby test.sh`\n\n3. You should see the simulator started and test runs.\n\n4. But we DO NOT have any assertion. Let's add some.\n\n  1) Install RSpec through\n\n  `gem install rspec`\n\n  2) Include RSpec and its matchers in the \"Require\" section\n\n  ```\n  require 'rubygems'\n  require 'appium_lib'\n  require 'rspec'\n  include RSpec::Matchers\n  ```\n\n  3) Add assertions to the test, like:\n\n  ```\n  driver.navigate.back\n  el1 = driver.find_element(:xpath, \"//XCUIElementTypeCell[14]\")\n  el1.click\n  el2 = driver.find_element(:xpath, \"//XCUIElementTypeCell[1]/XCUIElementTypeTextField\")\n  el2.send_keys \"123\"\n  el2.value.should == \"123\"\n  el3 = driver.find_element(:xpath, \"//XCUIElementTypeCell[2]/XCUIElementTypeTextField\")\n  el3.send_keys \"456\"\n  el3.value.should == \"456\"\n  ```\n\n  4) To make sure the assertions really works, we can alter like:\n\n  `el3.value.should == \"345\"`\n\n  5) And run it again, it should show following in Terminal:\n\n  ```\n  /usr/local/lib/ruby/gems/2.4.0/gems/rspec-support-3.6.0/lib/rspec/support.rb:87:in `block in <module:Support>': expected: \"345\" (RSpec::Expectations::ExpectationNotMetError)\n  got: \"456\" (using ==)\n  ```\n\n  6) Now we can revert the change, and complete the test script.\n\n  7) The final test script should looks like:\n\n  ```\n  require 'rubygems'\n  require 'appium_lib'\n  require 'rspec'\n  include RSpec::Matchers\n  caps = {}\n  caps[\"platformName\"] = \"iOS\"\n  caps[\"platformVersion\"] = \"10.2\"\n  caps[\"deviceName\"] = \"iPhone 7\"\n  caps[\"app\"] = \"/Users/yhuang/Documents/appium/UIKitCatalog.app\"\n  opts = {\n  sauce_username: nil,\n  server_url: \"http://localhost:4723/wd/hub\"\n  }\n  driver = Appium::Driver.new({caps: caps, appium_lib: opts}).start_driver\n  driver.navigate.back\n  el1 = driver.find_element(:xpath, \"//XCUIElementTypeCell[14]\")\n  el1.click\n  el2 = driver.find_element(:xpath, \"//XCUIElementTypeCell[1]/XCUIElementTypeTextField\")\n  el2.send_keys \"123\"\n  el2.value.should == \"123\"\n  el3 = driver.find_element(:xpath, \"//XCUIElementTypeCell[2]/XCUIElementTypeTextField\")\n  el3.send_keys \"456\"\n  el3.value.should == \"456\"\n  driver.quit\n  ```\n\n5. Now it's all done.\n\n### Please Note:\n\n1. This is just a sample to run test, but we actually should write it in BDD way with Page Object.\n\n2. It should also be integrated with CI.\n\n3. If you want to use Appium to test Android, I recommend you to use Genymotion rather than AVD, even you are using x86 kernel for AVD.\n\n4. You can reference to the [app](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/UIKitCatalog.app) and [script](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/UIKitCatalog.sh) for UIKitCatalog and the [app](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/AndroidCalculator.apk) and [script](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/AndroidCalculator.sh) for Android Calculator.\n","source":"_posts/Quick_Start_For_Appium_iOS_And_Android.md","raw":"title: Quick start for appium (iOS and Android)\ndate: 2017-07-10\ncategories:\n- Testing\ntags:\n- Mobile\n- Appium\n- Automation\n- iOS\n- Android\n- Get-Start\ncomments: true\n---\n##### There are many changes compared to the early version of appium, so I would like to start from scratch to build a simple testing script for appium. For further reading about how to apply Page Object and BDD to appium, you can read my previous article [Cookbook for appium](http://hy1984427.github.io/appium/) and [BDD with PageObject](http://hy1984427.github.io/BDD-with-PageObject/).\n\n### Environment Settings:\n1. Install XCode and its command line tool.\n\n  To install XCode command line tool, you can use the following command in Terminal:\n\n  `xcode-select --install`\n\n  And download the OS versions you want to work with.\n\n2. It's better to choose Ruby to write the test script as it's easy to get familiar with. And to install/upgrade it, we can use following commands:\n\n  1) Install Homebrew\n\n   `/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"`\n\n   2) Install Ruby\n\n   `brew install ruby`\n\n3. Install appium and related gems:\n\n  ```\n  brew install libimobiledevice --HEAD\n  brew install node\n  npm install -g ios-deploy\n  sudo gem install xcpretty\n  npm install appium-doctor -g\n  npm install -g appium\n  npm install wd\n  npm install appium-xcuitest-driver\n  brew install carthage\n  gem install --no-rdoc --no-ri bundler\n  gem install --no-rdoc --no-ri appium_lib\n  gem install --no-rdoc --no-ri appium_console\n  ```\n\n4. Install JDK for Android:\n\n  Download from [Java SE Development Kit 8 - Downloads](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) and install.\n\n5. Install Android Studio from [Download Android Studio and SDK Tools | Android Studio](https://developer.android.com/studio/index.html) and download the OS version you want to work with.\n\n6. Configure the bach_profile to set environment parameters:\n\n  Edit your *`~/.bash_profile`*, if you don't have one, just create it and add following lines to it:\n\n  ```\n  export ANDROID_HOME=/Users/$your_name/Library/Android/sdk\n  export ANDROID_SDK=$ANDROID_HOME\n  PATH=$PATH:$ANDROID_HOME/build-tools\n  PATH=$PATH:$ANDROID_HOME/platform-tools\n  PATH=$PATH:$ANDROID_HOME/tools\n  export JAVA_HOME=\"`/System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java_home`\"\n  PATH=$PATH:$JAVA_HOME/bin\n  export PATH\n  ```\n\n7. Run *`appium-doctor`* in Terminal to see if everything works fine. (You need to see there are all green.)\n\n### Generate the apps to be tested:\n\n1. Download the iOS UIKit Catalog source code from [UIKitCatalog](https://developer.apple.com/library/content/samplecode/UICatalog/UIKitCatalogiOSCreatingandCustomizingUIKitControls.zip).\n\n  1) Unzip it and open the project in the Swift folder.\n\n  2) Build it in XCode by selecting the OS version you would like to test.\n\n  3) Expand the \"Products\" folder in the project structure, and select the app generated.\n\n  4) Right click it and select \"Show in Finder\", and copy the app with extension as .app to your test folder for future use.\n\n2. Download the \"TextSwitcher\" from \"Import an Android code sample\" in Android Studio welcome screen.\n\n  1) Change the \"minSdkVersion\" from 7 to 9 in \"build.gradle (Module:Application)\" and build the app.\n\n  2) Right click the root of project structure and select \"Reveal in Finder\", and copy the app with extension as .apk in \"/Users/$your_name/AndroidStudioProjects/TextSwitcher/Application/build/outputs/apk\" to your test folder for future use.\n\n### Identify elements using appium GUI:\n\n1. Download the appium GUI through their website;\n\n2. Start appium GUI after install;\n\n3. Start the server by default;\n\n4. Start a new session;\n\n5. Input all capabilities you want to use in \"Desired Capabilities\", such as:\n\n  ```\n  platformName   text   iOS\n  platformVersion   text   10.2\n  deviceName   text   iPhone 7\n  app   text /Users/$your_name/Documents/UIKitCatalog.app\n  ```\n\n  Above shows the basic capabilities you must pass to appium to run the app. (For Android, it's basically the same, unless you first activity is not MainActivity so you need to set \"appActivity\" pointed to the right one.)\n\n6. Then you can actually \"Start Session\". (For Android, you need to start your emulator before this, appium won't automatically start Android emulator like it does for iOS.)\n\n7. Wait for some time, another window would popup. In this window, you should see the app's visual and could inspect elements in it.\n\n8. Once click the element on app UI in the inspector window, you can see the properties of the element shows on the right side.\n\n  1) Try to use id to locate element as possible.\n\n  2) The \"Tap\", \"Send Keys\" and \"Clear\" button in the right \"Selected Element\" panel will simulate the corresponding action, and you will see the consequences in the app UI.\n\n  3) You can use \"Back\" on the top of this window to simulate hardware Back action, and next to it is Refresh.\n\n  4) The eye icon is very useful if you would like to record all your steps into a script. Any action after you click that icon will be recorded, until it's been clicked again.\n\n  5) You can choose the language you want to record, and you can select to show/hide the supporting code (the code to support you start and end tests rather than the test steps), copy and delete the test codes.\n\n  6) The last one on the top will close this window and entire session.\n\n9. With the inspector, you have recorded some script, or you have written your own code with the inspector to locate elements. The code should look like following:\n\n  ```\n  require 'rubygems'\n  require 'appium_lib'\n  caps = {}\n  caps[\"platformName\"] = \"iOS\"\n  caps[\"platformVersion\"] = \"10.2\"\n  caps[\"deviceName\"] = \"iPhone 7\"\n  caps[\"app\"] = \"/Users/$your_name/Documents/UIKitCatalog.app\"\n  opts = {\n  sauce_username: nil,\n  server_url: \"http://localhost:4723/wd/hub\"\n  }\n  driver = Appium::Driver.new({caps: caps, appium_lib: opts}).start_driver\n  driver.navigate.back\n  el1 = driver.find_element(:xpath, \"//XCUIElementTypeCell[14]\")\n  el1.click\n  el2 = driver.find_element(:xpath, \"//XCUIElementTypeCell[1]/XCUIElementTypeTextField\")\n  el2.send_keys \"123\"\n  el3 = driver.find_element(:xpath, \"//XCUIElementTypeCell[2]/XCUIElementTypeTextField\")\n  el3.send_keys \"456\"\n  driver.quit\n  ```\n\n  Save the script to a .sh file, such as test.sh.\n\n### Run appium test:\n\n1. Now we can run the script through the command line (Terminal).\n\n2. After we close appium GUI, we need to run appium in a Terminal tab, then open your test folder. Under the folder, run following command:\n\n    `ruby test.sh`\n\n3. You should see the simulator started and test runs.\n\n4. But we DO NOT have any assertion. Let's add some.\n\n  1) Install RSpec through\n\n  `gem install rspec`\n\n  2) Include RSpec and its matchers in the \"Require\" section\n\n  ```\n  require 'rubygems'\n  require 'appium_lib'\n  require 'rspec'\n  include RSpec::Matchers\n  ```\n\n  3) Add assertions to the test, like:\n\n  ```\n  driver.navigate.back\n  el1 = driver.find_element(:xpath, \"//XCUIElementTypeCell[14]\")\n  el1.click\n  el2 = driver.find_element(:xpath, \"//XCUIElementTypeCell[1]/XCUIElementTypeTextField\")\n  el2.send_keys \"123\"\n  el2.value.should == \"123\"\n  el3 = driver.find_element(:xpath, \"//XCUIElementTypeCell[2]/XCUIElementTypeTextField\")\n  el3.send_keys \"456\"\n  el3.value.should == \"456\"\n  ```\n\n  4) To make sure the assertions really works, we can alter like:\n\n  `el3.value.should == \"345\"`\n\n  5) And run it again, it should show following in Terminal:\n\n  ```\n  /usr/local/lib/ruby/gems/2.4.0/gems/rspec-support-3.6.0/lib/rspec/support.rb:87:in `block in <module:Support>': expected: \"345\" (RSpec::Expectations::ExpectationNotMetError)\n  got: \"456\" (using ==)\n  ```\n\n  6) Now we can revert the change, and complete the test script.\n\n  7) The final test script should looks like:\n\n  ```\n  require 'rubygems'\n  require 'appium_lib'\n  require 'rspec'\n  include RSpec::Matchers\n  caps = {}\n  caps[\"platformName\"] = \"iOS\"\n  caps[\"platformVersion\"] = \"10.2\"\n  caps[\"deviceName\"] = \"iPhone 7\"\n  caps[\"app\"] = \"/Users/yhuang/Documents/appium/UIKitCatalog.app\"\n  opts = {\n  sauce_username: nil,\n  server_url: \"http://localhost:4723/wd/hub\"\n  }\n  driver = Appium::Driver.new({caps: caps, appium_lib: opts}).start_driver\n  driver.navigate.back\n  el1 = driver.find_element(:xpath, \"//XCUIElementTypeCell[14]\")\n  el1.click\n  el2 = driver.find_element(:xpath, \"//XCUIElementTypeCell[1]/XCUIElementTypeTextField\")\n  el2.send_keys \"123\"\n  el2.value.should == \"123\"\n  el3 = driver.find_element(:xpath, \"//XCUIElementTypeCell[2]/XCUIElementTypeTextField\")\n  el3.send_keys \"456\"\n  el3.value.should == \"456\"\n  driver.quit\n  ```\n\n5. Now it's all done.\n\n### Please Note:\n\n1. This is just a sample to run test, but we actually should write it in BDD way with Page Object.\n\n2. It should also be integrated with CI.\n\n3. If you want to use Appium to test Android, I recommend you to use Genymotion rather than AVD, even you are using x86 kernel for AVD.\n\n4. You can reference to the [app](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/UIKitCatalog.app) and [script](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/UIKitCatalog.sh) for UIKitCatalog and the [app](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/AndroidCalculator.apk) and [script](https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/AndroidCalculator.sh) for Android Calculator.\n","slug":"Quick_Start_For_Appium_iOS_And_Android","published":1,"updated":"2017-07-10T00:50:09.000Z","layout":"post","photos":[],"link":"","_id":"cj4xfleb00000fupn6f2h8bz8","content":"<h5 id=\"There_are_many_changes_compared_to_the_early_version_of_appium,_so_I_would_like_to_start_from_scratch_to_build_a_simple_testing_script_for_appium-_For_further_reading_about_how_to_apply_Page_Object_and_BDD_to_appium,_you_can_read_my_previous_article_Cookbook_for_appium_and_BDD_with_PageObject-\">There are many changes compared to the early version of appium, so I would like to start from scratch to build a simple testing script for appium. For further reading about how to apply Page Object and BDD to appium, you can read my previous article <a href=\"http://hy1984427.github.io/appium/\">Cookbook for appium</a> and <a href=\"http://hy1984427.github.io/BDD-with-PageObject/\">BDD with PageObject</a>.</h5><h3 id=\"Environment_Settings:\">Environment Settings:</h3><ol>\n<li><p>Install XCode and its command line tool.</p>\n<p>To install XCode command line tool, you can use the following command in Terminal:</p>\n<p><code>xcode-select --install</code></p>\n<p>And download the OS versions you want to work with.</p>\n</li>\n<li><p>It’s better to choose Ruby to write the test script as it’s easy to get familiar with. And to install/upgrade it, we can use following commands:</p>\n<p>1) Install Homebrew</p>\n<p><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></p>\n<p>2) Install Ruby</p>\n<p><code>brew install ruby</code></p>\n</li>\n<li><p>Install appium and related gems:</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>libimobiledevice --HEAD</div><div class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>node</div><div class=\"line\">npm <span class=\"keyword\">install </span>-g ios-deploy</div><div class=\"line\">sudo gem <span class=\"keyword\">install </span>xcpretty</div><div class=\"line\">npm <span class=\"keyword\">install </span>appium-doctor -g</div><div class=\"line\">npm <span class=\"keyword\">install </span>-g appium</div><div class=\"line\">npm <span class=\"keyword\">install </span>wd</div><div class=\"line\">npm <span class=\"keyword\">install </span>appium-xcuitest-driver</div><div class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>carthage</div><div class=\"line\">gem <span class=\"keyword\">install </span>--no-rdoc --no-ri <span class=\"keyword\">bundler</span></div><div class=\"line\">gem <span class=\"keyword\">install </span>--no-rdoc --no-ri appium_lib</div><div class=\"line\">gem <span class=\"keyword\">install </span>--no-rdoc --no-ri appium_console</div></pre></td></tr></table></figure>\n</li>\n<li><p>Install JDK for Android:</p>\n<p>Download from <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"external\">Java SE Development Kit 8 - Downloads</a> and install.</p>\n</li>\n<li><p>Install Android Studio from <a href=\"https://developer.android.com/studio/index.html\" target=\"_blank\" rel=\"external\">Download Android Studio and SDK Tools | Android Studio</a> and download the OS version you want to work with.</p>\n</li>\n<li><p>Configure the bach_profile to set environment parameters:</p>\n<p>Edit your <em><code>~/.bash_profile</code></em>, if you don’t have one, just create it and add following lines to it:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">ANDROID_HOME</span>=/Users/$your_name/Library/Android/sdk</div><div class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">ANDROID_SDK</span>=<span class=\"variable\">$ANDROID_HOME</span></div><div class=\"line\"><span class=\"attribute\">PATH</span>=<span class=\"variable\">$PATH</span>:$ANDROID_HOME/build-tools</div><div class=\"line\"><span class=\"attribute\">PATH</span>=<span class=\"variable\">$PATH</span>:$ANDROID_HOME/platform-tools</div><div class=\"line\"><span class=\"attribute\">PATH</span>=<span class=\"variable\">$PATH</span>:$ANDROID_HOME/tools</div><div class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">JAVA_HOME</span>=<span class=\"string\">\"`/System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java_home`\"</span></div><div class=\"line\"><span class=\"attribute\">PATH</span>=<span class=\"variable\">$PATH</span>:$JAVA_HOME/bin</div><div class=\"line\"><span class=\"builtin-name\">export</span> PATH</div></pre></td></tr></table></figure>\n</li>\n<li><p>Run <em><code>appium-doctor</code></em> in Terminal to see if everything works fine. (You need to see there are all green.)</p>\n</li>\n</ol>\n<h3 id=\"Generate_the_apps_to_be_tested:\">Generate the apps to be tested:</h3><ol>\n<li><p>Download the iOS UIKit Catalog source code from <a href=\"https://developer.apple.com/library/content/samplecode/UICatalog/UIKitCatalogiOSCreatingandCustomizingUIKitControls.zip\" target=\"_blank\" rel=\"external\">UIKitCatalog</a>.</p>\n<p>1) Unzip it and open the project in the Swift folder.</p>\n<p>2) Build it in XCode by selecting the OS version you would like to test.</p>\n<p>3) Expand the “Products” folder in the project structure, and select the app generated.</p>\n<p>4) Right click it and select “Show in Finder”, and copy the app with extension as .app to your test folder for future use.</p>\n</li>\n<li><p>Download the “TextSwitcher” from “Import an Android code sample” in Android Studio welcome screen.</p>\n<p>1) Change the “minSdkVersion” from 7 to 9 in “build.gradle (Module:Application)” and build the app.</p>\n<p>2) Right click the root of project structure and select “Reveal in Finder”, and copy the app with extension as .apk in “/Users/$your_name/AndroidStudioProjects/TextSwitcher/Application/build/outputs/apk” to your test folder for future use.</p>\n</li>\n</ol>\n<h3 id=\"Identify_elements_using_appium_GUI:\">Identify elements using appium GUI:</h3><ol>\n<li><p>Download the appium GUI through their website;</p>\n</li>\n<li><p>Start appium GUI after install;</p>\n</li>\n<li><p>Start the server by default;</p>\n</li>\n<li><p>Start a new session;</p>\n</li>\n<li><p>Input all capabilities you want to use in “Desired Capabilities”, such as:</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">platformName   <span class=\"keyword\">text</span>   iOS</div><div class=\"line\">platformVersion   <span class=\"keyword\">text</span>   <span class=\"number\">10.2</span></div><div class=\"line\">deviceName   <span class=\"keyword\">text</span>   iPhone <span class=\"number\">7</span></div><div class=\"line\">app   <span class=\"keyword\">text</span> /Users/$your_name/Documents/UIKitCatalog.app</div></pre></td></tr></table></figure>\n<p>Above shows the basic capabilities you must pass to appium to run the app. (For Android, it’s basically the same, unless you first activity is not MainActivity so you need to set “appActivity” pointed to the right one.)</p>\n</li>\n<li><p>Then you can actually “Start Session”. (For Android, you need to start your emulator before this, appium won’t automatically start Android emulator like it does for iOS.)</p>\n</li>\n<li><p>Wait for some time, another window would popup. In this window, you should see the app’s visual and could inspect elements in it.</p>\n</li>\n<li><p>Once click the element on app UI in the inspector window, you can see the properties of the element shows on the right side.</p>\n<p>1) Try to use id to locate element as possible.</p>\n<p>2) The “Tap”, “Send Keys” and “Clear” button in the right “Selected Element” panel will simulate the corresponding action, and you will see the consequences in the app UI.</p>\n<p>3) You can use “Back” on the top of this window to simulate hardware Back action, and next to it is Refresh.</p>\n<p>4) The eye icon is very useful if you would like to record all your steps into a script. Any action after you click that icon will be recorded, until it’s been clicked again.</p>\n<p>5) You can choose the language you want to record, and you can select to show/hide the supporting code (the code to support you start and end tests rather than the test steps), copy and delete the test codes.</p>\n<p>6) The last one on the top will close this window and entire session.</p>\n</li>\n<li><p>With the inspector, you have recorded some script, or you have written your own code with the inspector to locate elements. The code should look like following:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">require 'rubygems'</div><div class=\"line\">require 'appium_lib'</div><div class=\"line\">caps = &#123;&#125;</div><div class=\"line\">caps[<span class=\"string\">\"platformName\"</span>] = <span class=\"string\">\"iOS\"</span></div><div class=\"line\">caps[<span class=\"string\">\"platformVersion\"</span>] = <span class=\"string\">\"10.2\"</span></div><div class=\"line\">caps[<span class=\"string\">\"deviceName\"</span>] = <span class=\"string\">\"iPhone 7\"</span></div><div class=\"line\">caps[<span class=\"string\">\"app\"</span>] = <span class=\"string\">\"/Users/$your_name/Documents/UIKitCatalog.app\"</span></div><div class=\"line\">opts = &#123;</div><div class=\"line\"><span class=\"section\">sauce_username: nil,</span></div><div class=\"line\"><span class=\"section\">server_url: \"http://localhost:4723/wd/hub\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">driver = Appium::Driver.new(&#123;caps: caps, appium_lib: opts&#125;).start_driver</div><div class=\"line\">driver.navigate.back</div><div class=\"line\">el1 = driver.find_element(:xpath, <span class=\"string\">\"//XCUIElementTypeCell[14]\"</span>)</div><div class=\"line\">el1.click</div><div class=\"line\">el2 = driver.find_element(:xpath, <span class=\"string\">\"//XCUIElementTypeCell[1]/XCUIElementTypeTextField\"</span>)</div><div class=\"line\">el2.send_keys <span class=\"string\">\"123\"</span></div><div class=\"line\">el3 = driver.find_element(:xpath, <span class=\"string\">\"//XCUIElementTypeCell[2]/XCUIElementTypeTextField\"</span>)</div><div class=\"line\">el3.send_keys <span class=\"string\">\"456\"</span></div><div class=\"line\">driver.quit</div></pre></td></tr></table></figure>\n<p>Save the script to a .sh file, such as test.sh.</p>\n</li>\n</ol>\n<h3 id=\"Run_appium_test:\">Run appium test:</h3><ol>\n<li><p>Now we can run the script through the command line (Terminal).</p>\n</li>\n<li><p>After we close appium GUI, we need to run appium in a Terminal tab, then open your test folder. Under the folder, run following command:</p>\n<p> <code>ruby test.sh</code></p>\n</li>\n<li><p>You should see the simulator started and test runs.</p>\n</li>\n<li><p>But we DO NOT have any assertion. Let’s add some.</p>\n<p>1) Install RSpec through</p>\n<p><code>gem install rspec</code></p>\n<p>2) Include RSpec and its matchers in the “Require” section</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'rubygems'</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'appium_lib'</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'rspec'</span></div><div class=\"line\"><span class=\"keyword\">include</span> RSpec::Matchers</div></pre></td></tr></table></figure>\n<p>3) Add assertions to the test, like:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">driver<span class=\"selector-class\">.navigate</span><span class=\"selector-class\">.back</span></div><div class=\"line\">el1 = driver.find_element(:xpath, <span class=\"string\">\"//XCUIElementTypeCell[14]\"</span>)</div><div class=\"line\">el1<span class=\"selector-class\">.click</span></div><div class=\"line\">el2 = driver.find_element(:xpath, <span class=\"string\">\"//XCUIElementTypeCell[1]/XCUIElementTypeTextField\"</span>)</div><div class=\"line\">el2<span class=\"selector-class\">.send_keys</span> <span class=\"string\">\"123\"</span></div><div class=\"line\">el2<span class=\"selector-class\">.value</span><span class=\"selector-class\">.should</span> == <span class=\"string\">\"123\"</span></div><div class=\"line\">el3 = driver.find_element(:xpath, <span class=\"string\">\"//XCUIElementTypeCell[2]/XCUIElementTypeTextField\"</span>)</div><div class=\"line\">el3<span class=\"selector-class\">.send_keys</span> <span class=\"string\">\"456\"</span></div><div class=\"line\">el3<span class=\"selector-class\">.value</span><span class=\"selector-class\">.should</span> == <span class=\"string\">\"456\"</span></div></pre></td></tr></table></figure>\n<p>4) To make sure the assertions really works, we can alter like:</p>\n<p><code>el3.value.should == &quot;345&quot;</code></p>\n<p>5) And run it again, it should show following in Terminal:</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">ruby</span>/<span class=\"title\">gems</span>/2.4.0/<span class=\"title\">gems</span>/<span class=\"title\">rspec</span>-<span class=\"title\">support</span>-3.6.0/<span class=\"title\">lib</span>/<span class=\"title\">rspec</span>/<span class=\"title\">support</span>.<span class=\"title\">rb</span>:87:<span class=\"title\">in</span> `<span class=\"title\">block</span> <span class=\"title\">in</span> &lt;<span class=\"title\">module</span>:<span class=\"title\">Support</span>&gt;': <span class=\"title\">expected</span>: \"345\" (<span class=\"title\">RSpec::Expectations::ExpectationNotMetError</span>)</span></div><div class=\"line\"><span class=\"symbol\">got:</span> <span class=\"string\">\"456\"</span> (using ==)</div></pre></td></tr></table></figure>\n<p>6) Now we can revert the change, and complete the test script.</p>\n<p>7) The final test script should looks like:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">require <span class=\"string\">'rubygems'</span></div><div class=\"line\">require <span class=\"string\">'appium_lib'</span></div><div class=\"line\">require <span class=\"string\">'rspec'</span></div><div class=\"line\">include RSpec::Matchers</div><div class=\"line\">caps = &#123;&#125;</div><div class=\"line\">caps[<span class=\"string\">\"platformName\"</span>] = <span class=\"string\">\"iOS\"</span></div><div class=\"line\">caps[<span class=\"string\">\"platformVersion\"</span>] = <span class=\"string\">\"10.2\"</span></div><div class=\"line\">caps[<span class=\"string\">\"deviceName\"</span>] = <span class=\"string\">\"iPhone 7\"</span></div><div class=\"line\">caps[<span class=\"string\">\"app\"</span>] = <span class=\"string\">\"/Users/yhuang/Documents/appium/UIKitCatalog.app\"</span></div><div class=\"line\">opts = &#123;</div><div class=\"line\">sauce_username: nil,</div><div class=\"line\">server_url: <span class=\"string\">\"http://localhost:4723/wd/hub\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">driver = Appium::Driver.new(&#123;caps: caps, appium_lib: opts&#125;)<span class=\"selector-class\">.start_driver</span></div><div class=\"line\">driver<span class=\"selector-class\">.navigate</span><span class=\"selector-class\">.back</span></div><div class=\"line\">el1 = driver.find_element(:xpath, <span class=\"string\">\"//XCUIElementTypeCell[14]\"</span>)</div><div class=\"line\">el1<span class=\"selector-class\">.click</span></div><div class=\"line\">el2 = driver.find_element(:xpath, <span class=\"string\">\"//XCUIElementTypeCell[1]/XCUIElementTypeTextField\"</span>)</div><div class=\"line\">el2<span class=\"selector-class\">.send_keys</span> <span class=\"string\">\"123\"</span></div><div class=\"line\">el2<span class=\"selector-class\">.value</span><span class=\"selector-class\">.should</span> == <span class=\"string\">\"123\"</span></div><div class=\"line\">el3 = driver.find_element(:xpath, <span class=\"string\">\"//XCUIElementTypeCell[2]/XCUIElementTypeTextField\"</span>)</div><div class=\"line\">el3<span class=\"selector-class\">.send_keys</span> <span class=\"string\">\"456\"</span></div><div class=\"line\">el3<span class=\"selector-class\">.value</span><span class=\"selector-class\">.should</span> == <span class=\"string\">\"456\"</span></div><div class=\"line\">driver.quit</div></pre></td></tr></table></figure>\n</li>\n<li><p>Now it’s all done.</p>\n</li>\n</ol>\n<h3 id=\"Please_Note:\">Please Note:</h3><ol>\n<li><p>This is just a sample to run test, but we actually should write it in BDD way with Page Object.</p>\n</li>\n<li><p>It should also be integrated with CI.</p>\n</li>\n<li><p>If you want to use Appium to test Android, I recommend you to use Genymotion rather than AVD, even you are using x86 kernel for AVD.</p>\n</li>\n<li><p>You can reference to the <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/UIKitCatalog.app\" target=\"_blank\" rel=\"external\">app</a> and <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/UIKitCatalog.sh\" target=\"_blank\" rel=\"external\">script</a> for UIKitCatalog and the <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/AndroidCalculator.apk\" target=\"_blank\" rel=\"external\">app</a> and <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/AndroidCalculator.sh\" target=\"_blank\" rel=\"external\">script</a> for Android Calculator.</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"There_are_many_changes_compared_to_the_early_version_of_appium,_so_I_would_like_to_start_from_scratch_to_build_a_simple_testing_script_for_appium-_For_further_reading_about_how_to_apply_Page_Object_and_BDD_to_appium,_you_can_read_my_previous_article_Cookbook_for_appium_and_BDD_with_PageObject-\">There are many changes compared to the early version of appium, so I would like to start from scratch to build a simple testing script for appium. For further reading about how to apply Page Object and BDD to appium, you can read my previous article <a href=\"http://hy1984427.github.io/appium/\">Cookbook for appium</a> and <a href=\"http://hy1984427.github.io/BDD-with-PageObject/\">BDD with PageObject</a>.</h5><h3 id=\"Environment_Settings:\">Environment Settings:</h3><ol>\n<li><p>Install XCode and its command line tool.</p>\n<p>To install XCode command line tool, you can use the following command in Terminal:</p>\n<p><code>xcode-select --install</code></p>\n<p>And download the OS versions you want to work with.</p>\n</li>\n<li><p>It’s better to choose Ruby to write the test script as it’s easy to get familiar with. And to install/upgrade it, we can use following commands:</p>\n<p>1) Install Homebrew</p>\n<p><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></p>\n<p>2) Install Ruby</p>\n<p><code>brew install ruby</code></p>\n</li>\n<li><p>Install appium and related gems:</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>libimobiledevice --HEAD</div><div class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>node</div><div class=\"line\">npm <span class=\"keyword\">install </span>-g ios-deploy</div><div class=\"line\">sudo gem <span class=\"keyword\">install </span>xcpretty</div><div class=\"line\">npm <span class=\"keyword\">install </span>appium-doctor -g</div><div class=\"line\">npm <span class=\"keyword\">install </span>-g appium</div><div class=\"line\">npm <span class=\"keyword\">install </span>wd</div><div class=\"line\">npm <span class=\"keyword\">install </span>appium-xcuitest-driver</div><div class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>carthage</div><div class=\"line\">gem <span class=\"keyword\">install </span>--no-rdoc --no-ri <span class=\"keyword\">bundler</span></div><div class=\"line\">gem <span class=\"keyword\">install </span>--no-rdoc --no-ri appium_lib</div><div class=\"line\">gem <span class=\"keyword\">install </span>--no-rdoc --no-ri appium_console</div></pre></td></tr></table></figure>\n</li>\n<li><p>Install JDK for Android:</p>\n<p>Download from <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"external\">Java SE Development Kit 8 - Downloads</a> and install.</p>\n</li>\n<li><p>Install Android Studio from <a href=\"https://developer.android.com/studio/index.html\" target=\"_blank\" rel=\"external\">Download Android Studio and SDK Tools | Android Studio</a> and download the OS version you want to work with.</p>\n</li>\n<li><p>Configure the bach_profile to set environment parameters:</p>\n<p>Edit your <em><code>~/.bash_profile</code></em>, if you don’t have one, just create it and add following lines to it:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">ANDROID_HOME</span>=/Users/$your_name/Library/Android/sdk</div><div class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">ANDROID_SDK</span>=<span class=\"variable\">$ANDROID_HOME</span></div><div class=\"line\"><span class=\"attribute\">PATH</span>=<span class=\"variable\">$PATH</span>:$ANDROID_HOME/build-tools</div><div class=\"line\"><span class=\"attribute\">PATH</span>=<span class=\"variable\">$PATH</span>:$ANDROID_HOME/platform-tools</div><div class=\"line\"><span class=\"attribute\">PATH</span>=<span class=\"variable\">$PATH</span>:$ANDROID_HOME/tools</div><div class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">JAVA_HOME</span>=<span class=\"string\">\"`/System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java_home`\"</span></div><div class=\"line\"><span class=\"attribute\">PATH</span>=<span class=\"variable\">$PATH</span>:$JAVA_HOME/bin</div><div class=\"line\"><span class=\"builtin-name\">export</span> PATH</div></pre></td></tr></table></figure>\n</li>\n<li><p>Run <em><code>appium-doctor</code></em> in Terminal to see if everything works fine. (You need to see there are all green.)</p>\n</li>\n</ol>\n<h3 id=\"Generate_the_apps_to_be_tested:\">Generate the apps to be tested:</h3><ol>\n<li><p>Download the iOS UIKit Catalog source code from <a href=\"https://developer.apple.com/library/content/samplecode/UICatalog/UIKitCatalogiOSCreatingandCustomizingUIKitControls.zip\" target=\"_blank\" rel=\"external\">UIKitCatalog</a>.</p>\n<p>1) Unzip it and open the project in the Swift folder.</p>\n<p>2) Build it in XCode by selecting the OS version you would like to test.</p>\n<p>3) Expand the “Products” folder in the project structure, and select the app generated.</p>\n<p>4) Right click it and select “Show in Finder”, and copy the app with extension as .app to your test folder for future use.</p>\n</li>\n<li><p>Download the “TextSwitcher” from “Import an Android code sample” in Android Studio welcome screen.</p>\n<p>1) Change the “minSdkVersion” from 7 to 9 in “build.gradle (Module:Application)” and build the app.</p>\n<p>2) Right click the root of project structure and select “Reveal in Finder”, and copy the app with extension as .apk in “/Users/$your_name/AndroidStudioProjects/TextSwitcher/Application/build/outputs/apk” to your test folder for future use.</p>\n</li>\n</ol>\n<h3 id=\"Identify_elements_using_appium_GUI:\">Identify elements using appium GUI:</h3><ol>\n<li><p>Download the appium GUI through their website;</p>\n</li>\n<li><p>Start appium GUI after install;</p>\n</li>\n<li><p>Start the server by default;</p>\n</li>\n<li><p>Start a new session;</p>\n</li>\n<li><p>Input all capabilities you want to use in “Desired Capabilities”, such as:</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">platformName   <span class=\"keyword\">text</span>   iOS</div><div class=\"line\">platformVersion   <span class=\"keyword\">text</span>   <span class=\"number\">10.2</span></div><div class=\"line\">deviceName   <span class=\"keyword\">text</span>   iPhone <span class=\"number\">7</span></div><div class=\"line\">app   <span class=\"keyword\">text</span> /Users/$your_name/Documents/UIKitCatalog.app</div></pre></td></tr></table></figure>\n<p>Above shows the basic capabilities you must pass to appium to run the app. (For Android, it’s basically the same, unless you first activity is not MainActivity so you need to set “appActivity” pointed to the right one.)</p>\n</li>\n<li><p>Then you can actually “Start Session”. (For Android, you need to start your emulator before this, appium won’t automatically start Android emulator like it does for iOS.)</p>\n</li>\n<li><p>Wait for some time, another window would popup. In this window, you should see the app’s visual and could inspect elements in it.</p>\n</li>\n<li><p>Once click the element on app UI in the inspector window, you can see the properties of the element shows on the right side.</p>\n<p>1) Try to use id to locate element as possible.</p>\n<p>2) The “Tap”, “Send Keys” and “Clear” button in the right “Selected Element” panel will simulate the corresponding action, and you will see the consequences in the app UI.</p>\n<p>3) You can use “Back” on the top of this window to simulate hardware Back action, and next to it is Refresh.</p>\n<p>4) The eye icon is very useful if you would like to record all your steps into a script. Any action after you click that icon will be recorded, until it’s been clicked again.</p>\n<p>5) You can choose the language you want to record, and you can select to show/hide the supporting code (the code to support you start and end tests rather than the test steps), copy and delete the test codes.</p>\n<p>6) The last one on the top will close this window and entire session.</p>\n</li>\n<li><p>With the inspector, you have recorded some script, or you have written your own code with the inspector to locate elements. The code should look like following:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">require 'rubygems'</div><div class=\"line\">require 'appium_lib'</div><div class=\"line\">caps = &#123;&#125;</div><div class=\"line\">caps[<span class=\"string\">\"platformName\"</span>] = <span class=\"string\">\"iOS\"</span></div><div class=\"line\">caps[<span class=\"string\">\"platformVersion\"</span>] = <span class=\"string\">\"10.2\"</span></div><div class=\"line\">caps[<span class=\"string\">\"deviceName\"</span>] = <span class=\"string\">\"iPhone 7\"</span></div><div class=\"line\">caps[<span class=\"string\">\"app\"</span>] = <span class=\"string\">\"/Users/$your_name/Documents/UIKitCatalog.app\"</span></div><div class=\"line\">opts = &#123;</div><div class=\"line\"><span class=\"section\">sauce_username: nil,</span></div><div class=\"line\"><span class=\"section\">server_url: \"http://localhost:4723/wd/hub\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">driver = Appium::Driver.new(&#123;caps: caps, appium_lib: opts&#125;).start_driver</div><div class=\"line\">driver.navigate.back</div><div class=\"line\">el1 = driver.find_element(:xpath, <span class=\"string\">\"//XCUIElementTypeCell[14]\"</span>)</div><div class=\"line\">el1.click</div><div class=\"line\">el2 = driver.find_element(:xpath, <span class=\"string\">\"//XCUIElementTypeCell[1]/XCUIElementTypeTextField\"</span>)</div><div class=\"line\">el2.send_keys <span class=\"string\">\"123\"</span></div><div class=\"line\">el3 = driver.find_element(:xpath, <span class=\"string\">\"//XCUIElementTypeCell[2]/XCUIElementTypeTextField\"</span>)</div><div class=\"line\">el3.send_keys <span class=\"string\">\"456\"</span></div><div class=\"line\">driver.quit</div></pre></td></tr></table></figure>\n<p>Save the script to a .sh file, such as test.sh.</p>\n</li>\n</ol>\n<h3 id=\"Run_appium_test:\">Run appium test:</h3><ol>\n<li><p>Now we can run the script through the command line (Terminal).</p>\n</li>\n<li><p>After we close appium GUI, we need to run appium in a Terminal tab, then open your test folder. Under the folder, run following command:</p>\n<p> <code>ruby test.sh</code></p>\n</li>\n<li><p>You should see the simulator started and test runs.</p>\n</li>\n<li><p>But we DO NOT have any assertion. Let’s add some.</p>\n<p>1) Install RSpec through</p>\n<p><code>gem install rspec</code></p>\n<p>2) Include RSpec and its matchers in the “Require” section</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'rubygems'</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'appium_lib'</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'rspec'</span></div><div class=\"line\"><span class=\"keyword\">include</span> RSpec::Matchers</div></pre></td></tr></table></figure>\n<p>3) Add assertions to the test, like:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">driver<span class=\"selector-class\">.navigate</span><span class=\"selector-class\">.back</span></div><div class=\"line\">el1 = driver.find_element(:xpath, <span class=\"string\">\"//XCUIElementTypeCell[14]\"</span>)</div><div class=\"line\">el1<span class=\"selector-class\">.click</span></div><div class=\"line\">el2 = driver.find_element(:xpath, <span class=\"string\">\"//XCUIElementTypeCell[1]/XCUIElementTypeTextField\"</span>)</div><div class=\"line\">el2<span class=\"selector-class\">.send_keys</span> <span class=\"string\">\"123\"</span></div><div class=\"line\">el2<span class=\"selector-class\">.value</span><span class=\"selector-class\">.should</span> == <span class=\"string\">\"123\"</span></div><div class=\"line\">el3 = driver.find_element(:xpath, <span class=\"string\">\"//XCUIElementTypeCell[2]/XCUIElementTypeTextField\"</span>)</div><div class=\"line\">el3<span class=\"selector-class\">.send_keys</span> <span class=\"string\">\"456\"</span></div><div class=\"line\">el3<span class=\"selector-class\">.value</span><span class=\"selector-class\">.should</span> == <span class=\"string\">\"456\"</span></div></pre></td></tr></table></figure>\n<p>4) To make sure the assertions really works, we can alter like:</p>\n<p><code>el3.value.should == &quot;345&quot;</code></p>\n<p>5) And run it again, it should show following in Terminal:</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">ruby</span>/<span class=\"title\">gems</span>/2.4.0/<span class=\"title\">gems</span>/<span class=\"title\">rspec</span>-<span class=\"title\">support</span>-3.6.0/<span class=\"title\">lib</span>/<span class=\"title\">rspec</span>/<span class=\"title\">support</span>.<span class=\"title\">rb</span>:87:<span class=\"title\">in</span> `<span class=\"title\">block</span> <span class=\"title\">in</span> &lt;<span class=\"title\">module</span>:<span class=\"title\">Support</span>&gt;': <span class=\"title\">expected</span>: \"345\" (<span class=\"title\">RSpec::Expectations::ExpectationNotMetError</span>)</span></div><div class=\"line\"><span class=\"symbol\">got:</span> <span class=\"string\">\"456\"</span> (using ==)</div></pre></td></tr></table></figure>\n<p>6) Now we can revert the change, and complete the test script.</p>\n<p>7) The final test script should looks like:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">require <span class=\"string\">'rubygems'</span></div><div class=\"line\">require <span class=\"string\">'appium_lib'</span></div><div class=\"line\">require <span class=\"string\">'rspec'</span></div><div class=\"line\">include RSpec::Matchers</div><div class=\"line\">caps = &#123;&#125;</div><div class=\"line\">caps[<span class=\"string\">\"platformName\"</span>] = <span class=\"string\">\"iOS\"</span></div><div class=\"line\">caps[<span class=\"string\">\"platformVersion\"</span>] = <span class=\"string\">\"10.2\"</span></div><div class=\"line\">caps[<span class=\"string\">\"deviceName\"</span>] = <span class=\"string\">\"iPhone 7\"</span></div><div class=\"line\">caps[<span class=\"string\">\"app\"</span>] = <span class=\"string\">\"/Users/yhuang/Documents/appium/UIKitCatalog.app\"</span></div><div class=\"line\">opts = &#123;</div><div class=\"line\">sauce_username: nil,</div><div class=\"line\">server_url: <span class=\"string\">\"http://localhost:4723/wd/hub\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">driver = Appium::Driver.new(&#123;caps: caps, appium_lib: opts&#125;)<span class=\"selector-class\">.start_driver</span></div><div class=\"line\">driver<span class=\"selector-class\">.navigate</span><span class=\"selector-class\">.back</span></div><div class=\"line\">el1 = driver.find_element(:xpath, <span class=\"string\">\"//XCUIElementTypeCell[14]\"</span>)</div><div class=\"line\">el1<span class=\"selector-class\">.click</span></div><div class=\"line\">el2 = driver.find_element(:xpath, <span class=\"string\">\"//XCUIElementTypeCell[1]/XCUIElementTypeTextField\"</span>)</div><div class=\"line\">el2<span class=\"selector-class\">.send_keys</span> <span class=\"string\">\"123\"</span></div><div class=\"line\">el2<span class=\"selector-class\">.value</span><span class=\"selector-class\">.should</span> == <span class=\"string\">\"123\"</span></div><div class=\"line\">el3 = driver.find_element(:xpath, <span class=\"string\">\"//XCUIElementTypeCell[2]/XCUIElementTypeTextField\"</span>)</div><div class=\"line\">el3<span class=\"selector-class\">.send_keys</span> <span class=\"string\">\"456\"</span></div><div class=\"line\">el3<span class=\"selector-class\">.value</span><span class=\"selector-class\">.should</span> == <span class=\"string\">\"456\"</span></div><div class=\"line\">driver.quit</div></pre></td></tr></table></figure>\n</li>\n<li><p>Now it’s all done.</p>\n</li>\n</ol>\n<h3 id=\"Please_Note:\">Please Note:</h3><ol>\n<li><p>This is just a sample to run test, but we actually should write it in BDD way with Page Object.</p>\n</li>\n<li><p>It should also be integrated with CI.</p>\n</li>\n<li><p>If you want to use Appium to test Android, I recommend you to use Genymotion rather than AVD, even you are using x86 kernel for AVD.</p>\n</li>\n<li><p>You can reference to the <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/UIKitCatalog.app\" target=\"_blank\" rel=\"external\">app</a> and <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/UIKitCatalog.sh\" target=\"_blank\" rel=\"external\">script</a> for UIKitCatalog and the <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/AndroidCalculator.apk\" target=\"_blank\" rel=\"external\">app</a> and <a href=\"https://raw.githubusercontent.com/hy1984427/hy1984427.github.io/master/documents/AndroidCalculator.sh\" target=\"_blank\" rel=\"external\">script</a> for Android Calculator.</p>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cijxylu460003y73n88yiw2i9","category_id":"cijxylu4b0004y73nstb7oagp","_id":"cijxylu4e0007y73nnb0cdzj1"},{"post_id":"cijxylu4h000gy73ntlwjv74f","category_id":"cijxylu4b0004y73nstb7oagp","_id":"cijxylu4i000hy73nh06rshyf"},{"post_id":"cijxylu4k000oy73nh7te4r5b","category_id":"cijxylu4b0004y73nstb7oagp","_id":"cijxylu4l000py73n2p5owcck"},{"post_id":"cijxylu4m000vy73n8575vtjq","category_id":"cijxylu4b0004y73nstb7oagp","_id":"cijxylu4n000wy73nhq4kc1jq"},{"post_id":"cijxylu4p0013y73n8e0722tx","category_id":"cijxylu4r0014y73n4u7zgcpa","_id":"cijxylu4r0017y73nfsano6zr"},{"post_id":"cijxylu4v001ey73nkiujlo7b","category_id":"cijxylu4b0004y73nstb7oagp","_id":"cijxylu4w001fy73nlgy49yx9"},{"post_id":"cijxylu4y001ny73n63c5g55w","category_id":"cijxylu4r0014y73n4u7zgcpa","_id":"cijxylu4z001oy73n4eujmz51"},{"post_id":"cijxylu50001ty73nn97vgf8y","category_id":"cijxylu4r0014y73n4u7zgcpa","_id":"cijxylu51001uy73ngejfd55q"},{"post_id":"cijxylu52001zy73nrm1kdkvr","category_id":"cijxylu4b0004y73nstb7oagp","_id":"cijxylu520020y73n0nqboz64"},{"post_id":"cijxylu530025y73n8scf2sf8","category_id":"cijxylu540026y73nxoiots6d","_id":"cijxylu550029y73nlnsgq3yh"},{"post_id":"cijxylu56002cy73nt70w3mgw","category_id":"cijxylu540026y73nxoiots6d","_id":"cijxylu58002dy73nmkp6kmqw"},{"post_id":"cijxylu5a002hy73nlw7wmdsb","category_id":"cijxylu540026y73nxoiots6d","_id":"cijxylu5b002iy73n4jnmfv7c"},{"post_id":"cijxylu5f002ry73nqt0cam5y","category_id":"cijxylu540026y73nxoiots6d","_id":"cijxylu5g002sy73nh87vu1sg"},{"post_id":"cijxylu5l003ey73n56srzlrl","category_id":"cijxylu4r0014y73n4u7zgcpa","_id":"cijxylu5n003iy73nu7t6n39c"},{"post_id":"cijxylu5l003ey73n56srzlrl","category_id":"cijxylu5m003fy73nabyeo8zo","_id":"cijxylu5n003jy73nlepfi2mc"},{"post_id":"cijxylu5o003oy73njk2w2mrz","category_id":"cijxylu4r0014y73n4u7zgcpa","_id":"cijxylu5q003py73n9wweyczc"},{"post_id":"cijxylu5r003uy73n2qa0p6ze","category_id":"cijxylu4r0014y73n4u7zgcpa","_id":"cijxylu5s003vy73nzxta8ue3"},{"post_id":"cijxylu5t0041y73nalccq94r","category_id":"cijxylu4r0014y73n4u7zgcpa","_id":"cijxylu5u0042y73nwrwz884j"},{"post_id":"cijxylu5v0046y73n4h9qzoit","category_id":"cijxylu4b0004y73nstb7oagp","_id":"cijxylu5w0047y73n1dam3slb"},{"post_id":"cijxylu5y004ey73nvx05dqkk","category_id":"cijxylu4b0004y73nstb7oagp","_id":"cijxylu5z004fy73ncpe60u6z"},{"post_id":"cijxylu61004ly73n5vw5lcc0","category_id":"cijxylu4r0014y73n4u7zgcpa","_id":"cijxylu62004my73n6slmnpoy"},{"post_id":"cijy1zjee0000hu3ntlyqjdjw","category_id":"cijxylu4r0014y73n4u7zgcpa","_id":"cijy1zjek0001hu3n6l9xh8cn"},{"post_id":"cijxylu5j0038y73n9188jpdi","category_id":"cijxylu4r0014y73n4u7zgcpa","_id":"cijy1zjfe0006hu3nm37t5r2s"},{"post_id":"cinsjb5a10000il3ntu79ckwv","category_id":"cijxylu4r0014y73n4u7zgcpa","_id":"cinsjb5a70001il3nxmclakps"},{"post_id":"cinsjb5au0007il3nb6f1ef7z","category_id":"cijxylu4r0014y73n4u7zgcpa","_id":"cinsjb5av0008il3n96na1rql"},{"post_id":"cijxylu5c002ly73ngk8nt3cg","category_id":"cijxylu4r0014y73n4u7zgcpa","_id":"cinsk4hl40000lm3nuobhg667"},{"post_id":"cio5iglta00005d3n0hk7isco","category_id":"cijxylu4r0014y73n4u7zgcpa","_id":"cio5ir5t700008j3n9j9ulpd4"},{"post_id":"cijxylu5h0031y73n2r52vs5q","category_id":"cijxylu4r0014y73n4u7zgcpa","_id":"cio5ir5tr00018j3n6h20eo6e"},{"post_id":"cioz2opa800001sfy3d5fjtzr","category_id":"cijxylu4b0004y73nstb7oagp","_id":"cioz2opae00011sfy3mly28dz"},{"post_id":"cip3kko0a0000apfycj7skt1s","category_id":"cijxylu4r0014y73n4u7zgcpa","_id":"cip6l3rsn00001wfyqq234wiv"},{"post_id":"cj4xfleb00000fupn6f2h8bz8","category_id":"cijxylu4b0004y73nstb7oagp","_id":"cj4xflebb0002fupndau4xlw5"}],"PostTag":[{"post_id":"cijxylu460003y73n88yiw2i9","tag_id":"cijxylu4c0005y73nj9htzdyl","_id":"cijxylu4f000by73nqs56s3ja"},{"post_id":"cijxylu460003y73n88yiw2i9","tag_id":"cijxylu4d0006y73n9dql1030","_id":"cijxylu4f000cy73nbqvrl4m2"},{"post_id":"cijxylu460003y73n88yiw2i9","tag_id":"cijxylu4e0008y73nld34uhf9","_id":"cijxylu4g000dy73n7pcle0lt"},{"post_id":"cijxylu460003y73n88yiw2i9","tag_id":"cijxylu4e0009y73n7sde4dxf","_id":"cijxylu4g000ey73nj1p31oop"},{"post_id":"cijxylu460003y73n88yiw2i9","tag_id":"cijxylu4e000ay73nqwww0b6l","_id":"cijxylu4g000fy73nkuiqxoxo"},{"post_id":"cijxylu4h000gy73ntlwjv74f","tag_id":"cijxylu4c0005y73nj9htzdyl","_id":"cijxylu4j000jy73n6cgscjhh"},{"post_id":"cijxylu4h000gy73ntlwjv74f","tag_id":"cijxylu4d0006y73n9dql1030","_id":"cijxylu4j000ky73nlimzwmi5"},{"post_id":"cijxylu4h000gy73ntlwjv74f","tag_id":"cijxylu4e0008y73nld34uhf9","_id":"cijxylu4j000ly73n2mgt6zqa"},{"post_id":"cijxylu4h000gy73ntlwjv74f","tag_id":"cijxylu4e0009y73n7sde4dxf","_id":"cijxylu4j000my73n6381te9w"},{"post_id":"cijxylu4h000gy73ntlwjv74f","tag_id":"cijxylu4j000iy73nih2pcg1a","_id":"cijxylu4j000ny73n0yq9ubpi"},{"post_id":"cijxylu4k000oy73nh7te4r5b","tag_id":"cijxylu4c0005y73nj9htzdyl","_id":"cijxylu4l000qy73nm0qzgn3z"},{"post_id":"cijxylu4k000oy73nh7te4r5b","tag_id":"cijxylu4d0006y73n9dql1030","_id":"cijxylu4l000ry73n50cp0357"},{"post_id":"cijxylu4k000oy73nh7te4r5b","tag_id":"cijxylu4e0008y73nld34uhf9","_id":"cijxylu4l000sy73nddurtm6o"},{"post_id":"cijxylu4k000oy73nh7te4r5b","tag_id":"cijxylu4e0009y73n7sde4dxf","_id":"cijxylu4l000ty73nm28mmqri"},{"post_id":"cijxylu4k000oy73nh7te4r5b","tag_id":"cijxylu4e000ay73nqwww0b6l","_id":"cijxylu4m000uy73nbc195cpy"},{"post_id":"cijxylu4m000vy73n8575vtjq","tag_id":"cijxylu4c0005y73nj9htzdyl","_id":"cijxylu4o000yy73nodmi0gma"},{"post_id":"cijxylu4m000vy73n8575vtjq","tag_id":"cijxylu4d0006y73n9dql1030","_id":"cijxylu4o000zy73nefibpf7z"},{"post_id":"cijxylu4m000vy73n8575vtjq","tag_id":"cijxylu4e0008y73nld34uhf9","_id":"cijxylu4o0010y73n2v8fno0t"},{"post_id":"cijxylu4m000vy73n8575vtjq","tag_id":"cijxylu4e0009y73n7sde4dxf","_id":"cijxylu4o0011y73nvabhlg6h"},{"post_id":"cijxylu4m000vy73n8575vtjq","tag_id":"cijxylu4n000xy73nsj7zbi0s","_id":"cijxylu4o0012y73nh6klhwnn"},{"post_id":"cijxylu4p0013y73n8e0722tx","tag_id":"cijxylu4r0015y73ncesyldrw","_id":"cijxylu4t001ay73n6q9iod1v"},{"post_id":"cijxylu4p0013y73n8e0722tx","tag_id":"cijxylu4r0016y73nbbovec0f","_id":"cijxylu4t001by73nw1eml8h8"},{"post_id":"cijxylu4p0013y73n8e0722tx","tag_id":"cijxylu4s0018y73nn1h56ave","_id":"cijxylu4t001cy73n0qr74u3d"},{"post_id":"cijxylu4p0013y73n8e0722tx","tag_id":"cijxylu4s0019y73nug0nawxc","_id":"cijxylu4u001dy73nhpswnwzx"},{"post_id":"cijxylu4v001ey73nkiujlo7b","tag_id":"cijxylu4c0005y73nj9htzdyl","_id":"cijxylu4x001iy73nqeunk070"},{"post_id":"cijxylu4v001ey73nkiujlo7b","tag_id":"cijxylu4w001gy73nthpekll4","_id":"cijxylu4x001jy73netgopgih"},{"post_id":"cijxylu4v001ey73nkiujlo7b","tag_id":"cijxylu4e0008y73nld34uhf9","_id":"cijxylu4x001ky73nhgm465l3"},{"post_id":"cijxylu4v001ey73nkiujlo7b","tag_id":"cijxylu4e0009y73n7sde4dxf","_id":"cijxylu4x001ly73ncu1fhknk"},{"post_id":"cijxylu4v001ey73nkiujlo7b","tag_id":"cijxylu4x001hy73n4f99j0c8","_id":"cijxylu4x001my73n8csn1ot3"},{"post_id":"cijxylu4y001ny73n63c5g55w","tag_id":"cijxylu4z001py73n4cbwa3ja","_id":"cijxylu4z001ry73nhjmah0u3"},{"post_id":"cijxylu4y001ny73n63c5g55w","tag_id":"cijxylu4z001qy73nnho2f7pt","_id":"cijxylu4z001sy73nlwaqlwag"},{"post_id":"cijxylu50001ty73nn97vgf8y","tag_id":"cijxylu51001vy73n9lgelhj6","_id":"cijxylu51001xy73nq1wv3d7n"},{"post_id":"cijxylu50001ty73nn97vgf8y","tag_id":"cijxylu51001wy73n9p114mnf","_id":"cijxylu51001yy73n42oi294g"},{"post_id":"cijxylu52001zy73nrm1kdkvr","tag_id":"cijxylu520021y73nuhj0mzei","_id":"cijxylu530023y73n3mtcn1gq"},{"post_id":"cijxylu52001zy73nrm1kdkvr","tag_id":"cijxylu520022y73n851asfnq","_id":"cijxylu530024y73n0khq1ft0"},{"post_id":"cijxylu530025y73n8scf2sf8","tag_id":"cijxylu540027y73n94rbecc2","_id":"cijxylu55002ay73nxzsu7sdg"},{"post_id":"cijxylu530025y73n8scf2sf8","tag_id":"cijxylu550028y73nvrz6ih86","_id":"cijxylu55002by73n5d6am0sf"},{"post_id":"cijxylu56002cy73nt70w3mgw","tag_id":"cijxylu4z001qy73nnho2f7pt","_id":"cijxylu58002fy73nyprbz6nq"},{"post_id":"cijxylu56002cy73nt70w3mgw","tag_id":"cijxylu58002ey73nipt9iwb6","_id":"cijxylu59002gy73nhskcxnfj"},{"post_id":"cijxylu5a002hy73nlw7wmdsb","tag_id":"cijxylu540027y73n94rbecc2","_id":"cijxylu5b002jy73nl01vu5iy"},{"post_id":"cijxylu5a002hy73nlw7wmdsb","tag_id":"cijxylu4z001qy73nnho2f7pt","_id":"cijxylu5b002ky73nd0l5yqa5"},{"post_id":"cijxylu5c002ly73ngk8nt3cg","tag_id":"cijxylu5d002ny73nxl6juyj0","_id":"cijxylu5d002oy73nhrrigxf7"},{"post_id":"cijxylu5c002ly73ngk8nt3cg","tag_id":"cijxylu520022y73n851asfnq","_id":"cijxylu5d002py73nnhe3klae"},{"post_id":"cijxylu5c002ly73ngk8nt3cg","tag_id":"cijxylu4z001qy73nnho2f7pt","_id":"cijxylu5d002qy73nw6luw36o"},{"post_id":"cijxylu5f002ry73nqt0cam5y","tag_id":"cijxylu5g002ty73nmuhksn2y","_id":"cijxylu5h002xy73nmzjt5p1r"},{"post_id":"cijxylu5f002ry73nqt0cam5y","tag_id":"cijxylu5g002uy73nruuenp1h","_id":"cijxylu5h002yy73n0urxw6nr"},{"post_id":"cijxylu5f002ry73nqt0cam5y","tag_id":"cijxylu5g002vy73nk7nii9b1","_id":"cijxylu5h002zy73nkp5kbybs"},{"post_id":"cijxylu5f002ry73nqt0cam5y","tag_id":"cijxylu5g002wy73npc2mry3n","_id":"cijxylu5h0030y73nd82rhxez"},{"post_id":"cijxylu5h0031y73n2r52vs5q","tag_id":"cijxylu4c0005y73nj9htzdyl","_id":"cijxylu5j0035y73nz9nbhblv"},{"post_id":"cijxylu5h0031y73n2r52vs5q","tag_id":"cijxylu5i0033y73nboj57r8y","_id":"cijxylu5j0036y73npd1zpkho"},{"post_id":"cijxylu5h0031y73n2r52vs5q","tag_id":"cijxylu5i0034y73nd1a5jsxa","_id":"cijxylu5j0037y73nlyy91br2"},{"post_id":"cijxylu5j0038y73n9188jpdi","tag_id":"cijxylu5k003ay73nalkh1o6h","_id":"cijxylu5l003cy73n0w64jl0o"},{"post_id":"cijxylu5j0038y73n9188jpdi","tag_id":"cijxylu5l003by73njjubmryr","_id":"cijxylu5l003dy73ncthds9hr"},{"post_id":"cijxylu5l003ey73n56srzlrl","tag_id":"cijxylu5m003gy73nrbnj5xx5","_id":"cijxylu5o003ly73n58m3a9pd"},{"post_id":"cijxylu5l003ey73n56srzlrl","tag_id":"cijxylu5n003hy73n8z0ecrv2","_id":"cijxylu5o003my73nnhnf582p"},{"post_id":"cijxylu5l003ey73n56srzlrl","tag_id":"cijxylu5n003ky73ngxuhicvy","_id":"cijxylu5o003ny73nsom1dvoz"},{"post_id":"cijxylu5o003oy73njk2w2mrz","tag_id":"cijxylu5q003qy73nscp0hanh","_id":"cijxylu5q003sy73n2wv4gwm2"},{"post_id":"cijxylu5o003oy73njk2w2mrz","tag_id":"cijxylu5q003ry73n9mkyishb","_id":"cijxylu5q003ty73n3snmsxor"},{"post_id":"cijxylu5r003uy73n2qa0p6ze","tag_id":"cijxylu4c0005y73nj9htzdyl","_id":"cijxylu5s003yy73nw4svka9d"},{"post_id":"cijxylu5r003uy73n2qa0p6ze","tag_id":"cijxylu5s003wy73ncbqibg9g","_id":"cijxylu5t003zy73ndky82rme"},{"post_id":"cijxylu5r003uy73n2qa0p6ze","tag_id":"cijxylu5s003xy73nqi9nqev7","_id":"cijxylu5t0040y73njh2qlt5r"},{"post_id":"cijxylu5t0041y73nalccq94r","tag_id":"cijxylu4c0005y73nj9htzdyl","_id":"cijxylu5u0043y73nd1fls8hd"},{"post_id":"cijxylu5t0041y73nalccq94r","tag_id":"cijxylu5i0033y73nboj57r8y","_id":"cijxylu5u0044y73nxbw2utai"},{"post_id":"cijxylu5t0041y73nalccq94r","tag_id":"cijxylu5i0034y73nd1a5jsxa","_id":"cijxylu5u0045y73nlpwtnktn"},{"post_id":"cijxylu5v0046y73n4h9qzoit","tag_id":"cijxylu4c0005y73nj9htzdyl","_id":"cijxylu5w0049y73ny71w6kh1"},{"post_id":"cijxylu5v0046y73n4h9qzoit","tag_id":"cijxylu5s003wy73ncbqibg9g","_id":"cijxylu5x004ay73n5ti5wsde"},{"post_id":"cijxylu5v0046y73n4h9qzoit","tag_id":"cijxylu4e0008y73nld34uhf9","_id":"cijxylu5x004by73nhe6y7lr7"},{"post_id":"cijxylu5v0046y73n4h9qzoit","tag_id":"cijxylu4e0009y73n7sde4dxf","_id":"cijxylu5x004cy73nw5qnit62"},{"post_id":"cijxylu5v0046y73n4h9qzoit","tag_id":"cijxylu5w0048y73nuho4fca1","_id":"cijxylu5x004dy73n0ihkkf28"},{"post_id":"cijxylu5y004ey73nvx05dqkk","tag_id":"cijxylu4c0005y73nj9htzdyl","_id":"cijxylu5z004gy73nl0cz6kcv"},{"post_id":"cijxylu5y004ey73nvx05dqkk","tag_id":"cijxylu5s003wy73ncbqibg9g","_id":"cijxylu60004hy73nnydo01tq"},{"post_id":"cijxylu5y004ey73nvx05dqkk","tag_id":"cijxylu4e0008y73nld34uhf9","_id":"cijxylu60004iy73nu56hgj92"},{"post_id":"cijxylu5y004ey73nvx05dqkk","tag_id":"cijxylu4e0009y73n7sde4dxf","_id":"cijxylu60004jy73ntxj1ok1w"},{"post_id":"cijxylu5y004ey73nvx05dqkk","tag_id":"cijxylu4j000iy73nih2pcg1a","_id":"cijxylu60004ky73nru8cze0l"},{"post_id":"cijxylu61004ly73n5vw5lcc0","tag_id":"cijxylu5g002ty73nmuhksn2y","_id":"cijxylu63004oy73n6ehvxvvw"},{"post_id":"cijxylu61004ly73n5vw5lcc0","tag_id":"cijxylu62004ny73nlkypw6mm","_id":"cijxylu63004py73nuu4cbgfi"},{"post_id":"cijy1zjee0000hu3ntlyqjdjw","tag_id":"cijy1zjek0002hu3nh5igoqgp","_id":"cijy1zjet0004hu3nmd00aon9"},{"post_id":"cijy1zjee0000hu3ntlyqjdjw","tag_id":"cijy1zjes0003hu3n0h7zrnrn","_id":"cijy1zjet0005hu3nap2kc9p0"},{"post_id":"cinsjb5a10000il3ntu79ckwv","tag_id":"cik4vvpwf0002ho3n7vi494s9","_id":"cinsjb5a80002il3nsf7y4pzw"},{"post_id":"cinsjb5a10000il3ntu79ckwv","tag_id":"cijxylu520022y73n851asfnq","_id":"cinsjb5a80003il3n43u5j07v"},{"post_id":"cinsjb5a10000il3ntu79ckwv","tag_id":"cijxylu4z001qy73nnho2f7pt","_id":"cinsjb5a90004il3nro95xqw8"},{"post_id":"cinsjb5a10000il3ntu79ckwv","tag_id":"cik4vvpwn0003ho3ni9s5b5dv","_id":"cinsjb5a90005il3noorosm1y"},{"post_id":"cinsjb5a10000il3ntu79ckwv","tag_id":"cik4vvpwo0004ho3nfgbdohh0","_id":"cinsjb5a90006il3n5jm88m1o"},{"post_id":"cinsjb5au0007il3nb6f1ef7z","tag_id":"cik4vvpwf0002ho3n7vi494s9","_id":"cinsjb5av0009il3nrok97gzh"},{"post_id":"cinsjb5au0007il3nb6f1ef7z","tag_id":"cijxylu520022y73n851asfnq","_id":"cinsjb5av000ail3nc793xl4h"},{"post_id":"cinsjb5au0007il3nb6f1ef7z","tag_id":"cijxylu4z001qy73nnho2f7pt","_id":"cinsjb5av000bil3n8eugdrtw"},{"post_id":"cinsjb5au0007il3nb6f1ef7z","tag_id":"cik4vvpwn0003ho3ni9s5b5dv","_id":"cinsjb5av000cil3n1ot634ki"},{"post_id":"cinsjb5au0007il3nb6f1ef7z","tag_id":"cik4vvpwo0004ho3nfgbdohh0","_id":"cinsjb5av000dil3nz10e2gxs"},{"post_id":"cio5iglta00005d3n0hk7isco","tag_id":"cijxylu4c0005y73nj9htzdyl","_id":"cio5igltg00025d3ns1r8wjnd"},{"post_id":"cio5iglta00005d3n0hk7isco","tag_id":"cijxylu5i0033y73nboj57r8y","_id":"cio5iglth00035d3n0czyzzwc"},{"post_id":"cio5iglta00005d3n0hk7isco","tag_id":"cijxylu5i0034y73nd1a5jsxa","_id":"cio5iglth00045d3nco9qr0vb"},{"post_id":"cioz2opa800001sfy3d5fjtzr","tag_id":"cijxylu4c0005y73nj9htzdyl","_id":"cioz2opap00051sfyudpwk7a4"},{"post_id":"cioz2opa800001sfy3d5fjtzr","tag_id":"cioz2opae00021sfyoupqjb3n","_id":"cioz2opaq00061sfyykhbouyv"},{"post_id":"cioz2opa800001sfy3d5fjtzr","tag_id":"cioz2opao00031sfypdrz0oce","_id":"cioz2opaq00071sfyfawas8dk"},{"post_id":"cioz2opa800001sfy3d5fjtzr","tag_id":"cioz2opap00041sfyn5lsjt9d","_id":"cioz2opaq00081sfybjki5pex"},{"post_id":"cip3kko0a0000apfycj7skt1s","tag_id":"cip3kko0i0002apfy7jp3q7t3","_id":"cip3kko0v0005apfypsm83kvy"},{"post_id":"cip3kko0a0000apfycj7skt1s","tag_id":"cip3kko0s0003apfy6frkxd8s","_id":"cip3kko0v0006apfyb6t011p6"},{"post_id":"cip3kko0a0000apfycj7skt1s","tag_id":"cip3kko0u0004apfynw5p2ayj","_id":"cip3kko0v0007apfy1prf8edy"},{"post_id":"cj4xfleb00000fupn6f2h8bz8","tag_id":"cijxylu4c0005y73nj9htzdyl","_id":"cj4xflebe0004fupnaepbhkqy"},{"post_id":"cj4xfleb00000fupn6f2h8bz8","tag_id":"cj4xfleb70001fupn8unedj51","_id":"cj4xflebf0005fupndq3ikoes"},{"post_id":"cj4xfleb00000fupn6f2h8bz8","tag_id":"cijxylu4e0008y73nld34uhf9","_id":"cj4xflebf0006fupnx27261dw"},{"post_id":"cj4xfleb00000fupn6f2h8bz8","tag_id":"cijxylu4d0006y73n9dql1030","_id":"cj4xflebf0007fupnqa5kmtck"},{"post_id":"cj4xfleb00000fupn6f2h8bz8","tag_id":"cijxylu5s003wy73ncbqibg9g","_id":"cj4xflebg0008fupnczzl56q6"},{"post_id":"cj4xfleb00000fupn6f2h8bz8","tag_id":"cj4xflebc0003fupnngp6084j","_id":"cj4xflebg0009fupniy9xi0co"}],"Tag":[{"name":"Mobile","_id":"cijxylu4c0005y73nj9htzdyl"},{"name":"iOS","_id":"cijxylu4d0006y73n9dql1030"},{"name":"Automation","_id":"cijxylu4e0008y73nld34uhf9"},{"name":"Framework","_id":"cijxylu4e0009y73n7sde4dxf"},{"name":"UIAutomation","_id":"cijxylu4e000ay73nqwww0b6l"},{"name":"NativeDriver","_id":"cijxylu4j000iy73nih2pcg1a"},{"name":"Frank","_id":"cijxylu4n000xy73nsj7zbi0s"},{"name":"Mind Map","_id":"cijxylu4r0015y73ncesyldrw"},{"name":"Test Case","_id":"cijxylu4r0016y73nbbovec0f"},{"name":"Acceptance Criteria","_id":"cijxylu4s0018y73nn1h56ave"},{"name":"AC","_id":"cijxylu4s0019y73nug0nawxc"},{"name":"Windows Phone","_id":"cijxylu4w001gy73nthpekll4"},{"name":"WindowsPhoneTestFramework","_id":"cijxylu4x001hy73n4f99j0c8"},{"name":"User Testing","_id":"cijxylu4z001py73n4cbwa3ja"},{"name":"Practice","_id":"cijxylu4z001qy73nnho2f7pt"},{"name":"Speaking","_id":"cijxylu51001vy73n9lgelhj6"},{"name":"Skills","_id":"cijxylu51001wy73n9p114mnf"},{"name":"Security","_id":"cijxylu520021y73nuhj0mzei"},{"name":"Web","_id":"cijxylu520022y73n851asfnq"},{"name":"Capability","_id":"cijxylu540027y73n94rbecc2"},{"name":"Matrix","_id":"cijxylu550028y73nvrz6ih86"},{"name":"Retro","_id":"cijxylu58002ey73nipt9iwb6"},{"name":"Gamification","_id":"cijxylu5d002ny73nxl6juyj0"},{"name":"Agile","_id":"cijxylu5g002ty73nmuhksn2y"},{"name":"QA","_id":"cijxylu5g002uy73nruuenp1h"},{"name":"No QA","_id":"cijxylu5g002vy73nk7nii9b1"},{"name":"Replace","_id":"cijxylu5g002wy73npc2mry3n"},{"name":"App Testing","_id":"cijxylu5i0033y73nboj57r8y"},{"name":"Rules","_id":"cijxylu5i0034y73nd1a5jsxa"},{"name":"Book","_id":"cijxylu5k003ay73nalkh1o6h"},{"name":"Publish","_id":"cijxylu5l003by73njjubmryr"},{"name":"Google","_id":"cijxylu5m003gy73nrbnj5xx5"},{"name":"Methodology","_id":"cijxylu5n003hy73n8z0ecrv2"},{"name":"Theory","_id":"cijxylu5n003ky73ngxuhicvy"},{"name":"Game","_id":"cijxylu5q003qy73nscp0hanh"},{"name":"Marshmallow Challenge","_id":"cijxylu5q003ry73n9mkyishb"},{"name":"Android","_id":"cijxylu5s003wy73ncbqibg9g"},{"name":"Exploratory Testing","_id":"cijxylu5s003xy73nqi9nqev7"},{"name":"Robotium","_id":"cijxylu5w0048y73nuho4fca1"},{"name":"Test Plan","_id":"cijxylu62004ny73nlkypw6mm"},{"name":"Business Travel","_id":"cijy1zjek0002hu3nh5igoqgp"},{"name":"Tips","_id":"cijy1zjes0003hu3n0h7zrnrn"},{"name":"Bug","_id":"cik4vvpwf0002ho3n7vi494s9"},{"name":"Series","_id":"cik4vvpwn0003ho3ni9s5b5dv"},{"name":"Bug集锦","_id":"cik4vvpwo0004ho3nfgbdohh0"},{"name":"用户测试","_id":"cikqc9gej00029v3nhn005m6j"},{"name":"Cloud Testing","_id":"cioz2opae00021sfyoupqjb3n"},{"name":"Comparison","_id":"cioz2opao00031sfypdrz0oce"},{"name":"Analysis","_id":"cioz2opap00041sfyn5lsjt9d"},{"name":"Delivery","_id":"cip3kko0i0002apfy7jp3q7t3"},{"name":"Domestic Project","_id":"cip3kko0s0003apfy6frkxd8s"},{"name":"Project Management","_id":"cip3kko0u0004apfynw5p2ayj"},{"name":"Appium","_id":"cj4xfleb70001fupn8unedj51"},{"name":"Get-Start","_id":"cj4xflebc0003fupnngp6084j"}]}}